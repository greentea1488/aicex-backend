version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ai-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ai-telegram-bot
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ai-network

  # Redis для кеширования и сессий
  redis:
    image: redis:7.2-alpine
    container_name: ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-network

  # Backend API
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: ai-backend
    restart: unless-stopped
    ports:
      - "3025:3025"
    environment:
      NODE_ENV: production
      PORT: 3025
      DATABASE_URL: mongodb://admin:password123@mongodb:27017/ai-telegram-bot?authSource=admin
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: http://localhost:4173
      BOT_TOKEN: ${BOT_TOKEN}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET: super_secret_key_12345_change_this_in_production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./back/logs:/app/logs
      - ./back/uploads:/app/uploads
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3025/ok"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile.frontend
    container_name: ai-frontend
    restart: unless-stopped
    ports:
      - "3000:4173"
    environment:
      VITE_API_URL: http://localhost:3025/api/v1
      VITE_BOT_USERNAME: aicex_ai_bot
    depends_on:
      - backend
    networks:
      - ai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ai-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-network:
    driver: bridge

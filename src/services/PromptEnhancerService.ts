import { OpenAIService } from './ai/OpenAIService';
import { logger } from '../utils/logger';

export interface PromptEnhancementOptions {
  style?: 'photographic' | 'artistic' | 'realistic' | 'fantasy' | 'anime';
  quality?: 'high' | 'medium' | 'low';
  language?: 'ru' | 'en';
  addDetails?: boolean;
  improveComposition?: boolean;
}

export interface EnhancedPrompt {
  original: string;
  enhanced: string;
  improvements: string[];
  style: string;
  quality: string;
}

export class PromptEnhancerService {
  private openai: OpenAIService;

  constructor() {
    this.openai = new OpenAIService();
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async enhancePrompt(
    originalPrompt: string, 
    options: PromptEnhancementOptions = {}
  ): Promise<EnhancedPrompt> {
    try {
      const {
        style = 'photographic',
        quality = 'high',
        language = 'ru',
        addDetails = true,
        improveComposition = true
      } = options;

      console.log('==================== PROMPT ENHANCER START ====================');
      console.log('Original Prompt:', originalPrompt);
      console.log('Options:', JSON.stringify(options, null, 2));
      console.log('===============================================================');

      // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
      const systemPrompt = this.createSystemPrompt(style, quality, language, addDetails, improveComposition);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
      const userPrompt = `–£–ª—É—á—à–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: "${originalPrompt}"`;

      logger.info('üî• Prompt Enhancer - Starting enhancement:', {
        originalPrompt: originalPrompt.substring(0, 100),
        style,
        quality,
        language
      });

      // –í—ã–∑—ã–≤–∞–µ–º GPT –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
      const response = await this.openai.chat([
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ], 'prompt-enhancer');

      if (!response.success || !response.content) {
        throw new Error('Failed to enhance prompt');
      }

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç GPT
      const enhancedPrompt = this.parseEnhancedPrompt(response.content, originalPrompt);
      
      console.log('==================== PROMPT ENHANCER RESULT ====================');
      console.log('Original:', enhancedPrompt.original);
      console.log('Enhanced:', enhancedPrompt.enhanced);
      console.log('Improvements:', enhancedPrompt.improvements);
      console.log('===============================================================');

      logger.info('üî• Prompt Enhancer - Success:', {
        originalLength: originalPrompt.length,
        enhancedLength: enhancedPrompt.enhanced.length,
        improvementsCount: enhancedPrompt.improvements.length
      });

      return enhancedPrompt;

    } catch (error: any) {
      logger.error('Prompt Enhancer error:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
      return this.createFallbackPrompt(originalPrompt, options);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
   */
  private createSystemPrompt(
    style: string, 
    quality: string, 
    language: string, 
    addDetails: boolean, 
    improveComposition: boolean
  ): string {
    const languageInstructions = language === 'ru' 
      ? '–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (—Ç–∞–∫ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å AI –º–æ–¥–µ–ª—è–º–∏).'
      : 'Respond in English and keep the enhanced prompt in English.';

    const styleInstructions = this.getStyleInstructions(style);
    const qualityInstructions = this.getQualityInstructions(quality);

    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–ª—É—á—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

${languageInstructions}

–°–¢–ò–õ–¨: ${styleInstructions}
–ö–ê–ß–ï–°–¢–í–û: ${qualityInstructions}

–ü–†–ê–í–ò–õ–ê –£–õ–£–ß–®–ï–ù–ò–Ø:
1. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –î–æ–±–∞–≤—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
3. –£–ª—É—á—à–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ
4. –î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
5. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/–¥–∏–∑–∞–π–Ω–∞

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π):
ENHANCED_PROMPT: [—É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º]
IMPROVEMENTS:
- [—É–ª—É—á—à–µ–Ω–∏–µ 1]
- [—É–ª—É—á—à–µ–Ω–∏–µ 2]
- [—É–ª—É—á—à–µ–Ω–∏–µ 3]

–ü—Ä–∏–º–µ—Ä:
ENHANCED_PROMPT: A majestic Siberian cat running through a snow-covered forest, professional wildlife photography, golden hour lighting, shallow depth of field, 85mm lens, high resolution, detailed fur texture, cinematic composition
IMPROVEMENTS:
- –î–æ–±–∞–≤–∏–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
- –£–ª—É—á—à–∏–ª –æ—Å–≤–µ—â–µ–Ω–∏–µ (golden hour)
- –î–æ–±–∞–≤–∏–ª –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –£–∫–∞–∑–∞–ª —Å—Ç–∏–ª—å (wildlife photography)`;
  }

  /**
   * –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
   */
  private getStyleInstructions(style: string): string {
    const styles = {
      photographic: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
      artistic: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      realistic: '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      fantasy: '–§–∞–Ω—Ç–∞–∑–∏–π–Ω—ã–π —Å—Ç–∏–ª—å - –≤–æ–ª—à–µ–±–Ω—ã–µ –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
      anime: '–ê–Ω–∏–º–µ —Å—Ç–∏–ª—å - —è–ø–æ–Ω—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞'
    };
    return styles[style as keyof typeof styles] || styles.photographic;
  }

  /**
   * –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
   */
  private getQualityInstructions(quality: string): string {
    const qualities = {
      high: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      medium: '–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —Ö–æ—Ä–æ—à–∏–µ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª—è–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      low: '–ü—Ä–æ—Å—Ç–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –±–∞–∑–æ–≤—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    };
    return qualities[quality as keyof typeof qualities] || qualities.high;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç GPT
   */
  private parseEnhancedPrompt(gptResponse: string, originalPrompt: string): EnhancedPrompt {
    try {
      // –ò—â–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const enhancedMatch = gptResponse.match(/ENHANCED_PROMPT:\s*(.+?)(?=\nIMPROVEMENTS:|$)/s);
      const enhanced = enhancedMatch ? enhancedMatch[1].trim() : originalPrompt;

      // –ò—â–µ–º —É–ª—É—á—à–µ–Ω–∏—è
      const improvementsMatch = gptResponse.match(/IMPROVEMENTS:\s*([\s\S]*?)(?=\n\n|$)/);
      const improvements = improvementsMatch 
        ? improvementsMatch[1]
            .split('\n')
            .map(line => line.replace(/^[-*]\s*/, '').trim())
            .filter(line => line.length > 0)
        : ['–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏', '–£–ª—É—á—à–µ–Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è'];

      return {
        original: originalPrompt,
        enhanced,
        improvements,
        style: 'photographic',
        quality: 'high'
      };
    } catch (error) {
      logger.error('Failed to parse enhanced prompt:', error);
      return this.createFallbackPrompt(originalPrompt);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç fallback –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ GPT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
   */
  private createFallbackPrompt(originalPrompt: string, options: PromptEnhancementOptions = {}): EnhancedPrompt {
    const { style = 'photographic', quality = 'high' } = options;
    
    // –ë–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    let enhanced = originalPrompt;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    if (quality === 'high') {
      enhanced += ', high quality, detailed, professional';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    switch (style) {
      case 'photographic':
        enhanced += ', professional photography, realistic lighting';
        break;
      case 'artistic':
        enhanced += ', artistic style, creative composition';
        break;
      case 'realistic':
        enhanced += ', photorealistic, detailed textures';
        break;
      case 'fantasy':
        enhanced += ', fantasy art, magical atmosphere';
        break;
      case 'anime':
        enhanced += ', anime style, vibrant colors';
        break;
    }

    return {
      original: originalPrompt,
      enhanced,
      improvements: ['–î–æ–±–∞–≤–ª–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞', '–î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∏–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã'],
      style,
      quality
    };
  }

  /**
   * –ë—ã—Å—Ç—Ä–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ (–±–µ–∑ GPT)
   */
  async quickEnhance(prompt: string): Promise<string> {
    // –ë–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑ –≤—ã–∑–æ–≤–∞ GPT
    let enhanced = prompt;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!enhanced.toLowerCase().includes('high quality') && !enhanced.toLowerCase().includes('detailed')) {
      enhanced += ', high quality, detailed';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!enhanced.toLowerCase().includes('lighting') && !enhanced.toLowerCase().includes('light')) {
      enhanced += ', professional lighting';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if (!enhanced.toLowerCase().includes('composition') && !enhanced.toLowerCase().includes('angle')) {
      enhanced += ', good composition';
    }

    return enhanced;
  }
}

import axios from 'axios';
import { logger } from '../../utils/logger';
import { PromptEnhancerService } from '../PromptEnhancerService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
interface FreepikImageModelConfig {
  name: string;
  description: string;
  endpoint: string;
  fallbackEndpoint: string;
  requiresModelParam: boolean;
  model?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä model (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Mystic)
}

// –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Freepik API)
// –ò—Å—Ç–æ—á–Ω–∏–∫–∏: https://docs.freepik.com/api-reference
export const FREEPIK_IMAGE_MODELS: Record<string, FreepikImageModelConfig> = {
  // Seedream (v3) - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
  // Docs: https://docs.freepik.com/api-reference/text-to-image/seedream/post-seedream
  'seedream': {
    name: 'Seedream v3',
    description: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/v1/ai/text-to-image/seedream',    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint –¥–ª—è Seedream v3
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false                      // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º model
  },
  
  // –£–±—Ä–∞–Ω—ã Seedream 4 –∏ Seedream Edit - —ç—Ç–∏ –º–æ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –≤—ã—à–ª–∏
  
  
  // Flux Dev - –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  // Docs: https://docs.freepik.com/api-reference/text-to-image/flux-dev
  'flux-dev': {
    name: 'Flux Dev',
    description: '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/v1/ai/text-to-image/flux-dev',    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false                      // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º model
  },
  'flux_dev': {
    name: 'Flux Dev',
    description: '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/v1/ai/text-to-image/flux-dev',
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false
  },
  
  // Flux Pro v1.1 - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  // Docs: https://docs.freepik.com/api-reference/text-to-image/flux-pro-v1-1/post-flux-pro-v1-1
  'flux-pro': {
    name: 'Flux Pro v1.1',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/v1/ai/text-to-image/flux-pro-v1-1', // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false                        // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º model
  },
  'flux_pro': {
    name: 'Flux Pro v1.1',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/v1/ai/text-to-image/flux-pro-v1-1',
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false
  },
  
  // Hyperflux - –≥–∏–±—Ä–∏–¥–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  // Docs: https://docs.freepik.com/api-reference/text-to-image/get-hyperflux
  'hyperflux': {
    name: 'Hyperflux',
    description: '–ì–∏–±—Ä–∏–¥–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/v1/ai/text-to-image/hyperflux',    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false                       // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º model
  },
  
  // Mystic - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π endpoint)
  // Docs: https://docs.freepik.com/api-reference/mystic/post-mystic
  'mystic': {
    name: 'Freepik Mystic',
    description: 'Ultra-realistic, high-resolution images (Freepik exclusive)',
    endpoint: '/v1/ai/mystic',                     // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint
    fallbackEndpoint: '/v1/ai/text-to-image',
    model: 'realism',                              // Mystic —Ç—Ä–µ–±—É–µ—Ç model: 'realism', 'fluid' –∏–ª–∏ 'zen'
    requiresModelParam: true                       // –ü–µ—Ä–µ–¥–∞–µ–º model –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
  },
  
  // Classic Fast - –±–∞–∑–æ–≤–∞—è –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  // Docs: https://docs.freepik.com/api-reference/text-to-image/get-image-from-text
  'classic': {
    name: 'Classic Fast',
    description: '–ë—ã—Å—Ç—Ä–∞—è –±–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/v1/ai/text-to-image',              // –ë–∞–∑–æ–≤—ã–π endpoint
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false                      // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º model
  },
  
  // Google Imagen 3
  // Docs: https://docs.freepik.com/api-reference/text-to-image/imagen3
  'imagen3': {
    name: 'Google Imagen 3',
    description: 'Google\'s latest image generation model',
    endpoint: '/v1/ai/text-to-image/imagen3',      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false                      // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º model
  },
  
  // Gemini 2.5 Flash
  // Docs: https://docs.freepik.com/api-reference/ai/gemini-2-5-flash-image-preview
  'gemini': {
    name: 'Gemini 2.5 Flash',
    description: 'Google\'s Gemini for image generation',
    endpoint: '/v1/ai/gemini-2-5-flash-image-preview', // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false                      // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º model
  },
  
  // Gemini Flash - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  'gemini-flash': {
    name: 'Gemini 2.5 Flash',
    description: 'Google\'s Gemini for image generation',
    endpoint: '/v1/ai/gemini-2-5-flash-image-preview', // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint
    fallbackEndpoint: '/v1/ai/text-to-image',
    requiresModelParam: false                      // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º model
  }
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)
// –í –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ endpoints –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
export const FREEPIK_ALTERNATIVE_ENDPOINTS = [
  '/v1/ai/text-to-image',     // Classic Fast - –±–∞–∑–æ–≤—ã–π endpoint
  '/v1/ai/mystic',             // Mystic endpoint
];

// –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–∏–∑ Freepik API - –∑–∞–º–µ–Ω—è—é—Ç Runway –∏ Kling)
// –í–ê–ñ–ù–û: endpoint'—ã –ë–ï–ó /v1/ –≤ –Ω–∞—á–∞–ª–µ, —Ç.–∫. baseUrl —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /v1
export const FREEPIK_VIDEO_MODELS = {
  // üé¨ Kling v2.5 Pro - –ù–æ–≤–µ–π—à–∞—è –º–æ–¥–µ–ª—å
  kling_v2_5_pro: {
    name: 'Kling 2.5 Pro',
    description: '–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –≤–∏–¥–µ–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π',
    endpoint: '/ai/image-to-video/kling-v2-5-pro',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['prompt', 'negative_prompt', 'cfg_scale', 'duration'],
    resolution: '1080p'
  },
  
  // üé¨ MiniMax Hailuo 02 - 768p
  minimax_hailuo_768p: {
    name: 'MiniMax Hailuo 02 768p',
    description: '–ö–∞—á–µ—Å—Ç–≤–æ 768p –æ—Ç Minimax',
    endpoint: '/ai/image-to-video/minimax-hailuo-02-768p',
    supportedDurations: [6, 10],
    requiredFields: ['prompt', 'first_frame_image'],
    optionalFields: ['last_frame_image', 'prompt_optimizer', 'duration'],
    resolution: '768p'
  },
  
  // üé¨ MiniMax Hailuo 02 - 1080p
  minimax_hailuo_1080p: {
    name: 'MiniMax Hailuo 02 1080p',
    description: '–ö–∞—á–µ—Å—Ç–≤–æ 1080p –æ—Ç Minimax (—Ç–æ–ª—å–∫–æ 6 —Å–µ–∫)',
    endpoint: '/ai/image-to-video/minimax-hailuo-02-1080p',
    supportedDurations: [6],
    requiredFields: ['prompt', 'first_frame_image'],
    optionalFields: ['last_frame_image', 'prompt_optimizer', 'duration'],
    resolution: '1080p'
  },
  
  // üé¨ Kling v2.1 Master
  kling_v2_1_master: {
    name: 'Kling 2.1 Master',
    description: '–ú–∞—Å—Ç–µ—Ä –≤–µ—Ä—Å–∏—è Kling v2.1 —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏',
    endpoint: '/ai/image-to-video/kling-v2-1-master',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['prompt', 'negative_prompt', 'cfg_scale', 'duration', 'static_mask', 'dynamic_masks'],
    resolution: '1080p'
  },
  
  // üé¨ Kling Pro v2.1
  kling_v2_1_pro: {
    name: 'Kling Pro v2.1',
    description: '–ü—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/ai/image-to-video/kling-v2-1-pro',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['image_tail', 'prompt', 'negative_prompt', 'cfg_scale', 'duration', 'static_mask', 'dynamic_masks'],
    resolution: '1080p'
  },
  
  // üé¨ Kling Std v2.1
  kling_v2_1_std: {
    name: 'Kling Std v2.1',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    endpoint: '/ai/image-to-video/kling-v2-1-std',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['prompt', 'negative_prompt', 'cfg_scale', 'duration', 'static_mask', 'dynamic_masks'],
    resolution: '720p'
  },
  
  // üé¨ PixVerse V5
  pixverse_v5: {
    name: 'PixVerse V5',
    description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏',
    endpoint: '/ai/image-to-video/pixverse-v5',
    supportedDurations: [5, 8],
    supportedResolutions: ['360p', '540p', '720p', '1080p'],
    requiredFields: ['prompt', 'image_url'],
    optionalFields: ['resolution', 'duration', 'negative_prompt', 'style', 'seed'],
    resolution: '1080p'
  },
  
  // üé¨ PixVerse V5 Transition
  pixverse_v5_transition: {
    name: 'PixVerse V5 Transition',
    description: '–ü–µ—Ä–µ—Ö–æ–¥—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
    endpoint: '/ai/image-to-video/pixverse-v5-transition',
    supportedDurations: [5, 8],
    requiredFields: ['start_image_url', 'end_image_url'],
    optionalFields: ['resolution', 'duration', 'prompt'],
    resolution: '1080p'
  },
  
  // üé¨ Kling v2
  kling_v2: {
    name: 'Kling v2',
    description: '–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Kling v2',
    endpoint: '/ai/image-to-video/kling-v2',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['prompt', 'negative_prompt', 'cfg_scale', 'duration'],
    resolution: '720p'
  },
  
  // üé¨ Kling Pro 1.6
  kling_pro_1_6: {
    name: 'Kling Pro 1.6',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 1.6',
    endpoint: '/ai/image-to-video/kling-pro',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['prompt', 'negative_prompt', 'cfg_scale', 'duration', 'static_mask', 'dynamic_masks'],
    resolution: '1080p'
  },
  
  // üé¨ Kling Std 1.6
  kling_std_1_6: {
    name: 'Kling Std 1.6',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è 1.6',
    endpoint: '/ai/image-to-video/kling-std',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['prompt', 'negative_prompt', 'cfg_scale', 'duration', 'static_mask', 'dynamic_masks'],
    resolution: '720p'
  },
  
  // üé¨ Kling Elements Pro 1.6
  kling_elements_pro_1_6: {
    name: 'Kling Elements Pro 1.6',
    description: '–†–∞–±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–¥–æ 4)',
    endpoint: '/ai/image-to-video/kling-elements-pro',
    supportedDurations: [5, 10],
    requiredFields: ['images'],
    optionalFields: ['prompt', 'negative_prompt', 'duration', 'aspect_ratio'],
    resolution: '1080p'
  },
  
  // üé¨ Kling Elements Std 1.6
  kling_elements_std_1_6: {
    name: 'Kling Elements Std 1.6',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è Elements (–¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)',
    endpoint: '/ai/image-to-video/kling-elements-std',
    supportedDurations: [5, 10],
    requiredFields: ['images'],
    optionalFields: ['prompt', 'negative_prompt', 'duration', 'aspect_ratio'],
    resolution: '720p'
  },
  
  // üé¨ Seedance Pro 1080p
  seedance_pro_1080p: {
    name: 'Seedance Pro 1080p',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ',
    endpoint: '/ai/image-to-video/seedance-pro-1080p',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['prompt', 'duration'],
    resolution: '1080p'
  },
  
  // üé¨ Wan v2.2 720p
  wan_v2_2_720p: {
    name: 'Wan v2.2 720p',
    description: '–ú–æ–¥–µ–ª—å Wan –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
    endpoint: '/ai/image-to-video/wan-v2-2-720p',
    supportedDurations: [5, 10],
    requiredFields: ['image'],
    optionalFields: ['prompt', 'duration'],
    resolution: '720p'
  }
};

export interface FreepikImageRequest {
  prompt: string;
  aspect_ratio?: '1:1' | '16:9' | '9:16' | '2:3' | '3:4' | '3:2' | '4:3';
  model?: keyof typeof FREEPIK_IMAGE_MODELS;
  resolution?: '1k' | '2k' | '4k';
  creative_detailing?: number; // 0-100
  enhancePrompt?: boolean; // –í–∫–ª—é—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
  promptStyle?: 'photographic' | 'artistic' | 'realistic' | 'fantasy' | 'anime';
  promptQuality?: 'high' | 'medium' | 'low';
}

export interface FreepikVideoRequest {
  image: string; // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  prompt?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
  model?: keyof typeof FREEPIK_VIDEO_MODELS;
  duration?: number; // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

export interface FreepikResponse {
  success: boolean;
  data?: {
    id: string;
    status: 'processing' | 'completed' | 'failed';
    images?: Array<{
      id: string;
      url: string;
      base64?: string;
    }>;
    videos?: Array<{
      id: string;
      url: string;
    }>;
    promptEnhancement?: {
      original: string;
      enhanced: string;
      improvements: string[];
      style: string;
      quality: string;
    } | null;
  };
  error?: string;
}

export class FreepikService {
  private apiKey: string;
  private baseUrl = process.env.FREEPIK_API_URL || 'https://api.freepik.com';
  private promptEnhancer: PromptEnhancerService;
  
  // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL (endpoints —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç /v1/)
  private alternativeBaseUrls = [
    'https://api.freepik.com',        // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API URL (–ë–ï–ó /v1 –≤ –∫–æ–Ω—Ü–µ!)
  ];

  constructor() {
    this.apiKey = process.env.FREEPIK_API_KEY || '';
    if (!this.apiKey) {
      logger.error('FREEPIK_API_KEY is not set in environment variables');
      throw new Error('FREEPIK_API_KEY is required');
    }
    this.promptEnhancer = new PromptEnhancerService();
    logger.info('FreepikService initialized with API key:', this.apiKey.substring(0, 8) + '...');
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç aspect_ratio –∏–∑ "1:1" –≤ "square_1_1" –¥–ª—è Freepik API
   */
  private convertAspectRatio(ratio?: string): string {
    const ratioMap: Record<string, string> = {
      '1:1': 'square_1_1',
      '16:9': 'widescreen_16_9',
      '9:16': 'social_story_9_16',
      '2:3': 'portrait_2_3',
      '3:4': 'traditional_3_4',
      '3:2': 'standard_3_2',
      '4:3': 'classic_4_3'
    };
    
    return ratioMap[ratio || '1:1'] || 'square_1_1';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Freepik AI
   */
  async generateImage(request: FreepikImageRequest): Promise<FreepikResponse> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
      if (!this.apiKey) {
        logger.error('Freepik API key is not set');
        return {
          success: false,
          error: 'Freepik API key is not configured'
        };
      }

      const model = request.model || 'seedream';
      const modelConfig = FREEPIK_IMAGE_MODELS[model];
      
      // –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      let finalPrompt = request.prompt;
      let promptEnhancement = null;
      
      // –ö–†–ò–¢–ò–ß–ù–û: enhancePrompt –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —è–≤–Ω–æ true, —á—Ç–æ–±—ã —É–ª—É—á—à–∞—Ç—å –ø—Ä–æ–º–ø—Ç
      // –ï—Å–ª–∏ undefined –∏–ª–∏ false - –ù–ï —É–ª—É—á—à–∞–µ–º (–¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤)
      if (request.enhancePrompt === true) {
        console.log('==================== PROMPT ENHANCEMENT START ====================');
        console.log('Original Prompt:', request.prompt);
        console.log('Enhancement Options:', {
          style: request.promptStyle || 'photographic',
          quality: request.promptQuality || 'high'
        });
        console.log('===============================================================');
        
        try {
          promptEnhancement = await this.promptEnhancer.enhancePrompt(request.prompt, {
            style: request.promptStyle || 'photographic',
            quality: request.promptQuality || 'high',
            language: 'ru',
            model: model // –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
          });
          finalPrompt = promptEnhancement.enhanced;
          
          console.log('==================== PROMPT ENHANCED ====================');
          console.log('Original:', promptEnhancement.original);
          console.log('Enhanced:', promptEnhancement.enhanced);
          console.log('Improvements:', promptEnhancement.improvements);
          console.log('===============================================================');
        } catch (error) {
          console.log('==================== PROMPT ENHANCEMENT FAILED ====================');
          console.log('Error:', error);
          console.log('Using original prompt');
          console.log('===============================================================');
        }
      }

      logger.info('üî• FREEPIK GENERATION START:', { 
        originalPrompt: request.prompt.substring(0, 50),
        finalPrompt: finalPrompt.substring(0, 50),
        model: request.model,
        aspect_ratio: request.aspect_ratio,
        promptEnhanced: !!promptEnhancement,
        timestamp: new Date().toISOString()
      });
      
      logger.info('üîç Freepik model lookup:', { 
        requestedModel: model,
        availableModels: Object.keys(FREEPIK_IMAGE_MODELS),
        modelConfig: modelConfig ? 'found' : 'not found',
        modelEndpoint: modelConfig?.endpoint,
        modelName: modelConfig?.name
      });
      
      if (!modelConfig) {
        console.log('MODEL CONFIG IS UNDEFINED!');
        console.log('Trying to find model:', model);
        console.log('Available models:', Object.keys(FREEPIK_IMAGE_MODELS));
        
        logger.error('Unknown Freepik model:', { 
          requestedModel: model,
          availableModels: Object.keys(FREEPIK_IMAGE_MODELS)
        });
        return {
          success: false,
          error: `Unknown model: ${model}. Available models: ${Object.keys(FREEPIK_IMAGE_MODELS).join(', ')}`
        };
      }
      
      logger.info('Freepik image generation started:', { 
        prompt: request.prompt,
        model: modelConfig.name,
        endpoint: `${this.baseUrl}${modelConfig.endpoint}`,
        apiKeyPresent: !!this.apiKey
      });

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Freepik API
      const baseRequestData: any = {
        prompt: finalPrompt, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        aspect_ratio: this.convertAspectRatio(request.aspect_ratio)
      };
      
      logger.info('Freepik API request prepared:', {
        prompt: request.prompt.substring(0, 50),
        aspect_ratio: baseRequestData.aspect_ratio,
        model: modelConfig.name
      });

      // –¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const headerVariations = [
        { 'x-freepik-api-key': this.apiKey, 'Content-Type': 'application/json' },  // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      ];

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π endpoint (–º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
      const endpointsToTest = [modelConfig.endpoint];
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö URL, endpoints –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      let attemptCount = 0;
      const totalAttempts = this.alternativeBaseUrls.length * endpointsToTest.length * headerVariations.length;
      
      logger.info(`Starting Freepik API testing for ${modelConfig.name}: ${totalAttempts} total combinations to test`);
      logger.info(`Model-specific endpoints: ${modelConfig.endpoint}, fallback: ${modelConfig.fallbackEndpoint}`);
      
      for (const baseUrl of this.alternativeBaseUrls) {
        for (const endpoint of endpointsToTest) {
          for (const headers of headerVariations) {
            attemptCount++;
            
            const url = `${baseUrl}${endpoint}`;
            
            logger.info(`üöÄ FREEPIK ATTEMPT ${attemptCount}/${totalAttempts}:`, {
              url,
              headers: Object.keys(headers),
              model: modelConfig.name,
              endpoint: endpoint
            });
            
            // –£—Å–ª–æ–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä model —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç
            const requestData: any = { ...baseRequestData };
            
            // –î–æ–±–∞–≤–ª—è–µ–º model —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ requiresModelParam === true (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Mystic)
            if (modelConfig.requiresModelParam && modelConfig.model) {
              requestData.model = modelConfig.model;
              logger.info(`üìù Added model param to request:`, { model: modelConfig.model });
            }
            
            try {
              
              logger.info(`Testing Freepik endpoint (${attemptCount}/${totalAttempts}): ${url}`);
              
              logger.info('Testing Freepik endpoint:', {
                attempt: `${attemptCount}/${totalAttempts}`,
                url,
                baseUrl,
                endpoint,
                data: requestData,
                headers: {
                  ...headers,
                  // –°–∫—Ä—ã–≤–∞–µ–º API –∫–ª—é—á –≤ –ª–æ–≥–∞—Ö
                  [Object.keys(headers)[0]]: Object.values(headers)[0].toString().substring(0, 8) + '...'
                }
              });

              const response = await axios.post(url, requestData, {
                headers,
                timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              });

              // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ console.log (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∏–¥–Ω–æ)
              console.log('==================== FREEPIK API SUCCESS ====================');
              console.log('URL:', url);
              console.log('Request Body:', JSON.stringify(requestData, null, 2));
              console.log('Request Headers:', headers);
              console.log('Response Status:', response.status);
              console.log('Response Data:', JSON.stringify(response.data, null, 2));
              console.log('Response Headers:', response.headers);
              console.log('=============================================================');

              // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              logger.info(`üî• FREEPIK SUCCESS: ${baseUrl}${endpoint} | Status: ${response.status} | Headers: ${Object.keys(headers).join(',')}`);
              
              // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
              logger.info('üî• Freepik endpoint success:', { 
                baseUrl, 
                endpoint, 
                headers: Object.keys(headers),
                status: response.status,
                responseData: response.data,
                responseDataType: typeof response.data,
                hasImages: !!response.data?.images,
                imagesLength: response.data?.images?.length
              });
              
              // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
              const processedResponse = await this.processFreepikResponse(response, promptEnhancement);
              
              console.log('==================== PROCESSED RESPONSE ====================');
              console.log('Processed Response:', JSON.stringify(processedResponse, null, 2));
              console.log('===========================================================');
              
              return processedResponse;
              
            } catch (error: any) {
              // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              logger.warn(`Freepik failed: ${baseUrl}${endpoint} | Status: ${error.response?.status || 'NO_STATUS'} | Message: ${error.message}`);
              
              // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ console.log (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∏–¥–Ω–æ)
              console.log('==================== FREEPIK API ERROR ====================');
              console.log('URL:', `${baseUrl}${endpoint}`);
              console.log('Request Body:', JSON.stringify(requestData, null, 2));
              console.log('Request Headers:', headers);
              console.log('Response Status:', error.response?.status);
              console.log('Response Status Text:', error.response?.statusText);
              console.log('Response Data:', JSON.stringify(error.response?.data, null, 2));
              console.log('Response Headers:', error.response?.headers);
              console.log('Error Message:', error.message);
              console.log('=========================================================');
              
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
              continue;
            }
          }
        }
      }

      // –ï—Å–ª–∏ –≤—Å–µ endpoints –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      throw new Error('All Freepik endpoints failed');

    } catch (error: any) {
      logger.error('Freepik image generation error:', {
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        config: {
          url: error.config?.url,
          method: error.config?.method,
          headers: error.config?.headers
        },
        fullError: error
      });
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Freepik API
   */
  private async processFreepikResponse(response: any, promptEnhancement?: any): Promise<FreepikResponse> {
    console.log('==================== PROCESS FREEPIK RESPONSE START ====================');
    console.log('Raw Response Data:', JSON.stringify(response.data, null, 2));
    console.log('Response Status:', response.status);
    console.log('Response Headers:', response.headers);
    console.log('===============================================================');
    
    logger.info('üî• PROCESS FREEPIK RESPONSE:', JSON.stringify(response.data, null, 2));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    let taskId = response.data.data?.task_id || response.data.task_id || response.data.id;
    let images = response.data.data?.generated || response.data.generated || response.data.images;
    let status = response.data.data?.status || response.data.status;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å CREATED –∏ generated –ø—É—Å—Ç–æ–π, –Ω–æ –µ—Å—Ç—å images –≤ data - –∏—Å–ø–æ–ª—å–∑—É–µ–º images!
    if (status === 'CREATED' && (!images || images.length === 0)) {
      images = response.data.data?.images || response.data.images;
      if (images && images.length > 0) {
        status = 'COMPLETED'; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        console.log('üî• FIXED: Found images in data.images, updating status to COMPLETED');
      }
    }

    console.log('==================== PARSED FREEPIK RESPONSE ====================');
    console.log('Task ID:', taskId);
    console.log('Status:', status);
    console.log('Images:', images);
    console.log('Images Type:', typeof images);
    console.log('Images Is Array:', Array.isArray(images));
    console.log('Images Length:', images?.length);
    console.log('===============================================================');

    logger.info('üî• Parsed Freepik response:', {
      taskId,
      status,
      images,
      imagesType: typeof images,
      imagesIsArray: Array.isArray(images),
      imagesLength: images?.length
    });

    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –≥–æ—Ç–æ–≤—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É
    if (images && images.length > 0) {
      console.log('==================== IMAGES READY IMMEDIATELY ====================');
      console.log('Images Count:', images.length);
      console.log('Images:', images);
      console.log('===============================================================');
      
      logger.info('üî• Freepik images ready immediately:', { count: images.length, images });
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã images
      const processedImages = images.map((item: any, index: number) => {
        let url: string | null = null;
        
        console.log(`==================== PROCESSING IMAGE ${index + 1} ====================`);
        console.log('Image Item:', item);
        console.log('Image Type:', typeof item);
        console.log('===============================================================');
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º url
        if (typeof item === 'object' && item.url) {
          logger.info(`üî• Image item ${index + 1} is object with url:`, item);
          url = item.url;
        }
        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ URL
        else if (typeof item === 'string') {
          logger.info('Image item is string URL:', item);
          url = item;
        }
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –Ω–æ –±–µ–∑ url - –ø—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
        else if (typeof item === 'object') {
          logger.warn('Image item is object WITHOUT url field:', item);
          // –ò—â–µ–º –ª—é–±–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ URL
          for (const [key, value] of Object.entries(item)) {
            if (typeof value === 'string' && (value.startsWith('http://') || value.startsWith('https://'))) {
              logger.info(`Found URL in field "${key}":`, value);
              url = value;
              break;
            }
          }
        }
        
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (!url) {
          logger.warn('Unknown image format, no URL found:', item);
          return null;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö URL
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
          // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω
          if (url.startsWith('/')) {
            logger.warn('Found relative URL, converting to absolute:', url);
            url = `https://api.freepik.com${url}`;
          }
          // –ï—Å–ª–∏ —ç—Ç–æ URL –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–æ–º–µ–Ω–∞)
          else if (url.includes('.')) {
            logger.warn('Found URL without protocol, adding https:', url);
            url = `https://${url}`;
          }
          // –ò–Ω–∞—á–µ —ç—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ URL
          else {
            logger.error('Invalid URL (not a valid format):', url);
            return null;
          }
        }
        
        logger.info('Final validated URL:', url);
        return { url, id: item.id || Math.random().toString() };
      }).filter(Boolean);
      
      logger.info('Processed images:', processedImages);
      
      return {
        success: true,
        data: {
          id: taskId,
          status: 'completed',
          images: processedImages,
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
          promptEnhancement: promptEnhancement ? {
            original: promptEnhancement.original,
            enhanced: promptEnhancement.enhanced,
            improvements: promptEnhancement.improvements,
            style: promptEnhancement.style,
            quality: promptEnhancement.quality
          } : null
        }
      };
    }

    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≥–æ—Ç–æ–≤—ã - –æ–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    if (taskId && status === 'CREATED') {
      logger.info('Freepik task created, polling for results:', { taskId });
      
      // –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã, –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
      const maxAttempts = 15;
      const pollInterval = 2000;
      
      for (let attempt = 0; attempt < maxAttempts; attempt++) {
        await new Promise(resolve => setTimeout(resolve, pollInterval));
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º endpoint –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ URL
          const endpoint = response.config.url.replace(this.baseUrl, '');
          
          logger.info(`Polling Freepik task status (${attempt + 1}/${maxAttempts}):`, { taskId, endpoint });
          
          const statusResponse = await axios.get(
            `${this.baseUrl}${endpoint}/${taskId}`,
            {
              headers: {
                'x-freepik-api-key': this.apiKey
              }
            }
          );
          
          const taskStatus = statusResponse.data.data?.status || statusResponse.data.status;
          const taskImages = statusResponse.data.data?.generated || statusResponse.data.generated || statusResponse.data.images;
          
          logger.info('Freepik task status:', { taskId, status: taskStatus, imagesReady: !!taskImages?.length });
          
          if (taskStatus === 'COMPLETED' && taskImages && taskImages.length > 0) {
            logger.info('Freepik task completed successfully:', { taskId, imageCount: taskImages.length });
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã generated
            const images = taskImages.map((item: any) => {
              let url: string | null = null;
              
              // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Pino
              logger.info({ 
                message: 'Polling: Processing image item',
                itemJson: JSON.stringify(item),
                itemType: typeof item,
                itemValue: item
              });
              
              // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º url
              if (typeof item === 'object' && item.url) {
                logger.info({ message: 'Polling: Found url field', urlValue: item.url });
                url = item.url;
              }
              // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ URL
              else if (typeof item === 'string') {
                logger.info({ 
                  message: 'Polling: Item is string',
                  stringValue: item,
                  stringLength: item.length,
                  first100chars: item.substring(0, 100)
                });
                url = item;
              }
              // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –Ω–æ –±–µ–∑ url - –ø—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
              else if (typeof item === 'object') {
                logger.warn('Polling: Image item is object WITHOUT url field:', JSON.stringify(item));
                // –ò—â–µ–º –ª—é–±–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ URL –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                for (const [key, value] of Object.entries(item)) {
                  if (typeof value === 'string') {
                    logger.info(`Polling: Checking field "${key}":`, value);
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ http/https URL
                    if (value.startsWith('http://') || value.startsWith('https://')) {
                      logger.info(`Polling: Found URL in field "${key}":`, value);
                      url = value;
                      break;
                    }
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –¥–æ–º–µ–Ω
                    if (value.startsWith('/') || value.includes('.')) {
                      logger.info(`Polling: Found potential URL/path in field "${key}":`, value);
                      url = value;
                      break;
                    }
                  }
                }
              }
              
              // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
              if (!url) {
                logger.warn('Polling: Unknown image format, no URL found:', JSON.stringify(item));
                return null;
              }
              
              logger.info({ 
                message: 'Polling: Before validation',
                urlValue: url,
                urlType: typeof url,
                urlLength: url?.length
              });
              
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö URL
              if (!url.startsWith('http://') && !url.startsWith('https://')) {
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω
                if (url.startsWith('/')) {
                  logger.warn('Polling: Found relative URL, converting to absolute:', url);
                  url = `https://api.freepik.com${url}`;
                }
                // –ï—Å–ª–∏ —ç—Ç–æ URL –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–æ–º–µ–Ω–∞)
                else if (url.includes('.')) {
                  logger.warn('Polling: Found URL without protocol, adding https:', url);
                  url = `https://${url}`;
                }
                // –ò–Ω–∞—á–µ —ç—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ URL
                else {
                  logger.error('Polling: Invalid URL (not a valid format):', url);
                  return null;
                }
              }
              
              logger.info('Polling: Final validated URL:', url);
              return { url, id: item.id || Math.random().toString() };
            }).filter(Boolean);
            
            logger.info('Processed images:', { images });
            
            return {
              success: true,
              data: {
                id: taskId,
                status: 'completed',
                images
              }
            };
          }
          
          if (taskStatus === 'FAILED') {
            logger.error('Freepik task failed:', { taskId });
            return {
              success: false,
              error: 'Task generation failed'
            };
          }
          
        } catch (pollError: any) {
          logger.warn('Freepik polling error:', { taskId, attempt: attempt + 1, error: pollError.message });
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º task_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      logger.warn('Freepik task polling timeout, returning task_id:', { taskId });
      return {
        success: true,
        data: {
          id: taskId,
          status: 'processing',
          images: []
        }
      };
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
    return {
      success: true,
      data: {
        id: taskId,
        status: 'processing',
        images: []
      }
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Freepik API
   */
  async generateVideoFromImage(imageUrl: string, prompt?: string, model: keyof typeof FREEPIK_VIDEO_MODELS = 'kling_v2_5_pro', duration?: number): Promise<FreepikResponse> {
    try {
      console.log('üé¨ generateVideoFromImage called with:', { model, imageUrl: imageUrl.substring(0, 50), prompt });
      
      const modelConfig = FREEPIK_VIDEO_MODELS[model];
      
      if (!modelConfig) {
        console.error('‚ùå Unknown video model:', model);
        throw new Error(`Unknown video model: ${model}`);
      }
      
      console.log('üé¨ Model config found:', { 
        name: modelConfig.name, 
        endpoint: modelConfig.endpoint,
        baseUrl: this.baseUrl 
      });
      
      logger.info('üé¨ Freepik image-to-video generation started:', { 
        imageUrl: imageUrl.substring(0, 50) + '...',
        prompt: prompt?.substring(0, 100),
        model: modelConfig.name,
        modelId: model,
        endpoint: modelConfig.endpoint,
        baseUrl: this.baseUrl,
        duration
      });

      const requestData: any = {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º webhook —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ BACKEND_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      let backendUrl = process.env.BACKEND_URL || 
                       process.env.RAILWAY_PUBLIC_DOMAIN || 
                       process.env.RAILWAY_STATIC_URL ||
                       'https://aicexaibot-production.up.railway.app';
      
      // –î–æ–±–∞–≤–ª—è–µ–º https:// –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      if (backendUrl && !backendUrl.startsWith('http://') && !backendUrl.startsWith('https://')) {
        backendUrl = `https://${backendUrl}`;
      }
                         
      console.log('üîó Backend URL for webhook:', backendUrl);
      
      if (backendUrl && backendUrl !== 'undefined' && backendUrl !== 'https://undefined') {
        requestData.webhook_url = `${backendUrl}/api/webhooks/freepik`;
        console.log('‚úÖ Webhook URL set:', requestData.webhook_url);
      } else {
        console.log('‚ö†Ô∏è No webhook URL - will use polling mode');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
      switch (model) {
        // MiniMax –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç prompt –∏ first_frame_image
        case 'minimax_hailuo_768p':
        case 'minimax_hailuo_1080p':
          requestData.prompt = prompt || 'Create a cinematic video';
          requestData.first_frame_image = imageUrl;
          // –û—Ç–∫–ª—é—á–∞–µ–º prompt_optimizer –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
          const isRussianPrompt = /[–∞-—è—ë]/i.test(prompt || '');
          if (!isRussianPrompt) {
            requestData.prompt_optimizer = true;
          }
          // MiniMax 1080p –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 6 —Å–µ–∫—É–Ω–¥
          if (model === 'minimax_hailuo_1080p') {
            requestData.duration = 6;
          } else {
            requestData.duration = duration && [6, 10].includes(duration) ? duration : 6;
          }
          break;

        // PixVerse V5 —Ç—Ä–µ–±—É–µ—Ç prompt –∏ image_url
        case 'pixverse_v5':
          requestData.prompt = prompt || 'Create a cinematic video';
          requestData.image_url = imageUrl;
          requestData.resolution = '1080p';
          requestData.duration = duration && [5, 8].includes(duration) ? duration : 5;
          break;

        // PixVerse V5 Transition —Ç—Ä–µ–±—É–µ—Ç start_image_url –∏ end_image_url
        case 'pixverse_v5_transition':
          requestData.start_image_url = imageUrl;
          requestData.end_image_url = imageUrl; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∂–µ
          if (prompt) requestData.prompt = prompt;
          requestData.duration = duration && [5, 8].includes(duration) ? duration : 5;
          break;

        // Kling Elements —Ç—Ä–µ–±—É—é—Ç –º–∞—Å—Å–∏–≤ images
        case 'kling_elements_pro_1_6':
        case 'kling_elements_std_1_6':
          requestData.images = [imageUrl];
          if (prompt) requestData.prompt = prompt;
          requestData.duration = duration && [5, 10].includes(duration) ? String(duration) : "5";
          requestData.aspect_ratio = 'widescreen_16_9';
          break;

        // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ Kling –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç image
        case 'kling_v2_5_pro':
          requestData.image = imageUrl;
          if (prompt) requestData.prompt = prompt;
          requestData.cfg_scale = 0.5;
          // Kling v2.5 Pro –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 5s –∏ 10s
          requestData.duration = duration && [5, 10].includes(duration) ? String(duration) : "5";
          break;

        default:
          // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (Kling Pro/Std 1.6, 2.1, v2, Seedance, Wan)
          requestData.image = imageUrl;
          if (prompt) requestData.prompt = prompt;
          
          // –î–æ–±–∞–≤–ª—è–µ–º cfg_scale –¥–ª—è Kling –º–æ–¥–µ–ª–µ–π
          if (model.includes('kling')) {
            requestData.cfg_scale = 0.5;
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º duration
          if (modelConfig.supportedDurations) {
            const validDuration = duration && modelConfig.supportedDurations.includes(duration) 
              ? duration 
              : modelConfig.supportedDurations[0];
            requestData.duration = String(validDuration);
          }
          break;
      }

      const fullUrl = `${this.baseUrl}${modelConfig.endpoint}`;
      
      console.log('üé¨ Request data:', { 
        model, 
        endpoint: modelConfig.endpoint,
        fullUrl,
        requestData 
      });
      
      logger.info('üé¨ Request data:', { 
        model, 
        endpoint: modelConfig.endpoint,
        fullUrl,
        requestData: { ...requestData, image: requestData.image?.substring(0, 50) + '...' } 
      });

      const response = await axios.post(
        fullUrl,
        requestData,
        {
          headers: {
            'x-freepik-api-key': this.apiKey,
            'Content-Type': 'application/json'
          },
          timeout: 300000 // 5 –º–∏–Ω—É—Ç
        }
      );

      console.log('üé¨ Freepik image-to-video FULL response:', JSON.stringify(response.data, null, 2));
      console.log('üé¨ Response headers:', JSON.stringify(response.headers, null, 2));
      
      logger.info('üé¨ Freepik image-to-video response:', {
        status: response.status,
        taskId: response.data.data?.task_id,
        taskStatus: response.data.data?.status,
        selfUrl: response.data.data?.self,
        webhookUrl: response.data.data?.webhook_url,
        data: response.data
      });

      return {
        success: true,
        data: {
          id: response.data.data?.task_id,
          status: 'processing',
          videos: response.data.data?.generated?.map((url: string) => ({ url, id: Math.random().toString() }))
        }
      };

    } catch (error: any) {
      console.error('üé¨ Freepik image-to-video error:', {
        model,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        invalidParams: error.response?.data?.invalid_params,
        message: error.message,
        url: error.config?.url,
        method: error.config?.method,
        requestBody: error.config?.data
      });
      
      logger.error('üé¨ Freepik image-to-video error:', {
        model,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        url: error.config?.url
      });
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Freepik AI
   */
  async generateVideo(request: FreepikVideoRequest): Promise<FreepikResponse> {
    return await this.generateVideoFromImage(
      request.image,
      request.prompt,
      request.model || 'kling_v2_1_std'
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  getImageModels() {
    return Object.entries(FREEPIK_IMAGE_MODELS).map(([key, model]) => ({
      id: key,
      name: model.name,
      description: model.description
    }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤–∏–¥–µ–æ
   */
  getVideoModels() {
    return Object.entries(FREEPIK_VIDEO_MODELS).map(([key, model]) => ({
      id: key,
      name: model.name,
      description: model.description,
      supportedDurations: model.supportedDurations || [],
      resolution: model.resolution
    }));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  async checkTaskStatus(taskId: string, type: 'image' | 'video' = 'image', model?: string): Promise<FreepikResponse> {
    try {
      // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º Mystic endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      let endpoint = `/ai/mystic/${taskId}`;
      
      // –î–ª—è –≤–∏–¥–µ–æ endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: GET /{model}/{task-id}
      // –ë–ï–ó /ai/image-to-video/ –ø—Ä–µ—Ñ–∏–∫—Å–∞!
      if (type === 'video' && model) {
        const modelConfig = FREEPIK_VIDEO_MODELS[model as keyof typeof FREEPIK_VIDEO_MODELS];
        if (modelConfig) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å endpoint)
          const modelName = modelConfig.endpoint.split('/').pop();
          endpoint = `/${modelName}/${taskId}`;
        } else {
          endpoint = `/kling-v2-1-std/${taskId}`;
        }
      } else if (type === 'video') {
        endpoint = `/kling-v2-1-std/${taskId}`;
      }

      const fullUrl = `${this.baseUrl}${endpoint}`;
      
      console.log('üîç Checking task status:', {
        taskId,
        type,
        model,
        endpoint,
        fullUrl
      });

      const response = await axios.get(
        fullUrl,
        {
          headers: {
            'x-freepik-api-key': this.apiKey
          }
        }
      );

      console.log('üîç Task status response:', {
        taskId,
        status: response.status,
        data: response.data
      });

      const status = response.data.data?.status;
      const generated = response.data.data?.generated;
      
      console.log('üîç Parsed status:', {
        status,
        generatedLength: generated?.length,
        generated
      });
      
      return {
        success: true,
        data: {
          id: taskId,
          status: status === 'COMPLETED' ? 'completed' : status === 'FAILED' ? 'failed' : 'processing',
          images: type === 'image' && generated ? generated.map((url: string) => ({ url, id: Math.random().toString() })) : undefined,
          videos: type === 'video' && generated ? generated.map((url: string) => ({ url, id: Math.random().toString() })) : undefined
        }
      };

    } catch (error: any) {
      console.error('üîç Task status check ERROR:', {
        taskId,
        type,
        model,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        url: error.config?.url
      });
      
      logger.error('Task status check failed:', error.response?.data || error.message);
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }


  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–æ–∫ API
   */
  private parseError(error: any): string {
    if (error.response?.data?.error?.message) {
      return error.response.data.error.message;
    }
    
    if (error.response?.data?.message) {
      return error.response.data.message;
    }
    
    if (error.response?.status === 401) {
      return 'Invalid API key - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ FREEPIK_API_KEY';
    }
    
    if (error.response?.status === 429) {
      return 'Rate limit exceeded. Please try again later.';
    }
    
    if (error.response?.status === 400) {
      return `Invalid request parameters: ${JSON.stringify(error.response?.data)}`;
    }
    
    if (error.response?.status === 403) {
      return 'API access forbidden - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞';
    }
    
    if (error.response?.status === 404) {
      return 'API endpoint not found';
    }
    
    if (error.response?.status >= 500) {
      return 'Server error on Freepik side';
    }
    
    return error.message || 'Unknown error occurred';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞
   */
  async validateApiKey(): Promise<boolean> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      const response = await axios.get(
        `${this.baseUrl}/ai/mystic`,
        {
          headers: {
            'x-freepik-api-key': this.apiKey
          }
        }
      );
      return response.status === 200;
    } catch {
      return false;
    }
  }
}

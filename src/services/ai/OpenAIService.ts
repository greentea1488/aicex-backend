import OpenAI from 'openai';
import { logger } from '../../utils/logger';
import * as fs from 'fs';

export interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface VisionMessage {
  role: 'user' | 'assistant';
  content: Array<{
    type: 'text' | 'image_url';
    text?: string;
    image_url?: {
      url: string;
      detail?: 'low' | 'high' | 'auto';
    };
  }>;
}

export interface ChatResponse {
  success: boolean;
  content?: string;
  error?: string;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export class OpenAIService {
  private client: OpenAI;

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY is required');
    }

    this.client = new OpenAI({
      apiKey: apiKey
    });
  }

  /**
   * –ß–∞—Ç —Å GPT-4o (–Ω–æ–≤–µ–π—à–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async chat(messages: ChatMessage[], model: string = 'gpt-4o'): Promise<ChatResponse> {
    try {
      logger.info('OpenAI chat request:', { 
        model: model,
        messageCount: messages.length,
        lastMessage: messages[messages.length - 1]?.content?.substring(0, 100)
      });

      const response = await this.client.chat.completions.create({
        model: model,
        messages: messages as any,
        max_tokens: 1000,
        temperature: 0.7,
        top_p: 1,
        frequency_penalty: 0,
        presence_penalty: 0
      });

      const content = response.choices[0]?.message?.content;
      
      if (!content) {
        return {
          success: false,
          error: 'No response from OpenAI'
        };
      }

      logger.info('OpenAI chat response received:', {
        model,
        usage: response.usage,
        responseLength: content.length
      });

      return {
        success: true,
        content: content,
        usage: response.usage || undefined
      };

    } catch (error: any) {
      logger.error('OpenAI chat error:', error.message);
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å GPT-4 Vision
   */
  async analyzeImage(imageUrl: string, prompt: string = '–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'): Promise<ChatResponse> {
    try {
      logger.info('OpenAI vision request:', { prompt: prompt.substring(0, 100) });

      const messages: VisionMessage[] = [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: prompt
            },
            {
              type: 'image_url',
              image_url: {
                url: imageUrl,
                detail: 'high'
              }
            }
          ]
        }
      ];

      const completion = await this.client.chat.completions.create({
        model: 'gpt-4-vision-preview',
        messages: messages as any,
        max_tokens: 1000,
        temperature: 0.7
      });

      const content = completion.choices[0]?.message?.content;
      
      if (!content) {
        return {
          success: false,
          error: 'No response from GPT-4 Vision'
        };
      }

      logger.info('OpenAI vision response received:', {
        usage: completion.usage,
        responseLength: content.length
      });

      return {
        success: true,
        content: content,
        usage: completion.usage || undefined
      };

    } catch (error: any) {
      logger.error('OpenAI vision error:', error.message);
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å DALL-E
   */
  async generateImage(prompt: string, size: '1024x1024' | '1792x1024' | '1024x1792' = '1024x1024'): Promise<ChatResponse> {
    try {
      logger.info('DALL-E image generation:', { prompt: prompt.substring(0, 100), size });

      const response = await this.client.images.generate({
        model: 'dall-e-3',
        prompt: prompt,
        n: 1,
        size: size,
        quality: 'standard',
        response_format: 'url'
      });

      const imageUrl = response.data?.[0]?.url;
      
      if (!imageUrl) {
        return {
          success: false,
          error: 'No image generated'
        };
      }

      logger.info('DALL-E image generated successfully');

      return {
        success: true,
        content: imageUrl
      };

    } catch (error: any) {
      logger.error('DALL-E generation error:', error.message);
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
   */
  async createEmbedding(text: string): Promise<number[] | null> {
    try {
      const response = await this.client.embeddings.create({
        model: 'text-embedding-ada-002',
        input: text
      });

      return response.data[0]?.embedding || null;

    } catch (error: any) {
      logger.error('OpenAI embedding error:', error.message);
      return null;
    }
  }

  /**
   * –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async moderateContent(text: string): Promise<{ flagged: boolean; categories?: any }> {
    try {
      const response = await this.client.moderations.create({
        input: text
      });

      const result = response.results[0];
      
      return {
        flagged: result?.flagged || false,
        categories: result?.categories
      };

    } catch (error: any) {
      logger.error('OpenAI moderation error:', error.message);
      return { flagged: false };
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async enhancePrompt(originalPrompt: string): Promise<string> {
    try {
      const enhanceMessages: ChatMessage[] = [
        {
          role: 'system',
          content: `üìå –¶–µ–ª—å

–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π Prompt Enhancer, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–ª—É—á—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

üß≠ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
1. –ü–æ–ª—É—á–∏–≤ –≤—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–º–ø—Ç, —Ç—ã:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å—É—Ç—å –∏ —Ü–µ–ª—å –ø—Ä–æ–º–ø—Ç–∞.
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—à—å –µ–≥–æ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: –Ω–µ—è—Å–Ω–æ—Å—Ç—å, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
‚Ä¢ –£–ª—É—á—à–∞–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –¥–æ–±–∞–≤–ª—è–µ—à—å —á–µ—Ç–∫–∏–µ –¥–µ—Ç–∞–ª–∏ (—Å—Ç–∏–ª—å, —Å–≤–µ—Ç, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, POV –∏ —Ç.–¥.).
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—à—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—à—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

2. –í—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–π best-practice –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
‚Ä¢ –£–ø–æ—Ä –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Å—Ç–∏–ª—å, —Å–≤–µ—Ç, POV, –∫–∞–º–µ—Ä—É, —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ.
‚Ä¢ –£–±–∏—Ä–∞–π –ª–∏—à–Ω–∏–µ –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –¥–µ—Ä–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–ø–∏—Å–∞–Ω–∏—è –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π –∏ –æ–±—Ä–∞–∑–Ω–æ–π.
‚Ä¢ –î–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã, –ø–ª–∞–Ω–µ (close up / medium / wide), –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ.
‚Ä¢ –†–∞–∑–±–∏–≤–∞–π —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.

3. –í—ã—Ö–æ–¥ —Å—Ç—Ä–æ–≥–æ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ:

‚ú® Improved prompt (EN):
[—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º]

üìù –ü—Ä–∞–≤–∏–ª–∞
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –æ—Ç —Å–µ–±—è –∫—Ä–µ–∞—Ç–∏–≤, –Ω–µ –∏–∑–º–µ–Ω—è—è —Å–º—ã—Å–ª –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.
‚Ä¢ –£–ª—É—á—à–∞–π —è—Å–Ω–æ—Å—Ç—å, –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø–æ–¥ –º–æ–¥–µ–ª—å.
‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à ‚Äî —Å–ª–µ–≥–∫–∞ –µ–≥–æ —à–ª–∏—Ñ—É–π, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π.
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã–µ –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ prompt-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞.
‚Ä¢ –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ—á–Ω—ã–π —Å–º—ã—Å–ª –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞!`
        },
        {
          role: 'user',
          content: `–£–ª—É—á—à–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç: "${originalPrompt}"`
        }
      ];

      const response = await this.chat(enhanceMessages, 'gpt-4o');
      
      if (response.success && response.content) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –±–ª–æ–∫–∞
        const improvedMatch = response.content.match(/‚ú® Improved prompt \(EN\):\s*([^\n]+)/);
        if (improvedMatch && improvedMatch[1]) {
          return improvedMatch[1].trim();
        }
        
        // Fallback - –µ—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
        return response.content.trim();
      }
      
      return originalPrompt;

    } catch (error) {
      logger.error('Prompt enhancement error:', error);
      return originalPrompt;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å AI
   */
  async translateToEnglish(text: string): Promise<string> {
    try {
      const messages: ChatMessage[] = [
        {
          role: 'system',
          content: '–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –≤–µ—Ä–Ω–∏ –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º.'
        },
        {
          role: 'user',
          content: text
        }
      ];

      const response = await this.chat(messages, 'gpt-4o');
      
      if (response.success && response.content) {
        return response.content.trim();
      }
      
      return text;

    } catch (error) {
      logger.error('Translation error:', error);
      return text;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–æ–∫ OpenAI
   */
  private parseError(error: any): string {
    if (error.error?.message) {
      return error.error.message;
    }
    
    if (error.message) {
      return error.message;
    }
    
    if (error.status === 401) {
      return 'Invalid OpenAI API key';
    }
    
    if (error.status === 429) {
      return 'OpenAI rate limit exceeded. Please try again later.';
    }
    
    if (error.status === 400) {
      return 'Invalid request to OpenAI';
    }
    
    if (error.status === 500) {
      return 'OpenAI server error. Please try again.';
    }
    
    return 'Unknown OpenAI error occurred';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞
   */
  async validateApiKey(): Promise<boolean> {
    try {
      const response = await this.chat([
        { role: 'user', content: 'Hello' }
      ], 'gpt-4o');
      
      return response.success;
    } catch {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
   */
  async getAvailableModels(): Promise<string[]> {
    try {
      const response = await this.client.models.list();
      return response.data
        .filter(model => model.id.includes('gpt'))
        .map(model => model.id)
        .sort();
    } catch (error) {
      logger.error('Error getting OpenAI models:', error);
      return ['gpt-3.5-turbo', 'gpt-4'];
    }
  }

  /**
   * –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper API
   */
  async transcribeAudio(filePath: string, language?: string): Promise<ChatResponse> {
    try {
      logger.info('Whisper transcription request:', { filePath, language });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(filePath)) {
        return {
          success: false,
          error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      const fileStream = fs.createReadStream(filePath);

      const transcription = await this.client.audio.transcriptions.create({
        file: fileStream,
        model: 'whisper-1',
        language: language || 'ru',
        response_format: 'text'
      });

      logger.info('Whisper transcription completed:', {
        textLength: transcription?.length || 0
      });

      return {
        success: true,
        content: transcription as string
      };

    } catch (error: any) {
      logger.error('Whisper transcription error:', error.message);
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º —á–µ—Ä–µ–∑ ChatGPT
   */
  async transcribeAndAnalyze(
    filePath: string, 
    prompt: string = '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ',
    language?: string
  ): Promise<ChatResponse> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
      const transcriptionResult = await this.transcribeAudio(filePath, language);
      
      if (!transcriptionResult.success || !transcriptionResult.content) {
        return transcriptionResult;
      }

      logger.info('Analyzing transcribed text with ChatGPT');

      // –¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT
      const messages: ChatMessage[] = [
        {
          role: 'system',
          content: '–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
        },
        {
          role: 'user',
          content: `${prompt}\n\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n${transcriptionResult.content}`
        }
      ];

      const analysisResult = await this.chat(messages, 'gpt-4o');

      if (analysisResult.success) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
          success: true,
          content: `üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:**\n${transcriptionResult.content}\n\nü§ñ **–ê–Ω–∞–ª–∏–∑:**\n${analysisResult.content}`,
          usage: analysisResult.usage
        };
      }

      return analysisResult;

    } catch (error: any) {
      logger.error('Transcribe and analyze error:', error.message);
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }

  /**
   * –ß–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ñ–∞–π–ª–∞
   */
  async chatWithFile(
    fileContent: string, 
    userPrompt: string, 
    fileName?: string,
    model: string = 'gpt-4o'
  ): Promise<ChatResponse> {
    try {
      logger.info('Chat with file:', { fileName, promptLength: userPrompt.length });

      const messages: ChatMessage[] = [
        {
          role: 'system',
          content: '–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∏—Ö. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
        },
        {
          role: 'user',
          content: `–£ –º–µ–Ω—è –µ—Å—Ç—å —Ñ–∞–π–ª${fileName ? ` "${fileName}"` : ''} —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:\n\n${fileContent}\n\n${userPrompt}`
        }
      ];

      return await this.chat(messages, model);

    } catch (error: any) {
      logger.error('Chat with file error:', error.message);
      
      return {
        success: false,
        error: this.parseError(error)
      };
    }
  }
}

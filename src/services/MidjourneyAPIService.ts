import axios from 'axios';
import { logger } from '../utils/logger';
import { prisma } from '../utils/prismaClient';
import { CONFIG } from '../config';

export interface MidjourneyGenerationRequest {
  prompt: string;
  model?: string;
  aspect_ratio?: string;
  quality?: string;
  style?: string;
  seed?: number;  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
  negative_prompt?: string;  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
  userId: number;
  telegramId: number;
}

export interface MidjourneyGenerationResponse {
  success: boolean;
  taskId?: string;
  error?: string;
  estimatedTime?: number;
}

export class MidjourneyAPIService {
  private apiUrl: string;
  private apiKey: string;

  constructor() {
    this.apiUrl = process.env.GEN_API_URL || 'https://api.gen-api.ru';
    this.apiKey = process.env.GEN_API_KEY || '';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
   */
  isConfigured(): boolean {
    return !!(this.apiUrl && this.apiKey);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Midjourney
   */
  async generateImage(request: MidjourneyGenerationRequest): Promise<MidjourneyGenerationResponse> {
    try {
      if (!this.isConfigured()) {
        throw new Error('Midjourney API not configured');
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
      const user = await prisma.user.findUnique({
        where: { telegramId: request.telegramId }
      });

      if (!user) {
        throw new Error('User not found');
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const cost = this.calculateCost(request.model || '7.0', request.quality || 'high');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
      if (user.tokens < cost) {
        throw new Error(`Insufficient tokens. Required: ${cost}, Available: ${user.tokens}`);
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
      const task = await prisma.midjourneyTask.create({
        data: {
          userId: user.id,
          telegramId: request.telegramId,
          prompt: request.prompt,
          model: request.model || '7.0',
          style: request.style || 'photorealistic',
          aspect_ratio: request.aspect_ratio || '1:1',
          quality: request.quality || 'high',
          status: 'pending',
          cost,
          taskId: '' // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ API
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gen API –¥–ª—è Midjourney
      // –°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ GenAPI - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const baseUrl = CONFIG.app.baseUrl.startsWith('http') ? CONFIG.app.baseUrl : `https://${CONFIG.app.baseUrl}`;
      const callbackUrl = `${baseUrl}/api/webhooks/midjourney`;
      console.log('üîó Using callback URL:', callbackUrl);
      
      const requestBody: any = {
        prompt: this.buildPrompt(request),
        callback_url: callbackUrl
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
      if (request.model) {
        requestBody.model = request.model;
      }
      
      if (request.aspect_ratio && request.aspect_ratio !== '1:1') {
        requestBody.aspectRatio = request.aspect_ratio;  // camelCase!
      }
      
      if (request.seed !== undefined) {
        requestBody.seed = request.seed;
      }
      
      if (request.negative_prompt) {
        requestBody.no = request.negative_prompt;  // –ü–∞—Ä–∞–º–µ—Ç—Ä 'no' —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      }

      console.log('==================== MIDJOURNEY API REQUEST ====================');
      console.log('API URL:', this.apiUrl);
      console.log('Endpoint:', `${this.apiUrl}/api/v1/networks/midjourney`);
      console.log('Request Body:', JSON.stringify(requestBody, null, 2));
      console.log('Has API Key:', !!this.apiKey);
      console.log('üöÄ RAILWAY TEST: Using CORRECT GenAPI endpoint from documentation!');
      console.log('===============================================================');

      // POST –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const apiResponse = await axios.post(
        `${this.apiUrl}/api/v1/networks/midjourney`,
        requestBody,
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        }
      );

      console.log('==================== MIDJOURNEY API RESPONSE ====================');
      console.log('Status:', apiResponse.status);
      console.log('Response Data:', JSON.stringify(apiResponse.data, null, 2));
      console.log('===============================================================');

      // GenAPI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç request_id –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
      const requestId = apiResponse.data.request_id || apiResponse.data.id;
      
      if (requestId) {

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å request_id –æ—Ç API
        await prisma.midjourneyTask.update({
          where: { id: task.id },
          data: {
            taskId: requestId.toString(),  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Prisma
            status: 'processing'
          }
        });

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        await this.deductTokens(user.id, cost, requestId.toString());

        logger.info('Midjourney generation started via Gen API', {
          requestId,
          userId: user.id,
          cost,
          prompt: request.prompt,
          apiUrl: this.apiUrl
        });

        return {
          success: true,
          taskId: requestId,  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º request_id
          estimatedTime: 90
        };

      } else {
        throw new Error(`Gen API error: ${apiResponse.data.message || apiResponse.data.error || 'No request_id returned'}`);
      }

    } catch (error: any) {
      console.log('==================== MIDJOURNEY API ERROR ====================');
      console.log('Error Type:', error.constructor.name);
      console.log('Error Message:', error.message);
      console.log('Error Code:', error.code);
      console.log('Response Status:', error.response?.status);
      console.log('Response Status Text:', error.response?.statusText);
      console.log('Response Data:', JSON.stringify(error.response?.data, null, 2));
      console.log('Request URL:', error.config?.url);
      console.log('Request Method:', error.config?.method);
      console.log('===============================================================');

      logger.error('Midjourney generation failed:', error);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = 'Unknown error';
      
      if (error.response?.status === 404) {
        errorMessage = 'üîß –°–µ—Ä–≤–∏—Å Midjourney –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π AI —Å–µ—Ä–≤–∏—Å';
      } else if (error.response?.status === 401) {
        errorMessage = 'üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π GenAPI\n\nüí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
      } else if (error.response?.status === 402) {
        const apiErrorMessage = error.response?.data?.error || '–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ';
        errorMessage = `üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ GenAPI\n\n${apiErrorMessage}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å GenAPI –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π AI —Å–µ—Ä–≤–∏—Å`;
      } else if (error.response?.status === 429) {
        errorMessage = '‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ GenAPI\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π AI —Å–µ—Ä–≤–∏—Å';
      } else if (error.response?.data?.message) {
        errorMessage = `‚ùå –û—à–∏–±–∫–∞ GenAPI: ${error.response.data.message}`;
      } else if (error.message) {
        errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      }
      
      return {
        success: false,
        error: errorMessage
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Gen API
   * –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: GET /api/v1/result/{request_id}
   */
  async getTaskStatus(requestId: string): Promise<any> {
    try {
      if (!this.isConfigured()) {
        throw new Error('Gen API not configured');
      }

      console.log('==================== CHECKING MIDJOURNEY STATUS ====================');
      console.log('Request ID:', requestId);
      console.log('Endpoint:', `${this.apiUrl}/api/v1/result/${requestId}`);
      console.log('===============================================================');

      const response = await axios.get(
        `${this.apiUrl}/api/v1/result/${requestId}`,  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Accept': 'application/json'
          }
        }
      );

      console.log('==================== MIDJOURNEY STATUS RESPONSE ====================');
      console.log('Status:', response.data.status);
      console.log('Response Data:', JSON.stringify(response.data, null, 2));
      console.log('===============================================================');

      // GenAPI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
      // {
      //   "status": "processing" | "failed" | "success",
      //   "result": { ... }  // –ø—Ä–∏ success
      // }

      return response.data;

    } catch (error) {
      logger.error('Failed to get Gen API task status:', error);
      throw error;
    }
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç (GenAPI –¥–ª—è Midjourney –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –µ—Å—Ç—å)
   */
  private buildPrompt(request: MidjourneyGenerationRequest): string {
    // GenAPI –¥–ª—è Midjourney –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
    // –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∏–ª—è/–∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ input –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    return request.prompt;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private calculateCost(model: string, quality: string): number {
    const baseCosts = {
      '5.0': 7,
      '5.1': 7,
      '5.2': 7,
      '6.0': 7,
      '6.1': 7,
      '7.0': 8
    };

    const qualityMultiplier = {
      'low': 0.8,
      'medium': 1.0,
      'high': 1.2
    };

    const baseCost = baseCosts[model as keyof typeof baseCosts] || 8;
    const multiplier = qualityMultiplier[quality as keyof typeof qualityMultiplier] || 1.0;

    return Math.ceil(baseCost * multiplier);
  }

  /**
   * –°–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async deductTokens(userId: string, amount: number, taskId: string): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: userId },
        data: {
          tokens: {
            decrement: amount
          }
        }
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–∫–µ–Ω–æ–≤
      await prisma.tokenHistory.create({
        data: {
          userId,
          amount: -amount,
          type: 'SPEND_MIDJOURNEY',
          description: `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Midjourney`,
          service: 'midjourney',
          taskId,
          balanceBefore: 0, // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
          balanceAfter: 0,   // TODO: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
          metadata: {
            taskId,
            service: 'midjourney'
          }
        }
      });

      logger.info('Tokens deducted for Midjourney generation', {
        userId,
        amount,
        taskId
      });

    } catch (error) {
      logger.error('Failed to deduct tokens:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
   */
  getAvailableModels(): Array<{
    id: string;
    name: string;
    cost: number;
    description: string;
  }> {
    return [
      {
        id: '5.0',
        name: 'Midjourney 5.0',
        cost: 7,
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º'
      },
      {
        id: '5.1',
        name: 'Midjourney 5.1',
        cost: 7,
        description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 5.0'
      },
      {
        id: '5.2',
        name: 'Midjourney 5.2',
        cost: 7,
        description: '–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –ª–∏–Ω–µ–π–∫–∏ 5.x'
      },
      {
        id: '6.0',
        name: 'Midjourney 6.0',
        cost: 7,
        description: '–ù–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º'
      },
      {
        id: '6.1',
        name: 'Midjourney 6.1',
        cost: 7,
        description: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 6-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è'
      },
      {
        id: '7.0',
        name: 'Midjourney 7.0',
        cost: 8,
        description: '–ù–æ–≤–µ–π—à–∞—è –≤–µ—Ä—Å–∏—è —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º'
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
   */
  getAvailableStyles(): Array<{
    id: string;
    name: string;
    description: string;
  }> {
    return [
      {
        id: 'photorealistic',
        name: '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',
        description: '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
      },
      {
        id: 'artistic',
        name: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
        description: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å'
      },
      {
        id: 'anime',
        name: '–ê–Ω–∏–º–µ',
        description: '–Ø–ø–æ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –∞–Ω–∏–º–µ –∏ –º–∞–Ω–≥–∞'
      },
      {
        id: 'cartoon',
        name: '–ú—É–ª—å—Ç—è—à–Ω—ã–π',
        description: '–Ø—Ä–∫–∏–π –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å'
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
   */
  getAvailableAspectRatios(): Array<{
    id: string;
    name: string;
    description: string;
  }> {
    return [
      {
        id: '1:1',
        name: '–ö–≤–∞–¥—Ä–∞—Ç (1:1)',
        description: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π'
      },
      {
        id: '16:9',
        name: '–®–∏—Ä–æ–∫–∏–π (16:9)',
        description: '–î–ª—è –æ–±–ª–æ–∂–µ–∫ –∏ –±–∞–Ω–Ω–µ—Ä–æ–≤'
      },
      {
        id: '9:16',
        name: '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (9:16)',
        description: '–î–ª—è –∏—Å—Ç–æ—Ä–∏–π –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤'
      },
      {
        id: '4:3',
        name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π (4:3)',
        description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ'
      },
      {
        id: '3:4',
        name: '–ü–æ—Ä—Ç—Ä–µ—Ç (3:4)',
        description: '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  getAvailableQuality(): Array<{
    id: string;
    name: string;
    description: string;
    costMultiplier: number;
  }> {
    return [
      {
        id: 'low',
        name: '–ë–∞–∑–æ–≤–æ–µ',
        description: '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        costMultiplier: 0.8
      },
      {
        id: 'medium',
        name: '–°—Ä–µ–¥–Ω–µ–µ',
        description: '–ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞',
        costMultiplier: 1.0
      },
      {
        id: 'high',
        name: '–í—ã—Å–æ–∫–æ–µ',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
        costMultiplier: 1.2
      }
    ];
  }
}

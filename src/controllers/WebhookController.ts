import { Request, Response } from 'express';
import { logger } from '../utils/logger';
import { PaymentService } from '../services/PaymentService';
import { UserService } from '../services/UserService';
import { prisma } from '../utils/prismaClient';
import crypto from 'crypto';
import { webhookCallback } from 'grammy';
import { userStateService } from '../services/UserStateService';
import { GenerationService } from '../services/GenerationService';

export class WebhookController {
  private paymentService: PaymentService;

  constructor() {
    this.paymentService = new PaymentService();
  }

  /**
   * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async ensureUserExists(telegramId: number, telegramUser: any): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await prisma.user.findUnique({
        where: { telegramId }
      });

      if (!existingUser) {
        logger.info(`Creating new user: ${telegramId} (@${telegramUser.username})`);
        
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await UserService.findOrCreateUser({
            id: telegramId,
            first_name: telegramUser.first_name || '',
            last_name: telegramUser.last_name || '',
            username: telegramUser.username || `user_${telegramId}`,
            photo_url: telegramUser.photo_url,
            language_code: telegramUser.language_code
          });
          
          logger.info(`‚úÖ User created successfully: ${telegramId}`);
        } catch (createError: any) {
          // –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
          logger.warn(`User creation failed, but this is likely a race condition: ${createError.message}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω
          const userCheck = await prisma.user.findUnique({
            where: { telegramId }
          });
          
          if (!userCheck) {
            logger.error(`Failed to create user ${telegramId} and user still doesn't exist`);
            throw createError;
          } else {
            logger.info(`‚úÖ User ${telegramId} exists after race condition`);
          }
        }
      }
    } catch (error) {
      logger.error('Error ensuring user exists:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram
   */
  async handleTelegramWebhook(req: Request, res: Response): Promise<void> {
    try {
      logger.info('Received Telegram webhook', { 
        body: req.body,
        update_id: req.body?.update_id,
        message: req.body?.message?.text,
        from: req.body?.message?.from?.username
      });
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
      if (req.body?.callback_query) {
        logger.info('üî• Processing callback query...');
        
        const callbackQuery = req.body.callback_query;
        const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;
        const messageId = callbackQuery.message.message_id;
        
        const { bot } = await import('../bot/bot');
        
        if (bot) {
          try {
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await bot.api.answerCallbackQuery(callbackQuery.id);
            
            if (data === 'photo_generation') {
              await bot.api.editMessageText(chatId, messageId, "üì∏ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π** - –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üé® Freepik AI", callback_data: "freepik_photo" }],
                    [{ text: "üé® Midjourney", callback_data: "midjourney_photo" }],
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
                  ]
                }
              });
            } else if (data === 'video_generation') {
              await bot.api.editMessageText(chatId, messageId, "üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ** - –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üé® Freepik AI", callback_data: "freepik_video" }],
                    [{ text: "‚ú® Kling", callback_data: "kling_video" }],
                    [{ text: "üöÄ Runway ML", callback_data: "runway_video" }],
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
                  ]
                }
              });
            } else if (data === 'freepik_photo') {
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              userStateService.setState(callbackQuery.from.id, 'freepik_photo');
              
              await bot.api.editMessageText(chatId, messageId, `üé® **Freepik AI** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\nüì∑ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5 —Ç–æ–∫–µ–Ω–æ–≤`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "photo_generation" }]
                  ]
                }
              });
            } else if (data === 'midjourney_photo') {
              userStateService.setState(callbackQuery.from.id, 'midjourney_photo');
              
              await bot.api.editMessageText(chatId, messageId, `üé® **Midjourney** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10 —Ç–æ–∫–µ–Ω–æ–≤`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "photo_generation" }]
                  ]
                }
              });
            } else if (data === 'freepik_video') {
              userStateService.setState(callbackQuery.from.id, 'freepik_video');
              
              await bot.api.editMessageText(chatId, messageId, `üé¨ **Freepik AI** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\nüì∑ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 25 —Ç–æ–∫–µ–Ω–æ–≤`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "video_generation" }]
                  ]
                }
              });
            } else if (data === 'kling_video') {
              userStateService.setState(callbackQuery.from.id, 'kling_video');
              
              await bot.api.editMessageText(chatId, messageId, `‚ú® **Kling AI** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\nüì∑ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 30 —Ç–æ–∫–µ–Ω–æ–≤`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "video_generation" }]
                  ]
                }
              });
            } else if (data === 'runway_video') {
              userStateService.setState(callbackQuery.from.id, 'runway_video');
              
              await bot.api.editMessageText(chatId, messageId, `üöÄ **Runway ML** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\nüì∑ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 50 —Ç–æ–∫–µ–Ω–æ–≤`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "video_generation" }]
                  ]
                }
              });
            } else if (data === 'chatgpt') {
              userStateService.setState(callbackQuery.from.id, 'chatgpt');
              
              await bot.api.editMessageText(chatId, messageId, `üí¨ **ChatGPT** –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ç–æ–∫–µ–Ω –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
                  ]
                }
              });
            } else if (data === 'midjourney') {
              userStateService.setState(callbackQuery.from.id, 'midjourney');
              
              await bot.api.editMessageText(chatId, messageId, `üé® **Midjourney** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10 —Ç–æ–∫–µ–Ω–æ–≤`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
                  ]
                }
              });
            } else if (data === 'kling') {
              userStateService.setState(callbackQuery.from.id, 'kling');
              
              await bot.api.editMessageText(chatId, messageId, `‚ú® **Kling AI** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\nüì∑ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 30 —Ç–æ–∫–µ–Ω–æ–≤`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
                  ]
                }
              });
            } else if (data === 'back_to_main') {
              await bot.api.editMessageText(chatId, messageId, "ü§ñ **AICEX AI Bot** - –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", callback_data: "photo_generation" }],
                    [{ text: "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", callback_data: "video_generation" }],
                    [{ text: "üí¨ ChatGPT", callback_data: "chatgpt" }],
                    [{ text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å", web_app: { url: "https://aicexonefrontend-production.up.railway.app/home" } }]
                  ]
                }
              });
            }
            
            logger.info(`‚úÖ Callback query ${data} processed successfully`);
            res.status(200).json({ ok: true });
            return;
            
          } catch (callbackError) {
            logger.error('Failed to process callback query:', callbackError);
          }
        }
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (req.body?.message?.photo) {
        const chatId = req.body.message.chat.id;
        const userId = req.body.message.from.id;
        const photos = req.body.message.photo;
        const caption = req.body.message.caption || '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞
        const userState = userStateService.getState(userId);
        
        if (userState && userStateService.isWaitingForInput(userId)) {
          logger.info(`Processing image upload from user ${userId}`);
          
          const { bot } = await import('../bot/bot');
          if (bot) {
            try {
              // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              const largestPhoto = photos[photos.length - 1];
              const fileInfo = await bot.api.getFile(largestPhoto.file_id);
              const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${fileInfo.file_path}`;
              
              if (!caption.trim()) {
                await bot.api.sendMessage(chatId, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
                res.status(200).json({ ok: true });
                return;
              }
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
              await bot.api.sendMessage(chatId, "üé® –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.");
              
              const generationService = new GenerationService();
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
              let service: 'freepik' | 'midjourney' | 'runway' | 'kling' | 'chatgpt';
              let type: 'image' | 'video' | 'text';
              
              switch (userState.action) {
                case 'freepik_photo':
                  service = 'freepik';
                  type = 'image';
                  break;
                case 'midjourney_photo':
                case 'midjourney':
                  service = 'midjourney';
                  type = 'image';
                  break;
                case 'freepik_video':
                  service = 'freepik';
                  type = 'video';
                  break;
                case 'kling_video':
                case 'kling':
                  service = 'kling';
                  type = 'video';
                  break;
                case 'runway_video':
                  service = 'runway';
                  type = 'video';
                  break;
                default:
                  await bot.api.sendMessage(chatId, "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞");
                  userStateService.clearState(userId);
                  res.status(200).json({ ok: true });
                  return;
              }
              
              // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
              await this.ensureUserExists(userId, req.body.message.from);
              
              // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
              const result = await generationService.generateContent({
                userId,
                service,
                type,
                prompt: caption,
                imageUrl
              });
              
              if (result.success) {
                if (type === 'image') {
                  await bot.api.sendPhoto(chatId, result.resultUrl!, {
                    caption: `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.tokensUsed}`
                  });
                } else if (type === 'video') {
                  await bot.api.sendVideo(chatId, result.resultUrl!, {
                    caption: `‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.tokensUsed}`
                  });
                }
              } else {
                await bot.api.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.error}`);
              }
              
              // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              userStateService.clearState(userId);
              
            } catch (error) {
              logger.error('Image processing error:', error);
              await bot.api.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
              userStateService.clearState(userId);
            }
          }
          
          res.status(200).json({ ok: true });
          return;
        }
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (req.body?.message?.text && !req.body.message.text.startsWith('/')) {
        const chatId = req.body.message.chat.id;
        const userId = req.body.message.from.id;
        const text = req.body.message.text;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞
        const userState = userStateService.getState(userId);
        
        if (userState && userStateService.isWaitingForInput(userId)) {
          logger.info(`Processing generation request from user ${userId}: ${text}`);
          
          const { bot } = await import('../bot/bot');
          if (bot) {
            try {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
              await bot.api.sendMessage(chatId, "üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.");
              
              const generationService = new GenerationService();
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
              let service: 'freepik' | 'midjourney' | 'runway' | 'kling' | 'chatgpt';
              let type: 'image' | 'video' | 'text';
              
              switch (userState.action) {
                case 'freepik_photo':
                  service = 'freepik';
                  type = 'image';
                  break;
                case 'midjourney_photo':
                case 'midjourney':
                  service = 'midjourney';
                  type = 'image';
                  break;
                case 'freepik_video':
                  service = 'freepik';
                  type = 'video';
                  break;
                case 'kling_video':
                case 'kling':
                  service = 'kling';
                  type = 'video';
                  break;
                case 'runway_video':
                  service = 'runway';
                  type = 'video';
                  break;
                case 'chatgpt':
                  service = 'chatgpt';
                  type = 'text';
                  break;
                default:
                  await bot.api.sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
                  userStateService.clearState(userId);
                  res.status(200).json({ ok: true });
                  return;
              }
              
              // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
              await this.ensureUserExists(userId, req.body.message.from);
              
              // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
              const result = await generationService.generateContent({
                userId,
                service,
                type,
                prompt: text
              });
              
              if (result.success) {
                if (type === 'text') {
                  // –î–ª—è ChatGPT –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                  await bot.api.sendMessage(chatId, `üí¨ **ChatGPT –æ—Ç–≤–µ—Ç:**\n\n${result.resultUrl}\n\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.tokensUsed}`);
                } else if (type === 'image') {
                  // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                  await bot.api.sendPhoto(chatId, result.resultUrl!, {
                    caption: `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.tokensUsed}`
                  });
                } else if (type === 'video') {
                  // –î–ª—è –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                  await bot.api.sendVideo(chatId, result.resultUrl!, {
                    caption: `‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ!\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.tokensUsed}`
                  });
                }
              } else {
                await bot.api.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.error}`);
              }
              
              // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              userStateService.clearState(userId);
              
            } catch (error) {
              logger.error('Generation error:', error);
              await bot.api.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
              userStateService.clearState(userId);
            }
          }
          
          res.status(200).json({ ok: true });
          return;
        }
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /start –Ω–∞–ø—Ä—è–º—É—é
      if (req.body?.message?.text === '/start') {
        logger.info('üî• Direct /start processing...');
        
        const chatId = req.body.message.chat.id;
        const userId = req.body.message.from.id;
        const username = req.body.message.from.username;
        
        logger.info(`Processing /start for user ${userId} (@${username})`);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await this.ensureUserExists(userId, req.body.message.from);
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        const { bot } = await import('../bot/bot');
        
        if (bot) {
          try {
            await bot.api.sendMessage(chatId, "ü§ñ **AICEX AI Bot** - –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", callback_data: "photo_generation" }],
                  [{ text: "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", callback_data: "video_generation" }],
                  [{ text: "üí¨ ChatGPT", callback_data: "chatgpt" }],
                  [{ text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å", web_app: { url: "https://aicexonefrontend-production.up.railway.app/home" } }]
                ]
              }
            });
            
            logger.info('‚úÖ Direct /start response sent successfully');
            res.status(200).json({ ok: true });
            return;
            
          } catch (sendError) {
            logger.error('Failed to send direct response:', sendError);
          }
        }
      }
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º grammY webhook callback
      const { bot } = await import('../bot/bot');
      
      if (!bot) {
        logger.error('Bot not initialized for webhook');
        res.status(500).json({ error: 'Bot not initialized' });
        return;
      }

      logger.info('Processing update with grammY...');
      const callback = webhookCallback(bot, 'express');
      await callback(req, res);
      logger.info('Webhook processed successfully');
      
    } catch (error) {
      logger.error('Error handling Telegram webhook:', error);
      logger.error('Error stack:', (error as Error).stack);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Lava.top
   */
  async handleLavaWebhook(req: Request, res: Response): Promise<void> {
    try {
      logger.info('Received Lava webhook', { 
        hasBody: !!req.body,
        hasSignature: !!req.headers['x-lava-signature'],
        hasApiKey: !!req.headers['x-api-key']
      });

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á webhook —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Lava.top
      const apiKey = req.headers['x-api-key'] as string;
      const expectedApiKey = process.env.LAVA_TOP_WEBHOOK_KEY;
      
      if (!expectedApiKey) {
        logger.error('üö® CRITICAL: LAVA_TOP_WEBHOOK_KEY not configured!');
      } else if (apiKey !== expectedApiKey) {
        logger.error('Invalid Lava webhook API key');
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }

      // 2. –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º HMAC –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏
      const signature = req.headers['x-lava-signature'] as string;
      const secretKey = process.env.LAVA_TOP_SECRET_KEY;
      
      if (secretKey && signature) {
        const isValid = this.verifyLavaSignature(req.body, signature);
        if (!isValid) {
          logger.error('üö® SECURITY: Invalid Lava webhook signature!');
          res.status(403).json({ error: 'Invalid signature' });
          return;
        }
        logger.info('‚úÖ Webhook signature verified');
      } else if (!secretKey) {
        logger.warn('‚ö†Ô∏è LAVA_TOP_SECRET_KEY not configured - signature verification disabled');
      }

      const webhookData = req.body;
      
      // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
      const success = await this.handleLavaTopWebhook(webhookData);

      if (success) {
        res.status(200).json({ status: 'ok' });
      } else {
        res.status(400).json({ error: 'Webhook processing failed' });
      }

    } catch (error) {
      logger.error('Lava webhook error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Freepik
   */
  async handleFreepikWebhook(req: Request, res: Response): Promise<void> {
    try {
      console.log('==================== FREEPIK WEBHOOK RECEIVED ====================');
      console.log('Headers:', req.headers);
      console.log('Body:', JSON.stringify(req.body, null, 2));
      console.log('===============================================================');
      
      logger.info('üî• Received Freepik webhook', { body: req.body });

      const { task_id, status, result, generated } = req.body;
      
      console.log('==================== FREEPIK WEBHOOK PARSED ====================');
      console.log('Task ID:', task_id);
      console.log('Status:', status);
      console.log('Generated:', JSON.stringify(generated, null, 2));
      console.log('Result:', JSON.stringify(result, null, 2));
      console.log('===============================================================');

      if (!task_id) {
        logger.error('Missing task_id in Freepik webhook');
        res.status(400).json({ error: 'Missing task_id' });
        return;
      }

      console.log('üîç Searching for Freepik task in DB:', task_id);

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ë–î
      const task = await prisma.freepikTask.findFirst({
        where: { taskId: task_id },
        include: { user: true }
      });

      console.log('üîç Freepik task search result:', {
        found: !!task,
        taskId: task?.id,
        userId: task?.userId,
        userTelegramId: task?.user?.telegramId,
        taskType: task?.type,
        taskModel: task?.model
      });

      if (!task) {
        console.error('‚ùå Freepik task not found in DB!', { taskId: task_id });
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const allTasks = await prisma.freepikTask.findMany({
          take: 5,
          orderBy: { createdAt: 'desc' }
        });
        console.log('üìã Last 5 Freepik tasks in DB:', allTasks.map(t => ({
          id: t.id,
          taskId: t.taskId,
          userId: t.userId,
          type: t.type
        })));
        
        logger.error('Freepik task not found', { taskId: task_id });
        res.status(404).json({ error: 'Task not found' });
        return;
      }
      
      console.log('‚úÖ Freepik task found in DB');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      const updateData: any = {
        status: this.mapFreepikStatus(status),
        response: JSON.stringify(req.body),
        updatedAt: new Date()
      };

      // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
      if (status === 'COMPLETED' || status === 'completed') {
        console.log('==================== FREEPIK WEBHOOK COMPLETED ====================');
        console.log('Generated array:', generated);
        console.log('Result:', result);
        console.log('===============================================================');
        
        // Freepik –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ generated, –∞ –Ω–µ result.images/videos
        if (generated && generated.length > 0) {
          updateData.imageUrl = generated[0]; // –ú–æ–∂–µ—Ç –±—ã—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ
          console.log('üî• Setting media URL from generated:', generated[0]);
        } else if (result?.images && result.images.length > 0) {
          updateData.imageUrl = result.images[0].url;
          console.log('üî• Setting image URL from result.images:', result.images[0].url);
        } else if (result?.videos && result.videos.length > 0) {
          updateData.imageUrl = result.videos[0].url;
          console.log('üî• Setting video URL from result.videos:', result.videos[0].url);
        } else {
          console.log('‚ö†Ô∏è No media found in completed webhook');
        }
      } else if (status === 'FAILED' || status === 'failed') {
        updateData.error = result?.error || 'Generation failed';
        console.log('‚ùå Freepik generation failed:', updateData.error);
      }

      await prisma.freepikTask.update({
        where: { id: task.id },
        data: updateData
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      if (status === 'completed' && updateData.imageUrl) {
        console.log('üíæ Saving to GenerationHistory:', {
          userId: task.userId,
          service: 'freepik',
          type: task.type || 'image',
          prompt: task.prompt,
          resultUrl: updateData.imageUrl
        });
        
        await prisma.generationHistory.create({
          data: {
            userId: task.userId, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π userId
            service: 'freepik',
            type: task.type || 'image',
            prompt: task.prompt,
            resultUrl: updateData.imageUrl,
            tokensUsed: task.cost || 0,
            status: 'completed'
          }
        });
        
        logger.info('‚úÖ Generation saved to history', {
          userId: task.userId,
          taskId: task_id
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      await this.notifyUserAboutTaskCompletion(task, status, updateData.imageUrl);

      logger.info('Freepik webhook processed successfully', {
        taskId: task_id,
        status,
        userId: task.userId
      });

      res.status(200).json({ status: 'ok' });

    } catch (error) {
      logger.error('Freepik webhook error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Midjourney
   */
  async handleMidjourneyWebhook(req: Request, res: Response): Promise<void> {
    try {
      console.log('==================== MIDJOURNEY WEBHOOK RECEIVED ====================');
      console.log('Headers:', JSON.stringify(req.headers, null, 2));
      console.log('Body:', JSON.stringify(req.body, null, 2));
      console.log('===============================================================');
      
      logger.info('Received Midjourney webhook', { body: req.body });

      const { request_id, task_id, status, result } = req.body;
      
      console.log('üîç Extracted webhook data:', {
        request_id,
        task_id,
        status,
        hasResult: !!result,
        resultType: Array.isArray(result) ? 'array' : typeof result,
        resultLength: Array.isArray(result) ? result.length : 'N/A'
      });

      // GenAPI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç request_id, –∞ –Ω–µ task_id
      const actualTaskId = task_id || request_id;
      
      if (!actualTaskId) {
        console.log('‚ùå Missing task_id and request_id in Midjourney webhook');
        logger.error('Missing task_id and request_id in Midjourney webhook');
        res.status(400).json({ error: 'Missing task_id' });
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ë–î
      console.log('üîç Looking for Midjourney task in database:', { taskId: actualTaskId });
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ
      const allTasks = await prisma.midjourneyTask.findMany({
        where: { userId: "669231710" }, // –ò—â–µ–º –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (userId - string)
        select: { id: true, taskId: true, status: true, createdAt: true }
      });
      console.log('üìã All Midjourney tasks for user 669231710:', allTasks);
      
      const task = await prisma.midjourneyTask.findFirst({
        where: { taskId: actualTaskId },
        include: { user: true }
      });

      if (!task) {
        console.log('‚ùå Midjourney task not found in database');
        logger.error('Midjourney task not found', { taskId: actualTaskId });
        res.status(404).json({ error: 'Task not found' });
        return;
      }

      console.log('‚úÖ Found Midjourney task:', {
        id: task.id,
        userId: task.userId,
        telegramId: task.telegramId,
        status: task.status,
        hasUser: !!task.user
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      const updateData: any = {
        status: this.mapMidjourneyStatus(status),
        updatedAt: new Date()
      };

      if ((status === 'completed' || status === 'success') && result) {
        // GenAPI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–æ–ª–µ result
        if (Array.isArray(result) && result.length > 0) {
          updateData.imageUrl = result[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          console.log('‚úÖ Midjourney completed with images:', { 
            count: result.length, 
            firstImage: result[0].substring(0, 50) + '...' 
          });
        } else if (result.image_url) {
          // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
          updateData.imageUrl = result.image_url;
          console.log('‚úÖ Midjourney completed with image URL:', result.image_url.substring(0, 50) + '...');
        }
      } else if (status === 'failed') {
        updateData.error = result?.error || 'Generation failed';
        console.log('‚ùå Midjourney failed:', result?.error);
      } else {
        console.log('‚ö†Ô∏è Midjourney status not completed or no result:', { status, hasResult: !!result });
      }

      await prisma.midjourneyTask.update({
        where: { id: task.id },
        data: updateData
      });

      console.log('üíæ Updated Midjourney task in database:', {
        taskId: task.id,
        updateData: updateData
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      if ((status === 'completed' || status === 'success') && updateData.imageUrl) {
        console.log('üíæ Saving Midjourney to GenerationHistory:', {
          userId: task.userId,
          service: 'midjourney',
          prompt: task.prompt,
          resultUrl: updateData.imageUrl
        });
        
        await prisma.generationHistory.create({
          data: {
            userId: task.userId, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π userId
            service: 'midjourney',
            type: 'image',
            prompt: task.prompt,
            resultUrl: updateData.imageUrl,
            tokensUsed: task.cost || 0,
            status: 'completed'
          }
        });
        
        logger.info('‚úÖ Midjourney generation saved to history', {
          userId: task.userId,
          taskId: actualTaskId
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log('üì§ About to notify user about task completion:', {
        taskId: task.taskId,
        status: status,
        hasImageUrl: !!updateData.imageUrl,
        userId: task.userId,
        telegramId: task.telegramId
      });
      
      await this.notifyUserAboutTaskCompletion(task, status, updateData.imageUrl);

      logger.info('Midjourney webhook processed successfully', {
        taskId: actualTaskId,
        status,
        userId: task.userId
      });

      res.status(200).json({ status: 'ok' });

    } catch (error) {
      logger.error('Midjourney webhook error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Runway
   */
  async handleRunwayWebhook(req: Request, res: Response): Promise<void> {
    try {
      console.log('==================== RUNWAY WEBHOOK RECEIVED ====================');
      console.log('Headers:', req.headers);
      console.log('Body:', JSON.stringify(req.body, null, 2));
      console.log('===============================================================');
      
      logger.info('üé¨ Received Runway webhook', { body: req.body });

      // Runway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'id' –≤–º–µ—Å—Ç–æ 'task_id' –∏ 'status' –≤–º–µ—Å—Ç–æ 'result'
      const { id: task_id, status, output, result } = req.body;

      if (!task_id) {
        logger.error('Missing id in Runway webhook');
        res.status(400).json({ error: 'Missing id' });
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ë–î
      const task = await prisma.runwayTask.findFirst({
        where: { taskId: task_id },
        include: { user: true }
      });

      if (!task) {
        logger.error('Runway task not found', { taskId: task_id });
        res.status(404).json({ error: 'Task not found' });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      const updateData: any = {
        status: this.mapRunwayStatus(status),
        response: JSON.stringify(req.body),
        updatedAt: new Date()
      };

      // Runway –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'Succeeded' —Å—Ç–∞—Ç—É—Å –∏ 'output' —Å –º–∞—Å—Å–∏–≤–æ–º –≤–∏–¥–µ–æ URL
      if (status === 'Succeeded' && output && output.length > 0) {
        updateData.videoUrl = output[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
      } else if (status === 'Failed' || status === 'failed') {
        updateData.error = result?.error || 'Generation failed';
      }

      await prisma.runwayTask.update({
        where: { id: task.id },
        data: updateData
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      if (status === 'Succeeded' && updateData.videoUrl) {
        console.log('üíæ Saving Runway to GenerationHistory:', {
          userId: task.userId,
          service: 'runway',
          prompt: task.prompt,
          resultUrl: updateData.videoUrl
        });
        
        await prisma.generationHistory.create({
          data: {
            userId: task.userId, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π userId
            service: 'runway',
            type: 'video',
            prompt: task.prompt,
            resultUrl: updateData.videoUrl,
            tokensUsed: task.cost || 0,
            status: 'completed'
          }
        });
        
        logger.info('‚úÖ Runway generation saved to history', {
          userId: task.userId,
          taskId: task_id
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.notifyUserAboutTaskCompletion(task, status, updateData.videoUrl);

      logger.info('Runway webhook processed successfully', {
        taskId: task_id,
        status,
        userId: task.userId
      });

      res.status(200).json({ status: 'ok' });

    } catch (error) {
      logger.error('Runway webhook error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Lava.top —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  private async handleLavaTopWebhook(webhookData: any): Promise<boolean> {
    try {
      logger.info('üîç LAVA TOP WEBHOOK: Processing', {
        type: webhookData.type,
        id: webhookData.id,
        status: webhookData.status,
        amount: webhookData.amountTotal?.amount
      });

      switch (webhookData.type) {
        case 'payment.success':
          logger.info('‚úÖ Lava.top payment successful', {
            invoiceId: webhookData.id,
            amount: webhookData.amountTotal?.amount,
          });

          // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ ID –∏–Ω–≤–æ–π—Å–∞ –æ—Ç Lava
          const payment = await prisma.payment.findFirst({
            where: { providerId: webhookData.id },
          });

          if (!payment) {
            logger.error(`Payment with lavaInvoiceId ${webhookData.id} not found`);
            return false;
          }

          if (payment.status === 'COMPLETED') {
            logger.warn(`Payment ${payment.id} is already completed.`);
            return true; // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
          }

          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await prisma.user.findUnique({ where: { id: payment.userId } });
          if (!user) {
            logger.error(`User with id ${payment.userId} not found for payment ${payment.id}`);
            return false;
          }

          // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
          const metadata = payment.metadata as any;
          const planId = metadata?.planId;
          if (!planId) {
            logger.error(`planId not found in payment metadata for payment ${payment.id}`);
            return false;
          }

          const subscriptionPlan = await prisma.subscriptionPlan.findUnique({
            where: { id: planId },
          });

          if (!subscriptionPlan) {
            logger.error(`SubscriptionPlan with id ${planId} not found`);
            return false;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
          const updatedUser = await prisma.user.update({
            where: { id: user.id },
            data: {
              subscription: subscriptionPlan.name as any,
              tokens: { increment: subscriptionPlan.tokens },
              subscriptionExpiresAt: new Date(new Date().setMonth(new Date().getMonth() + 1)), // +1 –º–µ—Å—è—Ü
            },
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
          await prisma.payment.update({
            where: { id: payment.id },
            data: { status: 'COMPLETED' },
          });

          logger.info(`‚úÖ User ${user.id} subscribed to ${subscriptionPlan.name}, tokens added: ${subscriptionPlan.tokens}`);
          break;

        // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –±—ã–ª–∏)
        default:
          logger.warn('Unknown Lava.top webhook event type', { type: webhookData.type });
      }

      return true; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

    } catch (error) {
      logger.error('Error processing Lava.top webhook:', error);
      return false;
    }
  }


  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook –æ—Ç Lava
   */
  private verifyLavaSignature(body: any, signature: string): boolean {
    try {
      const secretKey = process.env.LAVA_TOP_SECRET_KEY;
      if (!secretKey) {
        logger.error('Lava secret key not configured');
        return false;
      }

      const expectedSignature = crypto
        .createHmac('sha256', secretKey)
        .update(JSON.stringify(body))
        .digest('hex');

      return signature === expectedSignature;

    } catch (error) {
      logger.error('Error verifying Lava signature:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å Freepik –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
   */
  private mapFreepikStatus(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': 'CREATED',
      'processing': 'PROCESSING',
      'completed': 'COMPLETED',
      'failed': 'FAILED',
      'cancelled': 'FAILED'
    };

    return statusMap[status] || 'CREATED';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å Midjourney –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
   */
  private mapMidjourneyStatus(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': 'pending',
      'processing': 'processing',
      'completed': 'completed',
      'success': 'completed', // ‚úÖ GenAPI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 'success' –≤–º–µ—Å—Ç–æ 'completed'
      'failed': 'failed',
      'cancelled': 'failed'
    };

    const mappedStatus = statusMap[status] || 'pending';
    console.log('üîÑ Mapping Midjourney status:', { original: status, mapped: mappedStatus });
    return mappedStatus;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å Runway –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
   */
  private mapRunwayStatus(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': 'CREATED',
      'processing': 'PROCESSING',
      'Succeeded': 'COMPLETED',  // ‚úÖ Runway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'Succeeded'
      'Failed': 'FAILED',        // ‚úÖ Runway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'Failed'
      'failed': 'FAILED',
      'cancelled': 'FAILED'
    };

    return statusMap[status] || 'CREATED';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
   */
  private async notifyUserAboutTaskCompletion(
    task: any, 
    status: string, 
    mediaUrl?: string
  ): Promise<void> {
    try {
      console.log('üì§ Notifying user about task completion:', {
        userId: task.userId,
        taskId: task.taskId,
        status,
        mediaUrl,
        taskType: task.type
      });

      const isCompleted = status === 'completed' || status === 'COMPLETED' || status === 'Succeeded' || status === 'success';
      
      if (!isCompleted || !mediaUrl) {
        console.log('‚ö†Ô∏è Task not completed or no media URL, skipping notification', {
          status,
          isCompleted,
          mediaUrl: mediaUrl?.substring(0, 50)
        });
        return;
      }
      
      console.log('‚úÖ Task completed with media URL, proceeding with notification');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è telegramId
      const user = await prisma.user.findUnique({ 
        where: { id: task.userId } 
      });

      if (!user || !user.telegramId) {
        console.log('‚ùå User not found or no telegramId');
        return;
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
      const { bot } = await import('../bot/production-bot');
      
      console.log(`üì§ Sending ${task.type || 'image'} to user ${user.telegramId}`);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const duration = task.createdAt ? Math.floor((Date.now() - new Date(task.createdAt).getTime()) / 1000) : 0;
      const timeStr = duration > 0 ? `\n‚è±Ô∏è –í—Ä–µ–º—è: ${Math.floor(duration / 60)} –º–∏–Ω ${duration % 60} —Å–µ–∫` : '';

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let serviceName = task.model || 'AI';
      if (task.type === 'video') {
        serviceName = task.model?.includes('runway') ? 'Runway ML' : task.model || 'Freepik Video';
      } else {
        serviceName = task.model?.includes('midjourney') ? `Midjourney ${task.model}` : task.model || 'Freepik';
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      console.log('üì§ Sending media to user:', {
        type: task.type || 'image',
        mediaUrl: mediaUrl?.substring(0, 50) + '...',
        telegramId: user.telegramId,
        serviceName: serviceName
      });

      if (task.type === 'video') {
        await bot.api.sendVideo(user.telegramId, mediaUrl, {
          caption: `‚ú® <b>–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\nüìù "${task.prompt}"\nüé¨ ${serviceName}\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${task.cost || 0} —Ç–æ–∫–µ–Ω–æ–≤${timeStr}`,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîÑ –ï—â–µ –æ–¥–Ω–æ', callback_data: 'generate_video' },
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'back_to_main' }]
            ]
          }
        });
        console.log('‚úÖ Video sent to user successfully');
      } else {
        await bot.api.sendPhoto(user.telegramId, mediaUrl, {
          caption: `‚ú® <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>\n\nüìù "${task.prompt}"\nüñºÔ∏è ${serviceName}\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${task.cost || 0} —Ç–æ–∫–µ–Ω–æ–≤${timeStr}`,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîÑ –ï—â–µ –æ–¥–Ω–æ', callback_data: 'generate_image' },
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'back_to_main' }]
            ]
          }
        });
        console.log('‚úÖ Image sent to user successfully:', {
          telegramId: user.telegramId,
          imageUrl: mediaUrl?.substring(0, 50) + '...'
        });
      }

    } catch (error) {
      console.error('‚ùå Failed to notify user about task completion:', error);
      logger.error('Failed to notify user about task completion:', error);
    }
  }

  /**
   * Health check –¥–ª—è webhook endpoints
   */
  async healthCheck(req: Request, res: Response): Promise<void> {
    res.status(200).json({
      status: 'ok',
      timestamp: new Date().toISOString(),
      endpoints: {
        lava: '/api/webhooks/lava',
        freepik: '/api/webhooks/freepik',
        midjourney: '/api/webhooks/midjourney',
        runway: '/api/webhooks/runway'
      }
    });
  }
}

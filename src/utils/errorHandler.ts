/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å undefined, Not found –∏ –¥—Ä—É–≥–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
 */

import { logger } from './logger';

export interface ErrorResponse {
  success: false;
  error: string;
  code?: string;
  details?: any;
}

export interface SuccessResponse<T = any> {
  success: true;
  data: T;
}

export type APIResponse<T = any> = SuccessResponse<T> | ErrorResponse;

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
 */
export class ErrorHandler {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Freepik API
   */
  static handleFreepikError(error: any): ErrorResponse {
    logger.error('Freepik API Error:', error);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined response
    if (!error.response) {
      return {
        success: false,
        error: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞',
        code: 'NETWORK_ERROR'
      };
    }

    const status = error.response?.status;
    const data = error.response?.data;

    switch (status) {
      case 401:
        return {
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Freepik',
          code: 'UNAUTHORIZED'
        };
      
      case 404:
        return {
          success: false,
          error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
          code: 'NOT_FOUND'
        };
      
      case 429:
        return {
          success: false,
          error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
          code: 'RATE_LIMIT'
        };
      
      case 402:
        return {
          success: false,
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ',
          code: 'INSUFFICIENT_CREDITS'
        };
      
      case 400:
        const message = data?.message || data?.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞';
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${message}`,
          code: 'VALIDATION_ERROR',
          details: data
        };
      
      default:
        return {
          success: false,
          error: data?.message || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Freepik API',
          code: 'UNKNOWN_ERROR',
          details: { status, data }
        };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Runway API
   */
  static handleRunwayError(error: any): ErrorResponse {
    logger.error('Runway API Error:', error);

    if (!error.response) {
      return {
        success: false,
        error: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Runway',
        code: 'NETWORK_ERROR'
      };
    }

    const status = error.response?.status;
    const data = error.response?.data;

    switch (status) {
      case 401:
        return {
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Runway ML',
          code: 'UNAUTHORIZED'
        };
      
      case 404:
        return {
          success: false,
          error: 'Runway endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
          code: 'NOT_FOUND'
        };
      
      case 429:
        return {
          success: false,
          error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Runway API',
          code: 'RATE_LIMIT'
        };
      
      case 402:
        return {
          success: false,
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ Runway',
          code: 'INSUFFICIENT_CREDITS'
        };
      
      case 503:
        return {
          success: false,
          error: '–°–µ—Ä–≤–∏—Å Runway –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          code: 'SERVICE_UNAVAILABLE'
        };
      
      default:
        return {
          success: false,
          error: data?.message || error.message || '–û—à–∏–±–∫–∞ Runway API',
          code: 'UNKNOWN_ERROR',
          details: { status, data }
        };
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
   */
  static safeExtract<T>(obj: any, path: string, defaultValue: T): T {
    try {
      const keys = path.split('.');
      let current = obj;
      
      for (const key of keys) {
        if (current === null || current === undefined) {
          return defaultValue;
        }
        current = current[key];
      }
      
      return current !== undefined ? current : defaultValue;
    } catch {
      return defaultValue;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
   */
  static isValidUrl(url: string): boolean {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ —Å—Ç—Ä–æ–∫–∏
   */
  static safeTruncate(str: string | undefined, maxLength: number): string {
    if (!str || typeof str !== 'string') {
      return '';
    }
    return str.length > maxLength ? str.substring(0, maxLength) + '...' : str;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static formatUserError(error: ErrorResponse): string {
    const errorMessages: { [key: string]: string } = {
      'UNAUTHORIZED': 'üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π API',
      'NOT_FOUND': 'üîç –°–µ—Ä–≤–∏—Å –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
      'RATE_LIMIT': '‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
      'INSUFFICIENT_CREDITS': 'üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤',
      'NETWORK_ERROR': 'üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é',
      'VALIDATION_ERROR': '‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö',
      'SERVICE_UNAVAILABLE': 'üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    };

    const icon = errorMessages[error.code || ''] || '‚ùå';
    return `${icon} ${error.error}`;
  }
}

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
export function safeAsync<T extends any[], R>(
  fn: (...args: T) => Promise<R>
): (...args: T) => Promise<APIResponse<R>> {
  return async (...args: T): Promise<APIResponse<R>> => {
    try {
      const result = await fn(...args);
      return { success: true, data: result };
    } catch (error: any) {
      logger.error('Safe async error:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        code: 'ASYNC_ERROR'
      };
    }
  };
}

/**
 * Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function retryAsync<T>(
  fn: () => Promise<T>,
  maxRetries: number = 3,
  delay: number = 1000
): Promise<T> {
  let lastError: any;
  
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error) {
      lastError = error;
      logger.warn(`Retry attempt ${i + 1}/${maxRetries} failed:`, error);
      
      if (i < maxRetries - 1) {
        await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));
      }
    }
  }
  
  throw lastError;
}

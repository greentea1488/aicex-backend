// –°–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ñ–∞–π–ª –≤–æ–æ–±—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
console.log("=".repeat(80));
console.log("üî• INDEX.TS LOADING... üî•");
console.log("=".repeat(80));

import { config } from "dotenv";
config(); // Load environment variables first

console.log("‚úÖ dotenv loaded");

import fs from "node:fs";
import path from "node:path";

console.log("‚úÖ node modules loaded");

import cors from "cors";

console.log("‚úÖ cors loaded");

import type { NextFunction, Request, Response } from "express";
import express from "express";

console.log("‚úÖ express loaded");

import pino from "pino";
import pinoHttp from "pino-http";

console.log("‚úÖ pino loaded");
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
import authRoutes from "./routes/auth";
console.log("‚úÖ authRoutes loaded");
import chatRoutes from "./routes/chat";
console.log("‚úÖ chatRoutes loaded");
import userRoutes from "./routes/user";
console.log("‚úÖ userRoutes loaded");
import paymentRoutes from "./routes/payment";
console.log("‚úÖ paymentRoutes loaded");
import apiRoutes from "./routes/api";
console.log("‚úÖ apiRoutes loaded");
import adminRoutes from "./routes/admin";
console.log("‚úÖ adminRoutes loaded");
import webhookRoutes from "./routes/webhooks";
console.log("‚úÖ webhookRoutes loaded");
import freepikRoutes from "./routes/freepik";
console.log("‚úÖ freepikRoutes loaded");
import { logger } from "./utils/logger";
console.log("‚úÖ logger loaded");
import { prisma } from "./utils/prismaClient";
console.log("‚úÖ prisma loaded");
import { startBot } from "./bot/production-bot";
console.log("‚úÖ startBot loaded");
import { 
  globalLimiter, 
  authLimiter, 
  paymentLimiter, 
  aiGenerationLimiter,
  webhookLimiter 
} from "./middlewares/rateLimiter";
console.log("‚úÖ rate limiters loaded");

console.log("=".repeat(80));
console.log("üéâ ALL IMPORTS SUCCESSFUL! CREATING EXPRESS APP... üéâ");
console.log("=".repeat(80));

const app = express();
const PORT = parseInt(process.env.PORT || "8080", 10);

console.log(`‚úÖ Express app created, PORT: ${PORT}`);

app.use(express.json());
app.use(express.text());
app.use(express.urlencoded({ extended: true }));
app.use(cors({
  origin: [
    'https://aicexonefrontend-production.up.railway.app',
    'http://localhost:5173', // –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    process.env.FRONTEND_URL
  ].filter((url): url is string => Boolean(url)),
  credentials: true
}));

const httpLogger = pinoHttp({
  logger,
  // Custom serializers for reduced verbosity
  serializers: {
    req: req => ({
      method: req.method,
      url: req.url,
      query: req.query,
      params: req.params,
      id: req.id,
    }),
    res: res => ({
      statusCode: res.statusCode,
    }),
    err: pino.stdSerializers.err,
  },

  // Custom log levels
  customLogLevel: (req, res, err) => {
    if (err || res.statusCode >= 500) return "error";
    if (res.statusCode >= 400) return "warn";
    return "info";
  },

  // Custom success message
  customSuccessMessage: (req, res) => {
    return `Request completed: ${req.method} ${req.url} [${res.statusCode}]`;
  },

  // Custom error message
  customErrorMessage: (req, res, err) => {
    return `Request failed: ${req.method} ${req.url} [${res.statusCode}] - ${err.message}`;
  },

  // Custom additional properties
  customProps: (req, res) => ({
    userAgent: req.headers["user-agent"],
  }),
});
app.use(httpLogger);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å rate limiting
try {
  // Auth routes - —Å—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç
  app.use("/api/auth", authLimiter.middleware(), authRoutes);
  
  // Chat –∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - —Å—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç
  app.use("/api/chat", aiGenerationLimiter.middleware(), chatRoutes);
  app.use("/api/freepik", aiGenerationLimiter.middleware(), freepikRoutes);
  
  // Payment routes - —Å—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç
  app.use("/api/payment", paymentLimiter.middleware(), paymentRoutes);
  app.use("/api/payments", paymentLimiter.middleware(), paymentRoutes);
  
  // Webhooks - –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç (–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)
  app.use("/api/webhooks", webhookLimiter.middleware(), webhookRoutes);
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ routes - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç
  app.use("/api/user", globalLimiter.middleware(), userRoutes);
  app.use("/api", globalLimiter.middleware(), apiRoutes);
  app.use("/api/admin", globalLimiter.middleware(), adminRoutes);
  
  logger.info("‚úÖ All routes loaded with rate limiting");
} catch (error) {
  throw error;
}

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API
app.get("/", (req: Request, res: Response) => {
  res.json({
    name: "AICEX AI Bot API",
    version: "1.0.0",
    status: "running",
    timestamp: new Date().toISOString(),
    endpoints: {
      health: "/ok",
      auth: "/api/auth/*",
      chat: "/api/chat/*", 
      user: "/api/user/*",
      ai_services: "/api/freepik/*",
      payments: "/api/payment/*",
      admin: "/api/admin/*",
      webhooks: "/api/webhooks/*"
    },
    documentation: "https://github.com/greentea1488/AICEX_ai_bot",
    telegram_bot: process.env.BOT_TOKEN ? "configured" : "not_configured",
    database: process.env.DATABASE_URL ? "configured" : "not_configured"
  });
});

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π healthcheck endpoint - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
app.get("/ok", (req: Request, res: Response) => {
  res.status(200).json({
    status: "ok", 
    timestamp: new Date().toISOString(),
    server: "running"
  });
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π healthcheck —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ë–î
app.get("/health", async (req: Request, res: Response) => {
  try {
    const response: any = {
      status: "ok", 
      timestamp: new Date().toISOString(),
      server: "running",
      port: PORT
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    if (process.env.DATABASE_URL) {
      try {
        // –°–æ–∑–¥–∞–µ–º Promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫—É–Ω–¥
        const dbCheck = Promise.race([
          prisma.$connect(),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Database connection timeout')), 5000)
          )
        ]);
        
        await dbCheck;
        response.database = "connected";
      } catch (dbError) {
        logger.warn("Database check failed in healthcheck:", dbError);
        response.database = "disconnected";
        response.database_error = dbError instanceof Error ? dbError.message : "Unknown database error";
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 500, –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      }
    } else {
      response.database = "not_configured";
    }

    res.status(200).json(response);
  } catch (error) {
    logger.error("Health check failed:", error);
    res.status(500).json({ 
      status: "error", 
      timestamp: new Date().toISOString(),
      server: "error",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});

// Global error handler - MUST be after all routes
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  req.log.error(err, 'Unhandled error in request');
  
  // –ï—Å–ª–∏ headers —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ–¥–∞—ë–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
  if (res.headersSent) {
    return next(err);
  }
  
  res.status(500).json({
    success: false,
    error: 'Internal server error',
    message: err.message,
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});


// Global error handlers
function setupGlobalErrorHandlers(): void {
  // Handle unhandled promise rejections
  process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
    logger.error('Unhandled Promise Rejection', {
      reason: reason instanceof Error ? reason.message : String(reason),
      stack: reason instanceof Error ? reason.stack : undefined,
      promise: promise.toString()
    });
    // Don't exit process in production, but log it
  });

  // Handle uncaught exceptions
  process.on('uncaughtException', (error: Error) => {
    logger.fatal('Uncaught Exception - shutting down', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    // Give time for logs to flush
    setTimeout(() => {
      process.exit(1);
    }, 1000);
  });

  // Graceful shutdown
  const gracefulShutdown = async (signal: string) => {
    logger.info(`${signal} received, starting graceful shutdown...`);
    
    try {
      // Close database connection
      await prisma.$disconnect();
      logger.info('Database connection closed');
      
      // Exit process
      process.exit(0);
    } catch (error) {
      logger.error('Error during graceful shutdown:', error);
      process.exit(1);
    }
  };

  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
  process.on('SIGINT', () => gracefulShutdown('SIGINT'));
}

// –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
logger.info("=".repeat(60));
logger.info("üöÄ STARTING SERVER...");
logger.info(`üìç Port: ${PORT}`);
logger.info(`üåç Host: 0.0.0.0`);
logger.info(`üîß NODE_ENV: ${process.env.NODE_ENV || 'not set'}`);
logger.info(`üíæ DATABASE_URL: ${process.env.DATABASE_URL ? 'configured' : 'NOT SET'}`);
logger.info(`ü§ñ BOT_TOKEN: ${process.env.BOT_TOKEN ? 'configured' : 'NOT SET'}`);
logger.info("=".repeat(60));

app.listen(PORT, "0.0.0.0", () => {
  logger.info("=".repeat(60));
  logger.info("‚úÖ SERVER SUCCESSFULLY STARTED!");
  logger.info(`üìç Listening on: http://0.0.0.0:${PORT}`);
  logger.info(`üè• Healthcheck: http://0.0.0.0:${PORT}/ok`);
  logger.info(`üîç Health details: http://0.0.0.0:${PORT}/health`);
  logger.info("=".repeat(60));
  
  // Setup global error handlers
  setupGlobalErrorHandlers();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è —Å–µ—Ä–≤–µ—Ä
  (async () => {
    if (process.env.DATABASE_URL) {
      try {
        logger.info("üîÑ Connecting to database...");
        await prisma.$connect();
        logger.info("‚úÖ Database connected successfully");
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
          logger.info("üîÑ Initializing database schema...");
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã (—Å–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏)
          await prisma.$runCommandRaw({
            createIndexes: "User",
            indexes: [
              {
                key: { telegramId: 1 },
                name: "telegramId_unique",
                unique: true
              }
            ]
          });
          
          await prisma.$runCommandRaw({
            createIndexes: "Task",
            indexes: [
              {
                key: { taskId: 1 },
                name: "taskId_unique", 
                unique: true
              }
            ]
          });
          
          logger.info("‚úÖ Database indexes created");
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
          const userCount = await prisma.user.count();
          logger.info(`üìä Users in database: ${userCount}`);
          
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
          if (userCount === 0) {
            await prisma.user.create({
              data: {
                telegramId: 123456789,
                username: "test_user",
                firstName: "Test",
                lastName: "User",
                tokens: 10
              }
            });
            logger.info("‚úÖ Test user created successfully");
          }
          
        } catch (initError: any) {
          logger.warn("Database initialization warning:", initError.message);
          
          // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é (—ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é)
          try {
            const userCount = await prisma.user.count();
            if (userCount === 0) {
              await prisma.user.create({
                data: {
                  telegramId: 123456789,
                  username: "test_user", 
                  firstName: "Test",
                  lastName: "User",
                  tokens: 10
                }
              });
              logger.info("‚úÖ Database initialized with test user");
            }
          } catch (createError) {
            logger.error("Failed to initialize database:", createError);
          }
        }
        
      } catch (dbError: any) {
        logger.error("Database connection failed:", dbError.message);
        logger.warn("‚ö†Ô∏è Server continues without database");
      }
    } else {
      logger.warn("‚ö†Ô∏è DATABASE_URL not provided, database functionality will be limited");
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è —Å–µ—Ä–≤–µ—Ä
    if (process.env.BOT_TOKEN) {
      logger.info("ü§ñ Starting Telegram bot...");
      logger.info(`üîë BOT_TOKEN available: ${process.env.BOT_TOKEN ? 'YES' : 'NO'}`);
      
      startBot()
        .then(() => {
          logger.info("‚úÖ Telegram bot started successfully!");
        })
        .catch(error => {
          logger.error("‚ùå Failed to start bot, but server continues:");
          logger.error("Bot error details:", error);
          logger.error("Bot error stack:", error.stack);
        });
    } else {
      logger.warn("‚ö†Ô∏è BOT_TOKEN not provided, bot will not start");
    }
  })().catch(error => {
    logger.error("‚ùå Initialization error (server continues):", error);
  });
}).on('error', (error) => {
  logger.fatal("‚ùå‚ùå‚ùå FAILED TO START SERVER ‚ùå‚ùå‚ùå");
  logger.fatal("Error:", error);
  logger.fatal("Stack:", error.stack);
  process.exit(1);
});

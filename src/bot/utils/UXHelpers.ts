import { Context } from "grammy";
import { prisma } from "../../utils/prismaClient";
import { logger } from "../../utils/logger";

// üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–µ UX —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞

export interface UserState {
  currentPath: string[];
  currentAction: string | null;
  data?: any;
  timestamp: number;
  retryCount?: number;
}

export interface ProgressData {
  stage: string;
  progress: number;
  estimatedTime: number;
  message?: string;
}

export interface SmartError {
  type: string;
  message: string;
  suggestion: string;
  retryable: boolean;
  fallbackAction?: string;
}

export class UXHelpers {
  private static userStates = new Map<number, UserState>();
  private static readonly STATE_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
  private static readonly PROGRESS_UPDATE_INTERVAL = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

  /**
   * üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å —Ö–ª–µ–±–Ω—ã–º–∏ –∫—Ä–æ—à–∫–∞–º–∏
   */
  static getBreadcrumb(currentPath: string[]): string {
    if (currentPath.length === 0) return "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é";
    
    const icons = {
      'main': 'üè†',
      'image': 'üé®',
      'video': 'üé¨',
      'chat': 'üí¨',
      'profile': 'üë§',
      'settings': '‚öôÔ∏è',
      'freepik': 'üé®',
      'midjourney': 'üñºÔ∏è',
      'runway': 'üöÄ',
      'kling': '‚ö°',
      'chatgpt': 'üß†'
    };

    const breadcrumb = currentPath.map(segment => 
      icons[segment as keyof typeof icons] || segment
    ).join(' ‚Üí ');

    return `üìç ${breadcrumb}`;
  }

  /**
   * üìä –ü—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
   */
  static generateProgressBar(progress: number): string {
    const filled = Math.floor(progress / 10);
    const empty = 10 - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  /**
   * ‚è±Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
   */
  static formatTime(seconds: number): string {
    if (seconds < 60) return `${seconds}—Å`;
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}–º ${remainingSeconds}—Å`;
  }

  /**
   * üéØ –£–º–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   */
  static getSmartMainMenu(userId?: number) {
    return {
      inline_keyboard: [
        [
          { text: 'üé® –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data: 'quick_image' },
          { text: 'üí¨ AI –ß–∞—Ç', callback_data: 'quick_chat' }
        ],
        [
          { text: 'üñºÔ∏è Midjourney', callback_data: 'midjourney_menu' },
          { text: 'üé¨ –í–∏–¥–µ–æ', callback_data: 'generate_video' }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
        ],
        [
          { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', web_app: { url: process.env.FRONTEND_URL || 'http://localhost:3000' } }
        ]
      ]
    };
  }

  /**
   * üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  static getQuickActionsMenu(userId: number) {
    return {
      inline_keyboard: [
        [
          { text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ', callback_data: 'repeat_last' },
          { text: '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏', callback_data: 'favorites' }
        ],
        [
          { text: 'üìù –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤', callback_data: 'prompt_templates' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }
        ]
      ]
    };
  }

  /**
   * üîô –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
   */
  static getBackButton(callbackData: string) {
    return {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: callbackData }]
      ]
    };
  }

  /**
   * üõë –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  static getStopButton() {
    return {
      inline_keyboard: [
        [{ text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'stop_action' }]
      ]
    };
  }

  /**
   * üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static setUserState(userId: number, state: Partial<UserState>) {
    const currentState = this.userStates.get(userId) || {
      currentPath: ['main'],
      currentAction: null,
      timestamp: Date.now()
    };

    this.userStates.set(userId, {
      ...currentState,
      ...state,
      timestamp: Date.now()
    });
  }

  static getUserState(userId: number): UserState | undefined {
    const state = this.userStates.get(userId);
    if (state && Date.now() - state.timestamp < this.STATE_TIMEOUT) {
      return state;
    }
    this.clearUserState(userId);
    return undefined;
  }

  static clearUserState(userId: number) {
    this.userStates.delete(userId);
  }

  static updateUserPath(userId: number, newSegment: string) {
    const state = this.getUserState(userId);
    if (state) {
      const newPath = [...state.currentPath, newSegment];
      this.setUserState(userId, { currentPath: newPath });
    }
  }

  /**
   * üìà –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  static async showProgress(ctx: Context, progressData: ProgressData) {
    const progressBar = this.generateProgressBar(progressData.progress);
    const timeLeft = this.formatTime(progressData.estimatedTime);
    
    const message = `üîÑ <b>${progressData.stage}</b>\n\n` +
      `${progressBar} ${progressData.progress}%\n\n` +
      `‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: ${timeLeft}\n\n` +
      `${progressData.message || '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'}`;

    try {
      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: this.getStopButton()
      });
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: this.getStopButton()
      });
    }
  }

  /**
   * ‚ùå –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  static getSmartError(error: any): SmartError {
    const errorMap: { [key: string]: SmartError } = {
      'insufficient_tokens': {
        type: 'insufficient_tokens',
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
        suggestion: '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å',
        retryable: false,
        fallbackAction: 'show_token_purchase'
      },
      'model_unavailable': {
        type: 'model_unavailable',
        message: '–ú–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ',
        retryable: true,
        fallbackAction: 'suggest_alternatives'
      },
      'rate_limit': {
        type: 'rate_limit',
        message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
        suggestion: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
        retryable: true,
        fallbackAction: 'schedule_retry'
      },
      'network_error': {
        type: 'network_error',
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
        retryable: true
      },
      'invalid_prompt': {
        type: 'invalid_prompt',
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç',
        suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ',
        retryable: false
      },
      'database_error': {
        type: 'database_error',
        message: '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
        retryable: true
      },
      'api_error': {
        type: 'api_error',
        message: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π AI —Å–µ—Ä–≤–∏—Å',
        retryable: true,
        fallbackAction: 'suggest_alternatives'
      }
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    let errorMessage = '';
    
    if (typeof error === 'string') {
      errorMessage = error.toLowerCase();
    } else if (error?.message) {
      errorMessage = error.message.toLowerCase();
    } else if (error?.error) {
      errorMessage = error.error.toLowerCase();
    } else {
      errorMessage = String(error).toLowerCase();
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
    if (errorMessage.includes('token') || errorMessage.includes('–±–∞–ª–∞–Ω—Å') || errorMessage.includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ')) {
      return errorMap['insufficient_tokens'];
    } else if (errorMessage.includes('model') || errorMessage.includes('–º–æ–¥–µ–ª—å') || errorMessage.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')) {
      return errorMap['model_unavailable'];
    } else if (errorMessage.includes('rate') || errorMessage.includes('–ª–∏–º–∏—Ç') || errorMessage.includes('–ø—Ä–µ–≤—ã—à–µ–Ω')) {
      return errorMap['rate_limit'];
    } else if (errorMessage.includes('network') || errorMessage.includes('—Å–µ—Ç—å') || errorMessage.includes('timeout')) {
      return errorMap['network_error'];
    } else if (errorMessage.includes('prompt') || errorMessage.includes('–ø—Ä–æ–º–ø—Ç') || errorMessage.includes('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π')) {
      return errorMap['invalid_prompt'];
    } else if (errorMessage.includes('prisma') || errorMessage.includes('database') || errorMessage.includes('connection')) {
      return errorMap['database_error'];
    } else if (errorMessage.includes('api') || errorMessage.includes('endpoint') || errorMessage.includes('service')) {
      return errorMap['api_error'];
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    return {
      type: 'unknown',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
      suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π AI —Å–µ—Ä–≤–∏—Å',
      retryable: true,
      fallbackAction: 'suggest_alternatives'
    };
  }

  /**
   * üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  static async sendSmartErrorNotification(ctx: Context, error: any, context?: any) {
    const smartError = this.getSmartError(error);
    
    const message = `‚ùå <b>–û—à–∏–±–∫–∞:</b> ${smartError.message}\n\n` +
      `üí° <b>–†–µ—à–µ–Ω–∏–µ:</b> ${smartError.suggestion}`;

    const keyboard = {
      inline_keyboard: [
        ...(smartError.retryable ? [[{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'retry_last_action' }]] : []),
        [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
      ]
    };

    try {
      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });
    } catch (editError) {
      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });
    }
  }

  /**
   * ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   */
  static async sendSuccessNotification(ctx: Context, data: any) {
    const message = `‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n` +
      `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${data.tokensUsed}\n` +
      `üéØ –°–µ—Ä–≤–∏—Å: ${data.service}\n` +
      `‚è±Ô∏è –í—Ä–µ–º—è: ${this.formatTime(data.duration || 0)}`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîÑ –ï—â–µ –æ–¥–Ω–æ', callback_data: data.repeatAction || 'repeat_last' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
        ],
        [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
      ]
    };

    try {
      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });
    } catch (editError) {
      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });
    }
  }

  /**
   * üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
   */
  static async showRetryNotification(ctx: Context, retryIn: number) {
    const message = `‚ö†Ô∏è <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞</b>\n\n` +
      `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${retryIn} —Å–µ–∫—É–Ω–¥...\n\n` +
      `üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üõë –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä', callback_data: 'cancel_retry' }],
        [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
      ]
    };

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard
    });
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  static cleanupStaleStates() {
    const now = Date.now();
    for (const [userId, state] of this.userStates.entries()) {
      if (now - state.timestamp > this.STATE_TIMEOUT) {
        this.userStates.delete(userId);
      }
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserStats(userId: number) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { telegramId: userId }
      });

      if (!user) {
        logger.warn('User not found for stats:', { telegramId: userId });
        return null;
      }

      logger.info('Getting stats for user:', { 
        telegramId: userId, 
        userId: user.id,
        currentTokens: user.tokens
      });

      // –°—á–∏—Ç–∞–µ–º –í–°–ï –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const totalGenerations = await prisma.generationHistory.count({
        where: { userId: user.id }
      });

      logger.info('Total generations found:', { totalGenerations });

      // –°—á–∏—Ç–∞–µ–º –í–°–ï –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      const tokenHistory = await prisma.tokenHistory.findMany({
        where: { 
          userId: user.id,
          amount: { lt: 0 }
        },
        select: { amount: true }
      });
      
      logger.info('Token history found:', { 
        records: tokenHistory.length,
        tokens: tokenHistory.map(t => t.amount)
      });

      const tokensSpent = tokenHistory.reduce((sum, t) => sum + Math.abs(t.amount), 0);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –ª—é–±–∏–º—ã–π —Å–µ—Ä–≤–∏—Å
      const recentGenerations = await prisma.generationHistory.findMany({
        where: { userId: user.id },
        orderBy: { createdAt: 'desc' },
        take: 20
      });

      logger.info('Recent generations:', { 
        count: recentGenerations.length,
        services: recentGenerations.map(g => g.service)
      });

      const stats = {
        totalGenerations,
        tokensSpent,
        currentBalance: user.tokens,
        lastGeneration: recentGenerations[0]?.createdAt,
        favoriteService: this.getFavoriteService(recentGenerations)
      };

      logger.info('Final stats:', stats);

      return stats;
    } catch (error) {
      logger.error('Error getting user stats:', error);
      return null;
    }
  }

  /**
   * üèÜ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—é–±–∏–º—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static getFavoriteService(history: any[]): string {
    const serviceCounts = history.reduce((acc, item) => {
      acc[item.service] = (acc[item.service] || 0) + 1;
      return acc;
    }, {} as { [key: string]: number });

    return Object.keys(serviceCounts).reduce((a, b) => 
      serviceCounts[a] > serviceCounts[b] ? a : b, 'unknown'
    );
  }

  /**
   * üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserRecommendations(userId: number) {
    const stats = await this.getUserStats(userId);
    if (!stats) return [];

    const recommendations = [];

    if (stats.totalGenerations === 0) {
      recommendations.push({
        type: 'first_time',
        message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        action: 'quick_image'
      });
    } else if (stats.tokensSpent > 100) {
      recommendations.push({
        type: 'power_user',
        message: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤',
        action: 'show_subscription'
      });
    }

    return recommendations;
  }
}

import { Bot } from "grammy";
import { logger } from "../utils/logger";
import { prisma } from "../utils/prismaClient";
import { AIServiceManager } from "../services/ai/AIServiceManager";
import { ChatMessage } from "../services/ai/OpenAIService";
import { FREEPIK_IMAGE_MODELS, FREEPIK_VIDEO_MODELS, getPopularImageModels, getPopularVideoModels, getImageModelById, getVideoModelById } from "../services/ai/FreepikModels";
import { UXHelpers } from "./utils/UXHelpers";
import { StateManager } from "./utils/StateManager";
import { TaskQueue } from "./utils/TaskQueue";
import { MidjourneyAPIService } from "../services/MidjourneyAPIService";
import axios from "axios";

const bot = new Bot(process.env.BOT_TOKEN!);
const aiManager = new AIServiceManager();
const stateManager = new StateManager();
const taskQueue = new TaskQueue(stateManager);
const midjourneyService = new MidjourneyAPIService();

console.log("ü§ñ Starting AICEX Production Bot with enhanced UX...");

// üéØ –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ê–ù–î –ë–û–¢–ê (Slash Commands Menu)
async function setupBotCommands() {
  try {
    // –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ (–±–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω—ã–π)
    const commands = [
      { command: "start", description: "üöÄ Start / –ù–∞—á–∞—Ç—å" },
      { command: "menu", description: "üìã Main menu / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" },
      { command: "image", description: "üé® Generate image / –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" },
      { command: "video", description: "üé¨ Generate video / –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ" },
      { command: "chat", description: "üí¨ AI Chat / –î–∏–∞–ª–æ–≥ —Å –ò–ò" },
      { command: "help", description: "‚ùì Help / –ü–æ–º–æ—â—å" },
    ];

    // 1) –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—Å–µ —á–∞—Ç—ã)
    await bot.api.setMyCommands(commands);

    // 2) –¢–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
    await bot.api.setMyCommands(commands, {
      scope: { type: "all_private_chats" },
    });

    // 3) –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    await bot.api.setMyCommands([
      { command: "start", description: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" },
      { command: "menu", description: "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" },
      { command: "image", description: "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" },
      { command: "video", description: "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ" },
      { command: "chat", description: "üí¨ –î–∏–∞–ª–æ–≥ —Å –ò–ò" },
      { command: "help", description: "‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" },
    ], {
      language_code: "ru",
    });

    // 4) –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    await bot.api.setMyCommands([
      { command: "start", description: "üöÄ Start the bot" },
      { command: "menu", description: "üìã Main menu" },
      { command: "image", description: "üé® Generate image" },
      { command: "video", description: "üé¨ Generate video" },
      { command: "chat", description: "üí¨ AI Chat" },
      { command: "help", description: "‚ùì Help and info" },
    ], {
      language_code: "en",
    });

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ —á–∞—Ç–µ
    await bot.api.setChatMenuButton({
      menu_button: { type: "commands" },
    });

    console.log("‚úÖ Bot commands menu configured successfully");
  } catch (error) {
    console.error("‚ùå Failed to setup bot commands:", error);
  }
}

// üéØ –£–õ–£–ß–®–ï–ù–ù–û–ï –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
function getMainMenu(userId?: number) {
  return UXHelpers.getSmartMainMenu(userId);
}

// üé® –ú–ï–ù–Æ –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
const imageMenu = {
  inline_keyboard: [
    [
      { text: 'üé® Freepik AI', callback_data: 'image_freepik' },
      { text: 'üñºÔ∏è Midjourney', callback_data: 'image_midjourney' }
    ],
    [
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
    ]
  ]
};

// üé¨ –ú–ï–ù–Æ –ì–ï–ù–ï–†–ê–¶–ò–ò –í–ò–î–ï–û  
const videoMenu = {
  inline_keyboard: [
    [
      { text: 'üé¨ Freepik Video', callback_data: 'video_freepik' }
    ],
    [
      { text: '‚ö° Kling AI', callback_data: 'video_kling' },
      { text: 'üöÄ Runway ML', callback_data: 'video_runway' }
    ],
    [
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
    ]
  ]
};

// üí¨ –ú–ï–ù–Æ –ß–ê–¢–ê
const chatMenu = {
  inline_keyboard: [
    [
      { text: 'üß† ChatGPT-4', callback_data: 'chat_gpt4' }
    ],
    [
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
    ]
  ]
};

// üé® –ú–ï–ù–Æ –ú–û–î–ï–õ–ï–ô FREEPIK - –ü–û–ü–£–õ–Ø–†–ù–´–ï
function getFreepikImageModelsMenu() {
  const popularModels = getPopularImageModels();
  
  return {
    inline_keyboard: [
      [
        { text: 'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', callback_data: 'freepik_popular_images' },
        { text: 'üìã –í—Å–µ –º–æ–¥–µ–ª–∏', callback_data: 'freepik_all_images' }
      ],
      ...popularModels.slice(0, 4).map(model => ([
        { 
          text: `${model.isNew ? 'üÜï ' : ''}${model.name}`, 
          callback_data: `freepik_img_${model.id}` 
        }
      ])),
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'generate_image' }
      ]
    ]
  };
}

// üé¨ –ú–ï–ù–Æ –ú–û–î–ï–õ–ï–ô FREEPIK - –í–ò–î–ï–û (–ë–ï–ó KLING)
function getFreepikVideoModelsMenu() {
  // –ò—Å–∫–ª—é—á–∞–µ–º Kling –º–æ–¥–µ–ª–∏ –∏–∑ Freepik –º–µ–Ω—é
  const nonKlingModels = FREEPIK_VIDEO_MODELS.filter(m => !m.id.includes('kling'));
  
  return {
    inline_keyboard: [
      [
        { text: 'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', callback_data: 'freepik_popular_videos' },
        { text: 'üìã –í—Å–µ –º–æ–¥–µ–ª–∏', callback_data: 'freepik_all_videos' }
      ],
      ...nonKlingModels.slice(0, 4).map(model => ([
        { 
          text: `${model.isNew ? 'üÜï ' : ''}${model.name}${model.resolution ? ` (${model.resolution})` : ''}`, 
          callback_data: `freepik_vid_${model.id}` 
        }
      ])),
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'generate_video' }
      ]
    ]
  };
}

// ‚ö° –ú–ï–ù–Æ KLING –ú–û–î–ï–õ–ï–ô (–∏—Å–ø–æ–ª—å–∑—É—é—Ç Freepik API)
function getKlingModelsMenu() {
  // –¢–æ–ª—å–∫–æ Kling –º–æ–¥–µ–ª–∏
  const klingModels = FREEPIK_VIDEO_MODELS.filter(m => m.id.includes('kling'));
  
  return {
    inline_keyboard: [
      [
        { text: 'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ Kling', callback_data: 'kling_popular' },
        { text: 'üìã –í—Å–µ Kling –º–æ–¥–µ–ª–∏', callback_data: 'kling_all' }
      ],
      ...klingModels.slice(0, 4).map(model => ([
        { 
          text: `${model.isNew ? 'üÜï ' : ''}${model.name}`, 
          callback_data: `freepik_vid_${model.id}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ callback, —Ç.–∫. API –æ–¥–∏–Ω
        }
      ])),
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'generate_video' }
      ]
    ]
  };
}

// üìã –í–°–ï –ú–û–î–ï–õ–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
function getAllImageModelsMenu(page: number = 0) {
  const modelsPerPage = 6;
  const startIndex = page * modelsPerPage;
  const models = FREEPIK_IMAGE_MODELS.slice(startIndex, startIndex + modelsPerPage);
  
  const keyboard = models.map(model => ([
    { 
      text: `${model.isNew ? 'üÜï ' : ''}${model.name}`, 
      callback_data: `freepik_img_${model.id}` 
    }
  ]));
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const navButtons: Array<{ text: string; callback_data: string }> = [];
  if (page > 0) {
    navButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥.', callback_data: `freepik_img_page_${page - 1}` });
  }
  if (startIndex + modelsPerPage < FREEPIK_IMAGE_MODELS.length) {
    navButtons.push({ text: '–°–ª–µ–¥. ‚û°Ô∏è', callback_data: `freepik_img_page_${page + 1}` });
  }
  
  if (navButtons.length > 0) {
    keyboard.push(navButtons);
  }
  
  keyboard.push([{ text: '‚¨ÖÔ∏è –ö –ø–æ–ø—É–ª—è—Ä–Ω—ã–º', callback_data: 'image_freepik' }]);
  
  return { inline_keyboard: keyboard };
}

// üìã –í–°–ï –ú–û–î–ï–õ–ò –í–ò–î–ï–û (–ë–ï–ó KLING)
function getAllVideoModelsMenu(page: number = 0) {
  const modelsPerPage = 6;
  const startIndex = page * modelsPerPage;
  // –ò—Å–∫–ª—é—á–∞–µ–º Kling –º–æ–¥–µ–ª–∏
  const nonKlingModels = FREEPIK_VIDEO_MODELS.filter(m => !m.id.includes('kling'));
  const models = nonKlingModels.slice(startIndex, startIndex + modelsPerPage);
  
  const keyboard = models.map(model => ([
    { 
      text: `${model.isNew ? 'üÜï ' : ''}${model.name}${model.resolution ? ` (${model.resolution})` : ''}`, 
      callback_data: `freepik_vid_${model.id}` 
    }
  ]));
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const navButtons: Array<{ text: string; callback_data: string }> = [];
  if (page > 0) {
    navButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥.', callback_data: `freepik_vid_page_${page - 1}` });
  }
  if (startIndex + modelsPerPage < nonKlingModels.length) {
    navButtons.push({ text: '–°–ª–µ–¥. ‚û°Ô∏è', callback_data: `freepik_vid_page_${page + 1}` });
  }
  
  if (navButtons.length > 0) {
    keyboard.push(navButtons);
  }
  
  keyboard.push([{ text: '‚¨ÖÔ∏è –ö –ø–æ–ø—É–ª—è—Ä–Ω—ã–º', callback_data: 'video_freepik' }]);
  
  return { inline_keyboard: keyboard };
}

// üìã –í–°–ï –ú–û–î–ï–õ–ò KLING
function getAllKlingModelsMenu(page: number = 0) {
  const modelsPerPage = 6;
  const startIndex = page * modelsPerPage;
  const klingModels = FREEPIK_VIDEO_MODELS.filter(m => m.id.includes('kling'));
  const models = klingModels.slice(startIndex, startIndex + modelsPerPage);
  
  const keyboard = models.map(model => ([
    { 
      text: `${model.isNew ? 'üÜï ' : ''}${model.name}`, 
      callback_data: `freepik_vid_${model.id}` 
    }
  ]));
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const navButtons: Array<{ text: string; callback_data: string }> = [];
  if (page > 0) {
    navButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥.', callback_data: `kling_page_${page - 1}` });
  }
  if (startIndex + modelsPerPage < klingModels.length) {
    navButtons.push({ text: '–°–ª–µ–¥. ‚û°Ô∏è', callback_data: `kling_page_${page + 1}` });
  }
  
  if (navButtons.length > 0) {
    keyboard.push(navButtons);
  }
  
  keyboard.push([{ text: '‚¨ÖÔ∏è –ö –ø–æ–ø—É–ª—è—Ä–Ω—ã–º', callback_data: 'video_kling' }]);
  
  return { inline_keyboard: keyboard };
}

// üß≠ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function getNavigationButtons(backCallback?: string, includeHome: boolean = true) {
  const buttons: any[] = [];
  
  if (backCallback) {
    buttons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: backCallback }]);
  }
  
  if (includeHome) {
    buttons.push([{ text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'back_to_main' }]);
  }
  
  return buttons;
}

// üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê /start
bot.command("start", async (ctx) => {
  console.log("üì® /start from user:", ctx.from?.id);
  
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await prisma.user.upsert({
      where: { telegramId: userId },
      update: { 
        username: ctx.from?.username || "",
        firstName: ctx.from?.first_name || "",
        lastName: ctx.from?.last_name || ""
      },
      create: {
        telegramId: userId,
        username: ctx.from?.username || "",
        firstName: ctx.from?.first_name || "",
        lastName: ctx.from?.last_name || "",
        tokens: 50 // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const recommendations = await UXHelpers.getUserRecommendations(userId);
    const stats = await UXHelpers.getUserStats(userId);

    let welcomeMessage = `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AICEX AI!</b>\n\n`;
    
    if (stats && stats.totalGenerations > 0) {
      welcomeMessage += `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –£ –≤–∞—Å ${stats.totalGenerations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n`;
      welcomeMessage += `üí∞ –¢–æ–∫–µ–Ω–æ–≤: ${stats.currentBalance}\n\n`;
    } else {
      welcomeMessage += `üéÅ <b>–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å:</b> 50 —Ç–æ–∫–µ–Ω–æ–≤\n`;
      welcomeMessage += `üöÄ <b>27 AI –º–æ–¥–µ–ª–µ–π</b> –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ\n\n`;
    }

    welcomeMessage += `üéØ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n`;
    welcomeMessage += `‚Ä¢ üé® –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n`;
    welcomeMessage += `‚Ä¢ üí¨ AI –ß–∞—Ç - –æ–±—â–µ–Ω–∏–µ —Å ChatGPT-4\n`;
    welcomeMessage += `‚Ä¢ üé¨ –í–∏–¥–µ–æ - —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞\n\n`;

    if (recommendations.length > 0) {
      welcomeMessage += `üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n`;
      recommendations.forEach(rec => {
        welcomeMessage += `‚Ä¢ ${rec.message}\n`;
      });
      welcomeMessage += `\n`;
    }

    welcomeMessage += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await ctx.reply(welcomeMessage, {
      reply_markup: getMainMenu(userId),
      parse_mode: "HTML"
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    UXHelpers.setUserState(userId, {
      currentPath: ['main'],
      currentAction: null
    });

    console.log("‚úÖ Enhanced welcome sent to user:", userId);

  } catch (error) {
    console.error("‚ùå Start error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
});

// üìã –ö–û–ú–ê–ù–î–ê /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.command("menu", async (ctx) => {
  console.log("üì® /menu from user:", ctx.from?.id);
  
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    await ctx.reply(
      "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: getMainMenu(userId),
        parse_mode: "HTML"
      }
    );
  } catch (error) {
    console.error("‚ùå Menu error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
});

// üé® –ö–û–ú–ê–ù–î–ê /image - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
bot.command("image", async (ctx) => {
  console.log("üì® /image from user:", ctx.from?.id);
  
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    await ctx.reply(
      "üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:",
      {
        reply_markup: imageMenu,
        parse_mode: "HTML"
      }
    );
  } catch (error) {
    console.error("‚ùå Image error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
});

// üé¨ –ö–û–ú–ê–ù–î–ê /video - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
bot.command("video", async (ctx) => {
  console.log("üì® /video from user:", ctx.from?.id);
  
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    await ctx.reply(
      "üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:",
      {
        reply_markup: videoMenu,
        parse_mode: "HTML"
      }
    );
  } catch (error) {
    console.error("‚ùå Video error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
});

// üí¨ –ö–û–ú–ê–ù–î–ê /chat - –î–∏–∞–ª–æ–≥ —Å –ò–ò
bot.command("chat", async (ctx) => {
  console.log("üì® /chat from user:", ctx.from?.id);
  
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    await ctx.reply(
      "üí¨ <b>–î–∏–∞–ª–æ–≥ —Å –ò–ò</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üí¨ ChatGPT-4", callback_data: "chat_gpt4" },
              { text: "üéì ChatGPT-4 Mini", callback_data: "chat_gpt4_mini" }
            ],
            [
              { text: "üîç GPT Vision", callback_data: "start_vision_chat" }
            ],
            ...getNavigationButtons()
          ]
        },
        parse_mode: "HTML"
      }
    );
  } catch (error) {
    console.error("‚ùå Chat error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
});

// ‚ùì –ö–û–ú–ê–ù–î–ê /help - –ü–æ–º–æ—â—å
bot.command("help", async (ctx) => {
  console.log("üì® /help from user:", ctx.from?.id);
  
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    await showHelp(ctx, userId);
  } catch (error) {
    console.error("‚ùå Help error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
});

// üîò –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK –ö–ù–û–ü–û–ö
bot.on("callback_query", async (ctx) => {
  console.log("üîò Callback:", ctx.callbackQuery.data, "from:", ctx.from?.id);
  
  await ctx.answerCallbackQuery();
  
  const data = ctx.callbackQuery.data;
  const userId = ctx.from?.id;
  
  if (!userId) return;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userState = UXHelpers.getUserState(userId);
  const breadcrumb = UXHelpers.getBreadcrumb(userState?.currentPath || ['main']);
  
  try {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ
  if (data.startsWith('freepik_vid_')) {
    const modelId = data.replace('freepik_vid_', '');
    UXHelpers.setUserState(userId, {
      currentAction: 'waiting_for_photo_video',
      data: { service: 'freepik', model: modelId }
    });
    await ctx.editMessageText(
      `üé¨ <b>${getVideoModelName(modelId)}</b>\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:\n\nüí° <i>–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>`,
      {
        reply_markup: {
          inline_keyboard: [
            ...getNavigationButtons('photo_to_video_menu')
          ]
        },
        parse_mode: "HTML"
      }
    );
    return;
  }

  switch (data) {
      // üéØ –ù–û–í–´–ï –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø
      case 'quick_image':
        await handleQuickImage(ctx, userId);
        break;
        
      case 'quick_chat':
        await handleQuickChat(ctx, userId);
        break;
        
      case 'midjourney_menu':
        await handleMidjourneyMenu(ctx, userId);
        break;
        
      case 'stats':
        await handleStats(ctx, userId);
        break;
        
      case 'back_to_main':
        await handleBackToMain(ctx, userId);
        break;
        
      case 'stop_action':
        await handleStopAction(ctx, userId);
        break;
        
      case 'retry_last_action':
        await handleRetryLastAction(ctx, userId);
        break;
        
      case 'cancel_retry':
        await handleCancelRetry(ctx, userId);
        break;

      // üñºÔ∏è MIDJOURNEY –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
      case 'midjourney_7.0':
        await handleMidjourneyGeneration(ctx, userId, '7.0');
        break;
        
      case 'midjourney_6.1':
        await handleMidjourneyGeneration(ctx, userId, '6.1');
        break;
        
      case 'midjourney_quick':
        await handleMidjourneyQuick(ctx, userId);
        break;

    // üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
    case 'generate_image':
      await ctx.editMessageText(
        "üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å:",
        { 
          reply_markup: {
            inline_keyboard: [
              ...imageMenu.inline_keyboard,
              ...getNavigationButtons()
            ]
          },
          parse_mode: "HTML" 
        }
      );
      break;

    case 'image_freepik':
      const freepikImageMenu = getFreepikImageModelsMenu();
      await ctx.editMessageText(
        "üé® <b>Freepik AI</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        { 
          reply_markup: {
            inline_keyboard: [
              ...freepikImageMenu.inline_keyboard,
              ...getNavigationButtons()
            ]
          },
          parse_mode: "HTML" 
        }
      );
      break;

    case 'freepik_all_images':
      await ctx.editMessageText(
        "üìã <b>–í—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Freepik</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        { reply_markup: getAllImageModelsMenu(0), parse_mode: "HTML" }
      );
      break;


    case 'image_midjourney':
      await ctx.editMessageText(
        "üñºÔ∏è <b>Midjourney</b>\n\nüöß –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Freepik AI.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'generate_image' }]
            ]
          },
          parse_mode: "HTML"
        }
      );
      break;

    // üé¨ –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–î–ï–û
    case 'generate_video':
      await ctx.editMessageText(
        "üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å:",
        { 
          reply_markup: {
            inline_keyboard: [
              ...videoMenu.inline_keyboard,
              ...getNavigationButtons()
            ]
          },
          parse_mode: "HTML" 
        }
      );
      break;

    case 'video_freepik':
      const freepikVideoMenu = getFreepikVideoModelsMenu();
      await ctx.editMessageText(
        "üé¨ <b>Freepik Video</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        { 
          reply_markup: {
            inline_keyboard: [
              ...freepikVideoMenu.inline_keyboard,
              ...getNavigationButtons()
            ]
          },
          parse_mode: "HTML" 
        }
      );
      break;

    case 'video_kling':
      const klingMenu = getKlingModelsMenu();
      await ctx.editMessageText(
        "‚ö° <b>Kling AI Video</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Kling –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Freepik API",
        { 
          reply_markup: {
            inline_keyboard: [
              ...klingMenu.inline_keyboard,
              ...getNavigationButtons()
            ]
          },
          parse_mode: "HTML" 
        }
      );
      break;

    case 'kling_all':
      await ctx.editMessageText(
        "üìã <b>–í—Å–µ –º–æ–¥–µ–ª–∏ Kling AI</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        { reply_markup: getAllKlingModelsMenu(0), parse_mode: "HTML" }
      );
      break;

    case 'freepik_all_videos':
      await ctx.editMessageText(
        "üìã <b>–í—Å–µ –º–æ–¥–µ–ª–∏ –≤–∏–¥–µ–æ Freepik</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        { reply_markup: getAllVideoModelsMenu(0), parse_mode: "HTML" }
      );
      break;

    case 'video_runway':
      // Runway ML —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ Image-to-Video (—Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
      UXHelpers.setUserState(userId, {
        currentAction: 'waiting_runway_photo',
        data: { service: 'runway' }
      });
      await ctx.editMessageText(
        "üöÄ <b>Runway ML - Image to Video</b>\n\n" +
        "üì∏ <b>–®–∞–≥ 1:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ\n\n" +
        "üí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ",
        {
          reply_markup: {
            inline_keyboard: [
              ...getNavigationButtons('generate_video')
            ]
          },
          parse_mode: "HTML"
        }
      );
      break;

    // üé¨ –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–î–ï–û –ò–ó –§–û–¢–û
    case 'photo_to_video_menu':
      const photoVideoMenu = getFreepikVideoModelsMenu();
      await ctx.editMessageText(
        "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        { 
          reply_markup: {
            inline_keyboard: [
              ...photoVideoMenu.inline_keyboard,
              ...getNavigationButtons()
            ]
          },
          parse_mode: "HTML" 
        }
      );
      break;


    // üí¨ AI –ß–ê–¢
    case 'chat_ai':
      await ctx.editMessageText(
        "üí¨ <b>AI –ß–∞—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        { 
          reply_markup: {
            inline_keyboard: [
              ...chatMenu.inline_keyboard,
              ...getNavigationButtons()
            ]
          },
          parse_mode: "HTML" 
        }
      );
      break;

    case 'chat_gpt4':
      UXHelpers.setUserState(userId, {
        currentAction: 'chatting',
        data: { service: 'gpt4' }
      });
      await ctx.editMessageText(
        "üß† <b>ChatGPT-4</b>\n\nüí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.\n\nüõë –ù–∞–ø–∏—à–∏—Ç–µ \"—Å—Ç–æ–ø\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'chat_ai' }]
            ]
          },
          parse_mode: "HTML"
        }
      );
      break;


    // üîô –ù–ê–í–ò–ì–ê–¶–ò–Ø
    case 'back_to_main':
      await handleBackToMain(ctx, userId);
      break;

    // üìã –ú–û–ò –ó–ê–î–ê–ß–ò
    case 'my_tasks':
      await handleMyTasks(ctx, userId);
      break;

    default:
      // üé® –û–ë–†–ê–ë–û–¢–ö–ê –ë–´–°–¢–†–´–• –î–ï–ô–°–¢–í–ò–ô –° –¢–ï–ö–°–¢–û–ú
      if (data?.startsWith('quick_img_')) {
        const prompt = data.replace('quick_img_', '');
        UXHelpers.setUserState(userId, {
          currentAction: 'waiting_image_prompt',
          data: { service: 'freepik', model: 'seedream' }
        });
        await handleImageGeneration(ctx, prompt, 'freepik', { model: 'seedream' });
        break;
      }
      
      if (data?.startsWith('quality_img_')) {
        const prompt = data.replace('quality_img_', '');
        UXHelpers.setUserState(userId, {
          currentAction: 'waiting_image_prompt',
          data: { service: 'freepik', model: 'flux-pro' }
        });
        await handleImageGeneration(ctx, prompt, 'freepik', { model: 'flux-pro' });
        break;
      }
      
      // üé® –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ú–û–î–ï–õ–ï–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
      if (data?.startsWith('freepik_img_')) {
        const modelId = data.replace('freepik_img_', '');
        const model = getImageModelById(modelId);
        
        if (model) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º UXHelpers –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
          UXHelpers.setUserState(userId, { 
            currentAction: 'waiting_image_prompt', 
            data: { service: 'freepik', model: modelId, endpoint: model.endpoint } 
          });
          
          await ctx.editMessageText(
            `${model.isNew ? 'üÜï ' : ''}<b>${model.name}</b>\n\n${model.description}\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\nüí° –ü—Ä–∏–º–µ—Ä: "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º"`,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚¨ÖÔ∏è –ö –º–æ–¥–µ–ª—è–º', callback_data: 'image_freepik' }]
                ]
              },
              parse_mode: "HTML"
            }
          );
        }
      }
      // üé¨ –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ú–û–î–ï–õ–ï–ô –í–ò–î–ï–û
      else if (data?.startsWith('freepik_vid_')) {
        const modelId = data.replace('freepik_vid_', '');
        const model = getVideoModelById(modelId);
        
        if (model) {
          UXHelpers.setUserState(userId, {
            currentAction: 'waiting_video_prompt',
            data: { service: 'freepik', model: modelId, endpoint: model.endpoint }
          });
          
          await ctx.editMessageText(
            `${model.isNew ? 'üÜï ' : ''}<b>${model.name}</b>${model.resolution ? ` (${model.resolution})` : ''}\n\n${model.description}\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n\nüí° –ü—Ä–∏–º–µ—Ä: "–∫–æ—Ç –∏–≥—Ä–∞–µ—Ç —Å –º—è—á–∏–∫–æ–º"`,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚¨ÖÔ∏è –ö –º–æ–¥–µ–ª—è–º', callback_data: 'video_freepik' }]
                ]
              },
              parse_mode: "HTML"
            }
          );
        }
      }
      // üìÑ –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –°–¢–†–ê–ù–ò–¶–ê–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
      else if (data?.startsWith('freepik_img_page_')) {
        const page = parseInt(data.replace('freepik_img_page_', ''));
        await ctx.editMessageText(
          "üìã <b>–í—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Freepik</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
          { reply_markup: getAllImageModelsMenu(page), parse_mode: "HTML" }
        );
      }
      // üìÑ –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –°–¢–†–ê–ù–ò–¶–ê–ú –í–ò–î–ï–û
      else if (data?.startsWith('freepik_vid_page_')) {
        const page = parseInt(data.replace('freepik_vid_page_', ''));
        await ctx.editMessageText(
          "üìã <b>–í—Å–µ –º–æ–¥–µ–ª–∏ –≤–∏–¥–µ–æ Freepik</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
          { reply_markup: getAllVideoModelsMenu(page), parse_mode: "HTML" }
        );
      }
      // üìÑ –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –°–¢–†–ê–ù–ò–¶–ê–ú KLING
      else if (data?.startsWith('kling_page_')) {
        const page = parseInt(data.replace('kling_page_', ''));
        await ctx.editMessageText(
          "üìã <b>–í—Å–µ –º–æ–¥–µ–ª–∏ Kling AI</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
          { reply_markup: getAllKlingModelsMenu(page), parse_mode: "HTML" }
        );
      }
      else {
        console.log("‚ùì Unknown callback:", data);
        await ctx.reply("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.");
      }
    }
  } catch (error) {
    console.error("‚ùå Callback error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
});

// üì∏ –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ô
bot.on("message:photo", async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;
  
  console.log("üì∏ Photo received from user:", userId);
  
  const userState = UXHelpers.getUserState(userId);
  
  if (userState?.currentAction === 'waiting_for_photo_video') {
    await handleVideoFromPhoto(ctx, userState.data?.service || 'freepik');
  } else if (userState?.currentAction === 'waiting_runway_photo') {
    // Runway ML - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
    await handleRunwayPhoto(ctx);
  } else if (userState?.currentAction === 'vision_chat') {
    await handleGPTVision(ctx);
  } else {
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
    await ctx.reply("üì∏ <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ñ–æ—Ç–æ?</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data: "photo_to_video_menu" },
              { text: "üîç –ê–Ω–∞–ª–∏–∑ GPT-4", callback_data: "start_vision_chat" }
            ],
            ...getNavigationButtons()
          ]
        },
        parse_mode: "HTML"
      }
    );
  }
});

// üìù –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
bot.on("message:text", async (ctx) => {
  const userId = ctx.from?.id;
  const text = ctx.message.text;
  
  if (!userId || !text) return;
  
  console.log("üìù Text message:", text, "from:", userId);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = UXHelpers.getUserState(userId);
  
  if (!userState) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await ctx.reply(
        `ü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.\n\n${UXHelpers.getBreadcrumb(['main'])}`,
        { reply_markup: getMainMenu(userId) }
    );
    return;
  }

  // –ö–æ–º–∞–Ω–¥–∞ "—Å—Ç–æ–ø" - –≤—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–≥–æ —Ä–µ–∂–∏–º–∞
  if (text.toLowerCase() === '—Å—Ç–æ–ø' || text.toLowerCase() === 'stop') {
      UXHelpers.clearUserState(userId);
      stateManager.endSession(userId.toString());
    await ctx.reply(
      "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        { reply_markup: getMainMenu(userId) }
    );
    return;
  }

    // –ö–æ–º–∞–Ω–¥–∞ "–ø–æ–º–æ—â—å" - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
    if (text.toLowerCase() === '–ø–æ–º–æ—â—å' || text.toLowerCase() === 'help') {
      await showHelp(ctx, userId);
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (text.toLowerCase() === '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' || text.toLowerCase() === 'stats') {
      await handleStats(ctx, userId);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    switch (userState.currentAction) {
    case 'waiting_image_prompt':
        await handleImageGeneration(ctx, text, userState.data?.service || 'freepik', userState.data);
      break;
      
    case 'waiting_video_prompt':
        await handleVideoGeneration(ctx, text, userState.data?.service || 'freepik', userState.data);
      break;

    case 'waiting_runway_prompt':
      await handleRunwayPrompt(ctx, text);
      break;
      
      case 'waiting_midjourney_prompt':
        await handleMidjourneyTextInput(ctx, text, userState.data?.model || '7.0');
        break;
        
      case 'waiting_chat_message':
    case 'chatting':
      await handleChatGPT(ctx, text);
      break;
      
    default:
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await handleQuickTextInput(ctx, userId, text);
    }
    
  } catch (error) {
    console.error("‚ùå Text message error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
});

// üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
async function handleQuickTextInput(ctx: any, userId: number, text: string) {
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–æ–ª–µ–µ —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  const imageKeywords = ['–∑–∞–∫–∞—Ç', '—Ä–∞—Å—Å–≤–µ—Ç', '–ø–µ–π–∑–∞–∂', '–ø–æ—Ä—Ç—Ä–µ—Ç', '–∫–æ—à–∫–∞', '—Å–æ–±–∞–∫–∞', '–¥–æ–º', '–≥–æ—Ä–æ–¥', '–º–æ—Ä–µ', '–≥–æ—Ä—ã', '–ª–µ—Å', '—Ü–≤–µ—Ç—ã', '–∫—Ä–∞—Å–∏–≤—ã–π', '–∫—Ä–∞—Å–∏–≤–∞—è', '–∫—Ä–∞—Å–∏–≤–æ–µ', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∞—è', '–∫–æ—Å–º–æ—Å', '–∑–≤–µ–∑–¥—ã', '–ª—É–Ω–∞', '—Å–æ–ª–Ω—Ü–µ', '–Ω–µ–±–æ', '–æ–±–ª–∞–∫–∞'];
  const hasImageKeywords = imageKeywords.some(keyword => text.toLowerCase().includes(keyword));
  
  if (text.length > 5 && (text.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') || text.includes('–∫–∞—Ä—Ç–∏–Ω–∫–∞') || text.includes('—Ñ–æ—Ç–æ') || hasImageKeywords)) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    UXHelpers.setUserState(userId, {
      currentAction: 'waiting_image_prompt',
      data: { service: 'freepik', model: 'seedream' }
    });
    
    // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    await handleImageGeneration(ctx, text, 'freepik', { model: 'seedream' });
    return;
  }
  
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ
  if (text.length > 15 && (text.includes('–≤–∏–¥–µ–æ') || text.includes('–∞–Ω–∏–º–∞—Ü–∏—è') || text.includes('–¥–≤–∏–∂–µ–Ω–∏–µ'))) {
    await ctx.reply(
      `üé¨ <b>–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ</b>\n\n–ü—Ä–æ–º–ø—Ç: "${text}"\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚ö° Kling AI', callback_data: `quick_vid_kling_${text}` },
              { text: 'üöÄ Runway ML', callback_data: `quick_vid_runway_${text}` }
            ],
            [{ text: 'üìã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã', callback_data: 'generate_video' }]
          ]
        }
      }
    );
    return;
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —á–∞—Ç
          await ctx.reply(
            `üí¨ <b>AI –ß–∞—Ç</b>\n\n–ü—Ä–æ–º–ø—Ç: "${text}"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:`,
            {
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üß† ChatGPT-4', callback_data: `quick_chat_gpt_${text}` }
                  ],
                  [{ text: 'üìã –í—Å–µ –º–æ–¥–µ–ª–∏', callback_data: 'chat_ai' }]
                ]
              }
            }
          );
}

// üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
async function showHelp(ctx: any, userId: number) {
  const message = `üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n` +
    `üéØ <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
    `‚Ä¢ "—Å—Ç–æ–ø" - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n` +
    `‚Ä¢ "–ø–æ–º–æ—â—å" - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
    `‚Ä¢ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n` +
    `üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b>\n` +
    `–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å\n` +
    `<i>–ü—Ä–∏–º–µ—Ä: "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º"</i>\n\n` +
    `üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ:</b>\n` +
    `–û–ø–∏—à–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Ü–µ–Ω—É\n` +
    `<i>–ü—Ä–∏–º–µ—Ä: "–∫–æ—Ç –∏–≥—Ä–∞–µ—Ç —Å –º—è—á–∏–∫–æ–º"</i>\n\n` +
    `üí¨ <b>AI –ß–∞—Ç:</b>\n` +
    `–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n` +
    `<i>–ü—Ä–∏–º–µ—Ä: "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"</i>\n\n` +
    `üì∏ <b>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b>\n` +
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n` +
    `üí∞ <b>–¢–æ–∫–µ–Ω—ã:</b>\n` +
    `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 5-15 —Ç–æ–∫–µ–Ω–æ–≤\n` +
    `‚Ä¢ –í–∏–¥–µ–æ: 20-50 —Ç–æ–∫–µ–Ω–æ–≤\n` +
    `‚Ä¢ –ß–∞—Ç: 1-3 —Ç–æ–∫–µ–Ω–∞\n\n` +
    `üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n` +
    `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n` +
    `‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö\n` +
    `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤\n` +
    `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏`;
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üé® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data: 'quick_image' },
        { text: 'üí¨ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–∞—Ç', callback_data: 'quick_chat' }
      ],
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        { text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }
      ]
    ]
  };
  
  await ctx.reply(message, {
    parse_mode: "HTML",
    reply_markup: keyboard
  });
}


// üé® –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
async function handleImageGeneration(ctx: any, prompt: string, service: string, data?: any) {
  const userId = ctx.from?.id;
  const startTime = Date.now();
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
    const task = stateManager.createTask(userId, 'image', service, prompt, data);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    const createProgressBar = (percent: number, width: number = 10): string => {
      const filled = Math.round((percent / 100) * width);
      const empty = width - filled;
      return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
    };
    
    // –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (–±—É–¥–µ–º –µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å)
    const progressMsg = await ctx.reply(`‚è≥ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...</b>\n\n${createProgressBar(10)} 10%`, { parse_mode: 'HTML' });
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBalance = await aiManager.getUserBalance(userId);
    const userContext = { telegramId: userId, currentTokens: userBalance };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    try {
      await ctx.api.editMessageText(
        progressMsg.chat.id,
        progressMsg.message_id,
        `üé® <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>\n\n${createProgressBar(30)} 30%`,
        { parse_mode: 'HTML' }
      );
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }
    
    console.log('==================== HANDLE IMAGE GENERATION START ====================');
    console.log('Service:', service);
    console.log('Prompt:', prompt);
    console.log('Data:', JSON.stringify(data, null, 2));
    console.log('User Context:', JSON.stringify(userContext, null, 2));
    console.log('===============================================================');
    
    let result;
    
    if (service === 'freepik') {
      const freepikOptions = {
        model: data?.model || 'seedream',
        aspect_ratio: '1:1'
      };
      
      console.log('==================== FREEPIK GENERATION OPTIONS ====================');
      console.log('Options:', JSON.stringify(freepikOptions, null, 2));
      console.log('===============================================================');
      
      result = await aiManager.generateImage(prompt, 'freepik', userContext, freepikOptions);
    } else if (service === 'dalle') {
      result = await aiManager.generateImage(prompt, 'dalle', userContext);
    } else {
      result = { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å' };
    }
    
    console.log('==================== HANDLE IMAGE GENERATION RESULT ====================');
    console.log('Result:', JSON.stringify(result, null, 2));
    console.log('===============================================================');
    
    const duration = Math.floor((Date.now() - startTime) / 1000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    try {
      await ctx.api.editMessageText(
        progressMsg.chat.id,
        progressMsg.message_id,
        `‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>\n\n${createProgressBar(100)} 100%`,
        { parse_mode: 'HTML' }
      );
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    let imageUrl = null;
    if (result.success && result.data) {
      // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–π URL
      if (result.data.url) {
        imageUrl = result.data.url;
      }
      // –í–∞—Ä–∏–∞–Ω—Ç 2: URL –≤ –º–∞—Å—Å–∏–≤–µ images
      else if (result.data.images && result.data.images.length > 0 && result.data.images[0].url) {
        imageUrl = result.data.images[0].url;
      }
    }

    console.log('==================== IMAGE URL CHECK ====================');
    console.log('Result success:', result.success);
    console.log('Result data:', result.data);
    console.log('Image URL found:', imageUrl);
    console.log('===============================================================');

    if (result.success && imageUrl) {
      logger.info('Image generation completed:', {
        service,
        data,
        dataModel: data?.model,
        resultMetadata: result.data?.metadata,
        imageUrl
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ
      await ctx.api.editMessageText(
        progressMsg.chat.id,
        progressMsg.message_id,
        `‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>\n\n${createProgressBar(100)} 100%\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...`,
        { parse_mode: 'HTML' }
      ).catch(() => {});
      
      const modelText = data?.model ? ` (${data.model})` : '';
      
      // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à–µ–ª –≤ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é
      await bot.api.sendPhoto(ctx.chat.id, imageUrl, {
        caption: `‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>\n\nüìù –ü—Ä–æ–º–ø—Ç: "${prompt}"\nüé® –°–µ—Ä–≤–∏—Å: ${service === 'freepik' ? 'Freepik AI' + modelText : 'DALL-E'}\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.tokensUsed}\n‚è±Ô∏è –í—Ä–µ–º—è: ${UXHelpers.formatTime(duration)}`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ï—â–µ –æ–¥–Ω–æ', callback_data: 'quick_image' },
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
            ],
            ...getNavigationButtons()
          ]
        }
      });
      
    } else {
      console.log('==================== IMAGE GENERATION FAILED ====================');
      console.log('Result:', JSON.stringify(result, null, 2));
      console.log('Image URL:', imageUrl);
      console.log('===============================================================');
      
      const errorMessage = result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
      await UXHelpers.sendSmartErrorNotification(ctx, errorMessage);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏
    stateManager.updateTask(task.id, {
      status: result.success ? 'completed' : 'failed',
      result: result.data,
      error: result.error,
      completedAt: new Date()
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    UXHelpers.clearUserState(userId);
    
  } catch (error) {
    console.error("‚ùå Image generation error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
    UXHelpers.clearUserState(userId);
  }
}

// üé¨ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –í–ò–î–ï–û
async function handleVideoGeneration(ctx: any, prompt: string, service: string, data?: any) {
  const userId = ctx.from?.id;
  const startTime = Date.now();
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
    const task = stateManager.createTask(userId, 'video', service, prompt, data);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await UXHelpers.showProgress(ctx, {
      stage: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      progress: 5,
      estimatedTime: 180,
      message: '–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤...'
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBalance = await aiManager.getUserBalance(userId);
    const userContext = { telegramId: userId, currentTokens: userBalance };
    
    await UXHelpers.showProgress(ctx, {
      stage: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ',
      progress: 20,
      estimatedTime: 160,
      message: '–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ AI —Å–µ—Ä–≤–∏—Å...'
    });
    
    let result;
    
    if (service === 'freepik') {
      result = await aiManager.generateVideo(prompt, 'freepik', userContext, data);
    } else if (service === 'runway') {
      result = await aiManager.generateVideo(prompt, 'runway', userContext, data);
    } else {
      result = { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å' };
    }
    
    const duration = Math.floor((Date.now() - startTime) / 1000);
    
    if (result.success && result.data?.url) {
      await UXHelpers.showProgress(ctx, {
        stage: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
        progress: 100,
        estimatedTime: 0,
        message: '–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!'
      });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const serviceName = service === 'freepik' ? 'Freepik Video' : 'Runway ML';
      await ctx.replyWithVideo(result.data.url, {
        caption: `‚úÖ <b>–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\nüìù –ü—Ä–æ–º–ø—Ç: "${prompt}"\nüé¨ –°–µ—Ä–≤–∏—Å: ${serviceName}\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.tokensUsed}\n‚è±Ô∏è –í—Ä–µ–º—è: ${UXHelpers.formatTime(duration)}`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ï—â–µ –æ–¥–Ω–æ', callback_data: 'generate_video' },
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'back_to_main' }]
          ]
        }
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      await UXHelpers.sendSuccessNotification(ctx, {
        tokensUsed: result.tokensUsed,
        service: serviceName,
        duration,
        repeatAction: 'generate_video'
      });
      
    } else {
      await UXHelpers.sendSmartErrorNotification(ctx, result.error);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏
    stateManager.updateTask(task.id, {
      status: result.success ? 'completed' : 'failed',
      result: result.data,
      error: result.error,
      completedAt: new Date()
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    UXHelpers.clearUserState(userId);
    
  } catch (error) {
    console.error("‚ùå Video generation error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
    UXHelpers.clearUserState(userId);
  }
}

// üí¨ –§–£–ù–ö–¶–ò–Ø –ß–ê–¢–ê –° CHATGPT
async function handleChatGPT(ctx: any, message: string) {
  const userId = ctx.from?.id;
  
  try {
    await ctx.reply("üß† –î—É–º–∞—é...");
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBalance = await aiManager.getUserBalance(userId);
    const userContext = { telegramId: userId, currentTokens: userBalance };
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
    const messages: ChatMessage[] = [
      { role: 'user', content: message }
    ];
    
    const result = await aiManager.chatWithAI(messages, 'gpt4', userContext);
    
    if (result.success && result.data?.content) {
      await ctx.reply(
        `üß† <b>ChatGPT-4:</b>\n\n${result.data.content}\n\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.tokensUsed}\n\nüí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "—Å—Ç–æ–ø" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.`,
        { parse_mode: "HTML" }
      );
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ ChatGPT: ${result.error}`);
    }
    
  } catch (error) {
    console.error("‚ùå ChatGPT error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ ChatGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}


// üéØ –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô

// üé® –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
async function handleQuickImage(ctx: any, userId: number) {
  try {
    UXHelpers.updateUserPath(userId, 'quick_image');
    
    // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–µ—Ç —Ç–µ–∫—Å—Ç, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
    
    const message = `üé® <b>–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:\n\n` +
      `üí° <b>–°–æ–≤–µ—Ç:</b> Seedream –±—ã—Å—Ç—Ä–µ–µ, Flux Pro –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ`;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üî• Seedream v3 (–±—ã—Å—Ç—Ä–æ)', callback_data: 'freepik_img_seedream' },
          { text: '‚ö° Flux Pro (–∫–∞—á–µ—Å—Ç–≤–æ)', callback_data: 'freepik_img_flux-pro' }
        ],
        [
          { text: 'üìã –í—Å–µ –º–æ–¥–µ–ª–∏', callback_data: 'image_freepik' },
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };
    
    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard
    });
    
  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// üí¨ –ë—ã—Å—Ç—Ä—ã–π —á–∞—Ç
async function handleQuickChat(ctx: any, userId: number) {
  try {
    UXHelpers.updateUserPath(userId, 'quick_chat');
    
    const message = `üí¨ <b>AI –ß–∞—Ç</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞:\n\n` +
      `üí° <b>–ü—Ä–∏–º–µ—Ä:</b> "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"`;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üß† ChatGPT-4', callback_data: 'chat_gpt4' }
        ],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    };
    
    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    UXHelpers.setUserState(userId, {
      currentAction: 'waiting_chat_message',
      data: { service: 'gpt4' }
    });
    
  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// üñºÔ∏è Midjourney Menu
async function handleMidjourneyMenu(ctx: any, userId: number) {
  try {
    UXHelpers.updateUserPath(userId, 'midjourney');

    if (!midjourneyService.isConfigured()) {
      await ctx.editMessageText(
        `üñºÔ∏è <b>Midjourney</b>\n\n` +
        `‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.`,
        {
          parse_mode: "HTML",
          reply_markup: UXHelpers.getBackButton('back_to_main')
        }
      );
      return;
    }

    const models = midjourneyService.getAvailableModels();
    const popularModels = models.slice(0, 4); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏

    let message = `üñºÔ∏è <b>Midjourney - –ü—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</b>\n\n` +
      `üéØ –°–∞–º–∞—è –º–æ—â–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n` +
      `‚ú® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n\n` +
      `üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 7-8 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üî• Midjourney 7.0', callback_data: 'midjourney_7.0' },
          { text: '‚ö° Midjourney 6.1', callback_data: 'midjourney_6.1' }
        ],
        [
          { text: 'üìã –í—Å–µ –º–æ–¥–µ–ª–∏', callback_data: 'midjourney_all_models' },
          { text: 'üé® –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç', callback_data: 'midjourney_quick' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard
    });

  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// üñºÔ∏è Midjourney Generation
async function handleMidjourneyGeneration(ctx: any, userId: number, model: string) {
  try {
    UXHelpers.setUserState(userId, {
      currentAction: 'waiting_midjourney_prompt',
      data: { model }
    });

    const modelInfo = midjourneyService.getAvailableModels().find(m => m.id === model);
    const cost = modelInfo?.cost || 8;

    const message = `üñºÔ∏è <b>Midjourney ${model}</b>\n\n` +
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} —Ç–æ–∫–µ–Ω–æ–≤\n` +
      `üéØ –ú–æ–¥–µ–ª—å: ${modelInfo?.name || `Midjourney ${model}`}\n\n` +
      `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n` +
      `üí° <b>–ü—Ä–∏–º–µ—Ä:</b> "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º –≤ —Å—Ç–∏–ª–µ —Ñ—ç–Ω—Ç–µ–∑–∏"`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥–µ–ª—è–º', callback_data: 'midjourney_menu' },
          { text: 'üé® –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç', callback_data: 'midjourney_quick' }
        ]
      ]
    };

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard
    });

  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// üñºÔ∏è Midjourney Quick Start
async function handleMidjourneyQuick(ctx: any, userId: number) {
  try {
    UXHelpers.setUserState(userId, {
      currentAction: 'waiting_midjourney_prompt',
      data: { model: '7.0' } // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    });

    const message = `üé® <b>Midjourney - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</b>\n\n` +
      `üöÄ –ú–æ–¥–µ–ª—å: Midjourney 7.0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n` +
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 8 —Ç–æ–∫–µ–Ω–æ–≤\n\n` +
      `üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n` +
      `üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n` +
      `‚Ä¢ "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º"\n` +
      `‚Ä¢ "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫"\n` +
      `‚Ä¢ "–º–∏–ª–∞—è –∫–æ—à–∫–∞ –≤ –∫–æ—Å–º–æ—Å–µ"`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥–µ–ª—è–º', callback_data: 'midjourney_menu' },
          { text: '‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å', callback_data: 'midjourney_all_models' }
        ]
      ]
    };

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard
    });

  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// üñºÔ∏è Midjourney Text Input Handler
async function handleMidjourneyTextInput(ctx: any, text: string, model: string) {
  const userId = ctx.from?.id;
  const startTime = Date.now();

  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
    const task = stateManager.createTask(userId, 'image', 'midjourney', text, { model });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: userId }
    });

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const modelInfo = midjourneyService.getAvailableModels().find(m => m.id === model);
    const cost = modelInfo?.cost || 8;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.tokens < cost) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${cost}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${user.tokens}`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const progressMsg = await ctx.reply('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');

    // –í—ã–∑—ã–≤–∞–µ–º Midjourney API
    const result = await midjourneyService.generateImage({
      prompt: text,
      model,
      userId: parseInt(user.id),
      telegramId: userId
    });

    const duration = Math.floor((Date.now() - startTime) / 1000);

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    try {
      await ctx.api.deleteMessage(progressMsg.chat.id, progressMsg.message_id);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    }

    if (result.success && result.taskId) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
      const message = `‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è!</b>\n\n` +
        `üìù –ü—Ä–æ–º–ø—Ç: "${text}"\n` +
        `üñºÔ∏è –ú–æ–¥–µ–ª—å: Midjourney ${model}\n` +
        `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${cost}\n\n` +
        `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 1-2 –º–∏–Ω—É—Ç—ã.\n` +
        `üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`;

      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ï—â–µ –æ–¥–Ω–æ', callback_data: 'midjourney_quick' },
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'back_to_main' }]
          ]
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      await UXHelpers.sendSuccessNotification(ctx, {
        tokensUsed: cost,
        service: `Midjourney ${model}`,
        duration,
        repeatAction: 'midjourney_quick'
      });

    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(`‚ùå ${result.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'midjourney_7.0' },
              { text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'back_to_main' }
            ]
          ]
        }
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏
    stateManager.updateTask(task.id, {
      status: result.success ? 'processing' : 'failed',
      result: result.taskId,
      error: result.error,
      completedAt: new Date()
    });

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    UXHelpers.clearUserState(userId);

  } catch (error) {
    console.error("‚ùå Midjourney generation error:", error);
    await UXHelpers.sendSmartErrorNotification(ctx, error);
    UXHelpers.clearUserState(userId);
  }
}

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async function handleStats(ctx: any, userId: number) {
  try {
    UXHelpers.updateUserPath(userId, 'stats');
    
    const stats = await UXHelpers.getUserStats(userId);
    const queueStats = taskQueue.getQueueStats();
    
    logger.info('Stats retrieved:', { 
      userId, 
      stats, 
      queueStats,
      hasStats: !!stats
    });
    
    let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n`;
    
    if (stats) {
      message += `üë§ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
        `üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats.totalGenerations}\n` +
        `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${stats.tokensSpent}\n` +
        `üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.currentBalance}\n` +
        `üèÜ –õ—é–±–∏–º—ã–π —Å–µ—Ä–≤–∏—Å: ${stats.favoriteService}\n\n`;
    } else {
      logger.warn('No stats found for user:', userId);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const systemStats = await prisma.generationHistory.groupBy({
      by: ['status'],
      _count: { status: true }
    });
    
    const completedCount = systemStats.find(s => s.status === 'completed')?._count.status || 0;
    const failedCount = systemStats.find(s => s.status === 'failed')?._count.status || 0;
    const processingCount = systemStats.find(s => s.status === 'processing')?._count.status || 0;
    
    message += `üåê <b>–°–∏—Å—Ç–µ–º–∞:</b>\n` +
      `‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: ${queueStats.pending}\n` +
      `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: ${processingCount}\n` +
      `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedCount}\n` +
      `‚ùå –û—à–∏–±–æ–∫: ${failedCount}`;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'stats' },
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try {
      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });
    }
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await ctx.answerCallbackQuery();
    
  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏
async function handleMyTasks(ctx: any, userId: number) {
  try {
    const userTasks = taskQueue.getUserTasks(userId);
    const activeTasks = userTasks.filter(t => t.status === 'processing' || t.status === 'pending');
    
    if (activeTasks.length === 0) {
      await ctx.editMessageText(
        "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b>\n\n‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              ...getNavigationButtons()
            ]
          }
        }
      );
      return;
    }
    
    let message = "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b>\n\n";
    
    activeTasks.forEach((task, index) => {
      const emoji = task.type === 'video' ? 'üé¨' : 'üé®';
      const statusEmoji = task.status === 'processing' ? '‚è≥' : '‚è∏Ô∏è';
      message += `${index + 1}. ${emoji} ${statusEmoji} ${task.prompt.substring(0, 30)}...\n`;
      message += `   –ú–æ–¥–µ–ª—å: ${task.model || 'default'}\n`;
      message += `   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress}%\n\n`;
    });
    
    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          ...getNavigationButtons()
        ]
      }
    });
    
  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function handleBackToMain(ctx: any, userId: number) {
  try {
    // –û—á–∏—â–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UXHelpers.clearUserState(userId);
    stateManager.endSession(userId.toString());
    
    const message = `üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try {
      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: getMainMenu(userId)
      });
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: getMainMenu(userId)
      });
    }
    
  } catch (error) {
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try {
      await ctx.reply(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        { 
          parse_mode: "HTML",
          reply_markup: getMainMenu(userId) 
        }
      );
    } catch (fallbackError) {
      console.error('‚ùå Critical error returning to main menu:', fallbackError);
    }
  }
}

// üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
async function handleStopAction(ctx: any, userId: number) {
  try {
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stateManager.cancelUserTasks(userId);
    
    const message = `üõë <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.`;
    
    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: UXHelpers.getBackButton('back_to_main')
    });
    
  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
async function handleRetryLastAction(ctx: any, userId: number) {
  try {
    const repeatContext = stateManager.getRepeatContext(userId);
    
    if (repeatContext.task) {
      await taskQueue.retryTask(repeatContext.task.id);
      
      const message = `üîÑ <b>–ü–æ–≤—Ç–æ—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω</b>\n\n–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.`;
      
      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: UXHelpers.getBackButton('back_to_main')
      });
    } else {
      await ctx.reply("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.");
    }
    
  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä
async function handleCancelRetry(ctx: any, userId: number) {
  try {
    const userTasks = taskQueue.getUserTasks(userId);
    const pendingTasks = userTasks.filter(task => task.status === 'pending');
    
    for (const task of pendingTasks) {
      await taskQueue.cancelTask(task.id);
    }
    
    const message = `‚ùå <b>–ü–æ–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω—ã.`;
    
    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: UXHelpers.getBackButton('back_to_main')
    });
    
  } catch (error) {
    await UXHelpers.sendSmartErrorNotification(ctx, error);
  }
}

// üìä –ó–ê–ü–£–°–ö –ë–û–¢–ê
export async function startProductionBot() {
  try {
    console.log("üöÄ Starting production bot...");
    
    const me = await bot.api.getMe();
    console.log("‚úÖ Bot info:", me);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await setupBotCommands();
    
    await bot.start();
    console.log("‚úÖ Production bot started successfully!");
    
  } catch (error) {
    console.error("‚ùå Failed to start production bot:", error);
    throw error;
  }
}

// Graceful shutdown
process.on("SIGINT", async () => {
  console.log("üõë Shutting down bot...");
  await bot.stop();
  await prisma.$disconnect();
  process.exit(0);
});

// üé¨ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –í–ò–î–ï–û –ò–ó –§–û–¢–û

// üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è Runway ML (Image-to-Video)
async function handleRunwayPhoto(ctx: any) {
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    const file = await ctx.api.getFile(photo.file_id);
    const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
    
    console.log('üì∏ Runway photo received:', {
      userId,
      imageUrl: imageUrl.substring(0, 50) + '...'
    });

    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    // Runway —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type, –∞ Telegram –æ—Ç–¥–∞–µ—Ç application/octet-stream
    await ctx.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");
    
    const response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
    const base64Image = `data:image/jpeg;base64,${Buffer.from(response.data).toString('base64')}`;
    
    console.log('üì∏ Converted to base64:', base64Image.substring(0, 100) + '...');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
    UXHelpers.setUserState(userId, {
      currentAction: 'waiting_runway_prompt',
      data: { 
        service: 'runway',
        imageUrl: base64Image  // –¢–µ–ø–µ—Ä—å base64 –≤–º–µ—Å—Ç–æ URL
      }
    });

    await ctx.reply(
      "‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!</b>\n\n" +
      "üìù <b>–®–∞–≥ 2:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ\n\n" +
      "üí° –ü—Ä–∏–º–µ—Ä: \"–∫–∞–º–µ—Ä–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–¥–∞–ª—è–µ—Ç—Å—è, –∑–æ–ª–æ—Ç–æ–π —á–∞—Å\"\n" +
      "üí° –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \".\" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞",
      { parse_mode: "HTML" }
    );

  } catch (error: any) {
    console.error('‚ùå Error handling Runway photo:', error);
    await ctx.reply(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      { reply_markup: getMainMenu(ctx.from?.id) }
    );
  }
}

// üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Runway ML (Image-to-Video)
async function handleRunwayPrompt(ctx: any, prompt: string) {
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    const userState = UXHelpers.getUserState(userId);
    
    if (!userState || !userState.data?.imageUrl) {
      await ctx.reply("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.");
      return;
    }

    const imageUrl = userState.data.imageUrl;
    const finalPrompt = prompt === '.' ? '' : prompt;

    console.log('üé¨ Starting Runway video generation:', {
      userId,
      imageUrl: imageUrl.substring(0, 50) + '...',
      prompt: finalPrompt.substring(0, 50)
    });

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UXHelpers.clearUserState(userId);

    await ctx.reply("üé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Runway ML... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.");

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await prisma.user.findUnique({
      where: { telegramId: userId }
    });

    if (!user) {
      await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Runway
    const result = await aiManager.generateVideo(
      finalPrompt,
      'runway',
      { telegramId: userId, currentTokens: user.tokens },
      { imageUrl: imageUrl }
    );

    if (result.success && result.data?.url) {
      await ctx.replyWithVideo(result.data.url, {
        caption: "‚úÖ <b>–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\nüöÄ –ú–æ–¥–µ–ª—å: Runway Gen-4 Turbo\nüìù –ü—Ä–æ–º–ø—Ç: " + (finalPrompt || "–±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞"),
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: getNavigationButtons()
        }
      });
    } else {
      await UXHelpers.sendSmartErrorNotification(
        ctx,
        result.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Runway",
        'generate_video'
      );
    }

  } catch (error: any) {
    console.error('‚ùå Error handling Runway prompt:', error);
    await UXHelpers.sendSmartErrorNotification(
      ctx,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ",
      'generate_video'
    );
  }
}

async function handleVideoFromPhoto(ctx: any, service: string) {
  try {
    const userId = ctx.from?.id;
    const userState = UXHelpers.getUserState(userId);
    
    if (!userState || userState.currentAction !== 'waiting_for_photo_video') {
      await ctx.reply("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    const file = await ctx.api.getFile(photo.file_id);
    const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
    
    const prompt = ctx.message.caption || "Create a cinematic video from this image";
    let model = userState.data?.model || 'kling_v2_5_pro';
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º callback ID –≤ FreepikService ID  
    const modelMapping: Record<string, string> = {
      'kling-v2-1-master': 'kling_v2_1_master',
      'kling-pro-v2-1': 'kling_v2_1_pro',
      'kling-std-v2-1': 'kling_v2_1_std',
      'kling-v2-5-pro': 'kling_v2_5_pro',
      'kling-v2': 'kling_v2',
      'kling-pro-1-6': 'kling_pro_1_6',
      'kling-std-1-6': 'kling_std_1_6',
      'kling-elements-pro-1-6': 'kling_elements_pro_1_6',
      'kling-elements-std-1-6': 'kling_elements_std_1_6',
      'minimax-hailuo-768p': 'minimax_hailuo_768p',
      'minimax-hailuo-1080p': 'minimax_hailuo_1080p',
      'pixverse-v5': 'pixverse_v5',
      'pixverse-v5-transition': 'pixverse_v5_transition',
      'seedance-pro-1080p': 'seedance_pro_1080p',
      'wan-v2-2-720p': 'wan_v2_2_720p'
    };
    model = modelMapping[model] || model;
    
    console.log('üé¨ Starting video generation from photo:', {
      userId,
      service,
      model,
      prompt: prompt.substring(0, 50)
    });

    await ctx.reply("üé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.");

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBalance = await aiManager.getUserBalance(userId);
    const userContext = { telegramId: userId, currentTokens: userBalance };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º FreepikService –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    const freepikService = new (await import('../services/ai/FreepikService')).FreepikService();
    
    const startTime = Date.now();
    const result = await freepikService.generateVideoFromImage(
      imageUrl,
      prompt,
      model as any,
      5 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
    );
    const duration = Math.round((Date.now() - startTime) / 1000);

    console.log('üé¨ Video generation result:', {
      success: result.success,
      taskId: result.data?.id,
      error: result.error
    });

    if (result.success && result.data?.id) {
      // –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π userId –∏–∑ –ë–î
      const user = await prisma.user.findUnique({
        where: { telegramId: userId }
      });

      if (!user) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        return;
      }

      // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ FreepikTask —Ç–∞–±–ª–∏—Ü—É –¥–ª—è webhook
      await prisma.freepikTask.create({
        data: {
          userId: user.id, // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          taskId: result.data.id,
          prompt,
          model,
          type: 'video',
          status: 'processing',
          cost: 10 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
        }
      });

      console.log('‚úÖ FreepikTask saved to DB:', {
        taskId: result.data.id,
        userId: user.id,
        telegramId: userId,
        model,
        type: 'video'
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
      const task = await taskQueue.addTask({
        id: `video_${Date.now()}_${userId}`,
        userId,
        service: 'freepik',
        type: 'video',
        prompt,
        model,
        imageUrl,
        taskId: result.data.id,
        status: 'processing',
        progress: 0,
        createdAt: new Date()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      await ctx.reply(
        `‚úÖ <b>–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è!</b>\n\nüìù –ü—Ä–æ–º–ø—Ç: "${prompt}"\nüé¨ –ú–æ–¥–µ–ª—å: ${getVideoModelName(model)}\n\n‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 2-5 –º–∏–Ω—É—Ç\n\nüí° <i>–í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ</i>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ', callback_data: 'photo_to_video_menu' },
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
              ],
              ...getNavigationButtons()
            ]
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      UXHelpers.clearUserState(userId);
      
      // –í–ê–ñ–ù–û: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ webhook!
      // WebhookController –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Freepik –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    } else {
      const errorMessage = result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ';
      await ctx.reply(`‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ</b>\n\n${errorMessage}`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'photo_to_video_menu' }],
              ...getNavigationButtons()
            ]
          }
        }
      );
    }

  } catch (error: any) {
    console.error('üé¨ Video generation error:', error);
    await ctx.reply(`‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ</b>\n\n${error.message}`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'photo_to_video_menu' }],
            ...getNavigationButtons()
          ]
        }
      }
    );
  }
}

async function handleGPTVision(ctx: any) {
  try {
    const userId = ctx.from?.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    const file = await ctx.api.getFile(photo.file_id);
    const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
    
    const prompt = ctx.message.caption || "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ";
    
    await ctx.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");
    
    const chatgptService = new (await import('../services/ai/OpenAIService')).OpenAIService();
    const result = await chatgptService.analyzeImage(imageUrl, prompt);
    
    if (result.success && result.content) {
      await ctx.reply(`üì∏ <b>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è GPT-4V:</b>\n\n${result.content}`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –ï—â–µ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑', callback_data: 'start_vision_chat' }],
              ...getNavigationButtons()
            ]
          }
        }
      );
    } else {
      await ctx.reply(`‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'start_vision_chat' }],
              ...getNavigationButtons()
            ]
          }
        }
      );
    }

  } catch (error: any) {
    console.error('üîç GPT Vision error:', error);
    await ctx.reply(`‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n${error.message}`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'start_vision_chat' }],
            ...getNavigationButtons()
          ]
        }
      }
    );
  }
}

// üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function getProgressBar(percent: number): string {
  const filled = Math.floor(percent / 10);
  const empty = 10 - filled;
  const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  return `${bar} ${percent}%`;
}

// üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á
async function monitorTaskProgress(
  chatId: number,
  messageId: number,
  taskId: string,
  taskType: 'image' | 'video',
  service: string,
  model: string,
  prompt: string,
  checkStatusFn: () => Promise<any>,
  onComplete: (result: any) => Promise<void>
) {
  let progress = 0;
  let attempts = 0;
  const maxAttempts = taskType === 'video' ? 60 : 30; // 5 –º–∏–Ω –¥–ª—è –≤–∏–¥–µ–æ, 2.5 –º–∏–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  
  const interval = setInterval(async () => {
    attempts++;
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (0% ‚Üí 90%)
    if (progress < 90) {
      progress = Math.min(90, Math.floor((attempts / maxAttempts) * 90));
    }
    
    try {
      const status = await checkStatusFn();
      
      console.log(`üîÑ Task progress check (${attempts}/${maxAttempts}):`, {
        taskId,
        taskType,
        service,
        model,
        status: status?.data?.status,
        hasResult: !!(status?.data?.videos?.length || status?.data?.images?.length)
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
      const isCompleted = status.success && status.data?.status === 'completed';
      const hasResult = taskType === 'video' 
        ? status.data?.videos?.length 
        : status.data?.images?.length;
      
      if (isCompleted && hasResult) {
        clearInterval(interval);
        await onComplete(status);
        return;
      }
      
      if (status.data?.status === 'failed') {
        clearInterval(interval);
        
        await bot.api.editMessageText(
          chatId,
          messageId,
          `‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\nüìù –ü—Ä–æ–º–ø—Ç: "${prompt}"\n\n${status.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç'}`,
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: taskType === 'video' ? 'photo_to_video_menu' : 'quick_image' }],
                ...getNavigationButtons()
              ]
            }
          }
        ).catch(() => {});
        
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–∏–¥–µ–æ, 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const updateInterval = taskType === 'video' ? 3 : 2;
      if (attempts % updateInterval === 0) {
        const emoji = taskType === 'video' ? 'üé¨' : 'üé®';
        const typeText = taskType === 'video' ? '–≤–∏–¥–µ–æ' : '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
        const modelName = taskType === 'video' ? getVideoModelName(model) : model;
        
        await bot.api.editMessageText(
          chatId,
          messageId,
          `${emoji} <b>–°–æ–∑–¥–∞—é ${typeText}...</b>\n\nüìù –ü—Ä–æ–º–ø—Ç: "${prompt}"\nüé® –ú–æ–¥–µ–ª—å: ${modelName}\n\n${getProgressBar(progress)}\n\n‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ~${Math.ceil((maxAttempts - attempts) * 5 / 60)} –º–∏–Ω`,
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                ...getNavigationButtons()
              ]
            }
          }
        ).catch(() => {});
      }
      
    } catch (error) {
      console.error('Error checking task progress:', error);
    }
    
    // –¢–∞–π–º–∞—É—Ç
    if (attempts >= maxAttempts) {
      clearInterval(interval);
      
      await bot.api.editMessageText(
        chatId,
        messageId,
        `‚è±Ô∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏</b>\n\nüìù –ü—Ä–æ–º–ø—Ç: "${prompt}"\n\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'my_tasks' }],
              ...getNavigationButtons()
            ]
          }
        }
      ).catch(() => {});
    }
    
  }, 5000);
}

// üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
async function monitorVideoProgress(ctx: any, messageId: number, taskId: string, model: string, prompt: string, userId: number) {
  const freepikService = new (await import('../services/ai/FreepikService')).FreepikService();
  
  await monitorTaskProgress(
    ctx.chat.id,
    messageId,
    taskId,
    'video',
    'freepik',
    model,
    prompt,
    () => freepikService.checkTaskStatus(taskId, 'video', model),
    async (status) => {
      const videoUrl = status.data.videos[0].url;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.api.editMessageText(
        ctx.chat.id,
        messageId,
        `‚úÖ <b>–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\n${getProgressBar(100)}\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...`,
        { parse_mode: "HTML" }
      ).catch(() => {});
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ
      await bot.api.sendVideo(ctx.chat.id, videoUrl, {
        caption: `üé¨ <b>–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\nüìù "${prompt}"\nüé® ${getVideoModelName(model)}`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ï—â–µ –æ–¥–Ω–æ', callback_data: 'photo_to_video_menu' },
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
            ],
            ...getNavigationButtons()
          ]
        }
      });
    }
  );
}


function getVideoModelName(modelId: string): string {
  const models: Record<string, string> = {
    'kling_v2_5_pro': 'Kling 2.5 Pro',
    'kling_v2_1_master': 'Kling 2.1 Master',
    'kling_v2_1_pro': 'Kling 2.1 Pro',
    'kling_v2_1_std': 'Kling 2.1 Standard',
    'kling_v2': 'Kling v2',
    'kling_pro_1_6': 'Kling Pro 1.6',
    'kling_std_1_6': 'Kling Std 1.6',
    'kling_elements_pro_1_6': 'Kling Elements Pro 1.6',
    'kling_elements_std_1_6': 'Kling Elements Std 1.6',
    'minimax_hailuo_768p': 'MiniMax Hailuo 768p',
    'minimax_hailuo_1080p': 'MiniMax Hailuo 1080p',
    'pixverse_v5': 'PixVerse V5',
    'pixverse_v5_transition': 'PixVerse V5 Transition',
    'seedance_pro_1080p': 'Seedance Pro 1080p',
    'wan_v2_2_720p': 'Wan v2.2 720p',
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö ID —Å –¥–µ—Ñ–∏—Å–∞–º–∏
    'kling-v2-1-master': 'Kling 2.1 Master',
    'kling-pro-v2-1': 'Kling 2.1 Pro',
    'kling-std-v2-1': 'Kling 2.1 Standard'
  };
  return models[modelId] || modelId;
}

export { bot };

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ —Å –∞–ª–∏–∞—Å–æ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { startProductionBot as startBot };

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ import)
if (require.main === module) {
  startProductionBot().catch(console.error);
}

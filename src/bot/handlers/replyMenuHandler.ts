import { Context } from "grammy";
import { logger } from "../../utils/logger";
import { prisma } from "../../utils/prismaClient";
import { UXHelpers } from "../utils/UXHelpers";
import * as replyKeyboards from "../keyboards/replyKeyboard";

/**
 * üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö REPLY KEYBOARD –ú–ï–ù–Æ
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
 */
export class ReplyMenuHandler {
  
  /**
   * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç Reply Keyboard
   */
  static async handleMenuCommand(ctx: Context, text: string) {
    const userId = ctx.from?.id;
    if (!userId) return false;

    logger.info(`üì± Menu command: "${text}" from user ${userId}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await prisma.user.findUnique({
      where: { telegramId: userId },
      select: { tokens: true, subscription: true }
    });

    const userTokens = user?.tokens || 0;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    switch (text) {
      // ========== AI –°–ï–†–í–ò–°–´ ==========
      case "üí° ChatGPT":
        await this.handleChatGPT(ctx, userId);
        return true;

      case "üåÑ Midjourney":
        await this.handleMidjourney(ctx, userId);
        return true;

      case "üé® Freepik":
        await this.handleFreepik(ctx, userId);
        return true;

      case "üé¨ Runway":
        await this.handleRunway(ctx, userId);
        return true;

      case "üìπ Kling":
        await this.handleKling(ctx, userId);
        return true;

      // ========== –ü–†–û–§–ò–õ–¨ –ò –ë–ê–õ–ê–ù–° ==========
      case "üí∞ –ë–∞–ª–∞–Ω—Å":
        await this.handleBalance(ctx, userId, userTokens);
        return true;

      case "üìä –ü—Ä–æ—Ñ–∏–ª—å":
        await this.handleProfile(ctx, userId, user);
        return true;

      case "‚ùì –ü–æ–º–æ—â—å":
        await this.handleHelp(ctx);
        return true;

      // ========== –í–û–ó–í–†–ê–¢ –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
      case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await this.handleBackToMain(ctx, userId);
        return true;

      // ========== –ü–û–î–ú–ï–ù–Æ ==========
      // ChatGPT –ø–æ–¥–º–µ–Ω—é
      case "üí¨ –ù–æ–≤—ã–π —á–∞—Ç":
        await this.handleNewChat(ctx, userId);
        return true;

      case "üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await this.handleContinueChat(ctx, userId);
        return true;

      case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPT":
        await this.handleGPTSettings(ctx, userId);
        return true;

      // Midjourney –ø–æ–¥–º–µ–Ω—é
      case "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        await this.handleCreateImage(ctx, userId, "midjourney");
        return true;

      case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MJ":
        await this.handleMJSettings(ctx, userId);
        return true;

      // Freepik –ø–æ–¥–º–µ–Ω—é
      case "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        await this.handleCreateImage(ctx, userId, "freepik");
        return true;

      case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Freepik":
        await this.handleFreepikSettings(ctx, userId);
        return true;

      case "üìö –°—Ç–∏–ª–∏":
        await this.handleFreepikStyles(ctx, userId);
        return true;

      // Runway –ø–æ–¥–º–µ–Ω—é
      case "üé• –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ":
        await this.handleCreateVideo(ctx, userId, "runway");
        return true;

      case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Runway":
        await this.handleRunwaySettings(ctx, userId);
        return true;

      // Kling –ø–æ–¥–º–µ–Ω—é
      case "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ":
        await this.handleCreateVideo(ctx, userId, "kling");
        return true;

      case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kling":
        await this.handleKlingSettings(ctx, userId);
        return true;

      // –ë–∞–ª–∞–Ω—Å –ø–æ–¥–º–µ–Ω—é
      case "üí≥ –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã":
        await this.handleBuyTokens(ctx, userId);
        return true;

      case "üìä –ò—Å—Ç–æ—Ä–∏—è":
        await this.handleHistory(ctx, userId);
        return true;

      case "üéÅ –ü–æ–¥–ø–∏—Å–∫–∞":
        await this.handleSubscription(ctx, userId);
        return true;

      // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–º–µ–Ω—é
      case "üí∞ –¢–æ–∫–µ–Ω—ã":
        await this.handleTokensInfo(ctx, userId, userTokens);
        return true;

      case "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await this.handleStatistics(ctx, userId);
        return true;

      case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await this.handleSettings(ctx, userId);
        return true;

      default:
        return false;
    }
  }

  // ========================================
  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
  // ========================================

  static async handleChatGPT(ctx: Context, userId: number) {
    await ctx.reply(
      "üí° <b>ChatGPT</b>\n\n" +
      "ü§ñ –£–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤\n" +
      "üéØ –ú–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å:\n" +
      "‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n" +
      "‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤\n" +
      "‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n" +
      "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–æ–º\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: replyKeyboards.chatGPTKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleMidjourney(ctx: Context, userId: number) {
    await ctx.reply(
      "üåÑ <b>Midjourney</b>\n\n" +
      "üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n" +
      "üíé –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n" +
      "‚ö° –°—Ç–æ–∏–º–æ—Å—Ç—å: 8 —Ç–æ–∫–µ–Ω–æ–≤\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: replyKeyboards.midjourneyKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleFreepik(ctx: Context, userId: number) {
    await ctx.reply(
      "üé® <b>Freepik AI</b>\n\n" +
      "üñºÔ∏è 30+ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n" +
      "‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n" +
      "üí∞ –û—Ç 2 —Ç–æ–∫–µ–Ω–æ–≤\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: replyKeyboards.freepikKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleRunway(ctx: Context, userId: number) {
    await ctx.reply(
      "üé¨ <b>Runway</b>\n\n" +
      "üé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n" +
      "‚ö° –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n" +
      "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 15 —Ç–æ–∫–µ–Ω–æ–≤\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: replyKeyboards.runwayKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleKling(ctx: Context, userId: number) {
    await ctx.reply(
      "üìπ <b>Kling AI</b>\n\n" +
      "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n" +
      "‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n" +
      "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 12 —Ç–æ–∫–µ–Ω–æ–≤\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: replyKeyboards.klingKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleBalance(ctx: Context, userId: number, tokens: number) {
    const stats = await UXHelpers.getUserStats(userId);
    
    await ctx.reply(
      "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n" +
      `üíé –¢–æ–∫–µ–Ω–æ–≤: ${tokens}\n` +
      `üìä –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats?.totalSpent || 0}\n` +
      `üé® –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats?.totalGenerations || 0}\n\n` +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: replyKeyboards.balanceKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleProfile(ctx: Context, userId: number, user: any) {
    const stats = await UXHelpers.getUserStats(userId);
    
    await ctx.reply(
      "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n" +
      `üí∞ –¢–æ–∫–µ–Ω—ã: ${user?.tokens || 0}\n` +
      `üìä –ü–æ–¥–ø–∏—Å–∫–∞: ${user?.subscription || "–ë–∞–∑–æ–≤–∞—è"}\n` +
      `üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats?.totalGenerations || 0}\n\n` +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        reply_markup: replyKeyboards.profileKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleHelp(ctx: Context) {
    await ctx.reply(
      "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n" +
      "ü§ñ <b>AICEX One</b> - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI-–±–æ—Ç\n\n" +
      "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:</b>\n" +
      "‚Ä¢ üí° ChatGPT - AI-–¥–∏–∞–ª–æ–≥–∏\n" +
      "‚Ä¢ üåÑ Midjourney - —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n" +
      "‚Ä¢ üé® Freepik - 30+ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n" +
      "‚Ä¢ üé¨ Runway - —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ\n" +
      "‚Ä¢ üìπ Kling - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n\n" +
      "üí∞ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–∫–µ–Ω—ã:</b>\n" +
      "–ö–∞–∂–¥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–∏—Ç —Ç–æ–∫–µ–Ω—ã\n" +
      "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n" +
      "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @aicex_support",
      {
        reply_markup: replyKeyboards.mainMenuKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleBackToMain(ctx: Context, userId: number) {
    const user = await prisma.user.findUnique({
      where: { telegramId: userId },
      select: { tokens: true }
    });

    await ctx.reply(
      "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n" +
      `üí∞ –í–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${user?.tokens || 0}\n\n` +
      "–í—ã–±–µ—Ä–∏—Ç–µ AI-—Å–µ—Ä–≤–∏—Å:",
      {
        reply_markup: replyKeyboards.mainMenuKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  // ========================================
  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ú–ï–ù–Æ
  // ========================================

  static async handleNewChat(ctx: Context, userId: number) {
    UXHelpers.setUserState(userId, {
      currentAction: "waiting_for_chat_message",
      data: { service: "chatgpt", isNewChat: true }
    });

    await ctx.reply(
      "üí¨ <b>–ù–æ–≤—ã–π —á–∞—Ç —Å ChatGPT</b>\n\n" +
      "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
      {
        reply_markup: replyKeyboards.backToMainKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleContinueChat(ctx: Context, userId: number) {
    UXHelpers.setUserState(userId, {
      currentAction: "waiting_for_chat_message",
      data: { service: "chatgpt", isNewChat: false }
    });

    await ctx.reply(
      "üìù <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥</b>\n\n" +
      "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
      {
        reply_markup: replyKeyboards.backToMainKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleGPTSettings(ctx: Context, userId: number) {
    const user = await prisma.user.findUnique({
      where: { telegramId: userId },
      select: { gptSettings: true }
    });

    const settings = user?.gptSettings as any;

    await ctx.reply(
      "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT</b>\n\n" +
      `ü§ñ –ú–æ–¥–µ–ª—å: ${settings?.model || "gpt-4"}\n` +
      `üé§ –ê—É–¥–∏–æ-–æ—Ç–≤–µ—Ç: ${settings?.audioResponse ? "–í–∫–ª" : "–í—ã–∫–ª"}\n` +
      `üó£Ô∏è –ì–æ–ª–æ—Å: ${settings?.voice || "alloy"}\n\n` +
      "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é",
      {
        reply_markup: replyKeyboards.chatGPTKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleCreateImage(ctx: Context, userId: number, service: string) {
    UXHelpers.setUserState(userId, {
      currentAction: "waiting_image_prompt",
      data: { service }
    });

    await ctx.reply(
      `üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${service})</b>\n\n` +
      "üìù –û–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:\n\n" +
      "üí° <i>–°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</i>",
      {
        reply_markup: replyKeyboards.backToMainKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleMJSettings(ctx: Context, userId: number) {
    await ctx.reply(
      "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Midjourney</b>\n\n" +
      "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é",
      {
        reply_markup: replyKeyboards.midjourneyKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleFreepikSettings(ctx: Context, userId: number) {
    await ctx.reply(
      "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Freepik</b>\n\n" +
      "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é",
      {
        reply_markup: replyKeyboards.freepikKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleFreepikStyles(ctx: Context, userId: number) {
    await ctx.reply(
      "üìö <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏ Freepik:</b>\n\n" +
      "‚Ä¢ üé® Artistic - —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å\n" +
      "‚Ä¢ üì∏ Photorealistic - —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º\n" +
      "‚Ä¢ üé≠ Anime - –∞–Ω–∏–º–µ —Å—Ç–∏–ª—å\n" +
      "‚Ä¢ üèõÔ∏è Classic - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π\n" +
      "‚Ä¢ üåà Colorful - —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞\n\n" +
      "–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏!",
      {
        reply_markup: replyKeyboards.freepikKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleCreateVideo(ctx: Context, userId: number, service: string) {
    UXHelpers.setUserState(userId, {
      currentAction: "waiting_video_prompt",
      data: { service }
    });

    await ctx.reply(
      `üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ (${service})</b>\n\n` +
      "üìù –û–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:\n\n" +
      "üí° <i>–°–æ–≤–µ—Ç: –û–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω—É, –¥–µ–π—Å—Ç–≤–∏–µ, —Å—Ç–∏–ª—å</i>",
      {
        reply_markup: replyKeyboards.backToMainKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleRunwaySettings(ctx: Context, userId: number) {
    await ctx.reply(
      "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Runway</b>\n\n" +
      "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é",
      {
        reply_markup: replyKeyboards.runwayKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleKlingSettings(ctx: Context, userId: number) {
    await ctx.reply(
      "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kling</b>\n\n" +
      "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é",
      {
        reply_markup: replyKeyboards.klingKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleBuyTokens(ctx: Context, userId: number) {
    const FRONTEND_URL = process.env.FRONTEND_URL || "https://aicexonefrontend-production.up.railway.app";
    
    await ctx.reply(
      "üí≥ <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n" +
      "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>\n\n" +
      "ü•â –°—Ç–∞—Ä—Ç–µ—Ä - 150‚ÇΩ (200 —Ç–æ–∫–µ–Ω–æ–≤)\n" +
      "ü•à –ü–æ–ø—É–ª—è—Ä–Ω—ã–π - 500‚ÇΩ (750 —Ç–æ–∫–µ–Ω–æ–≤)\n" +
      "ü•á –ü—Ä–æ—Ñ–∏ - 1000‚ÇΩ (1600 —Ç–æ–∫–µ–Ω–æ–≤)\n\n" +
      "üéÅ <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n" +
      "üíé Base - 500‚ÇΩ/–º–µ—Å\n" +
      "‚≠ê Pro - 1500‚ÇΩ/–º–µ—Å\n" +
      "üëë Premium - 3000‚ÇΩ/–º–µ—Å\n\n" +
      `üåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n${FRONTEND_URL}/buy-tokens`,
      {
        reply_markup: replyKeyboards.balanceKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleHistory(ctx: Context, userId: number) {
    const FRONTEND_URL = process.env.FRONTEND_URL || "https://aicexonefrontend-production.up.railway.app";
    
    await ctx.reply(
      "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n" +
      `üåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:\n${FRONTEND_URL}/history`,
      {
        reply_markup: replyKeyboards.balanceKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleSubscription(ctx: Context, userId: number) {
    const user = await prisma.user.findUnique({
      where: { telegramId: userId },
      select: { subscription: true }
    });

    const FRONTEND_URL = process.env.FRONTEND_URL || "https://aicexonefrontend-production.up.railway.app";

    await ctx.reply(
      "üéÅ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n\n" +
      `–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: ${user?.subscription || "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n` +
      "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n" +
      "üíé Base - 500‚ÇΩ/–º–µ—Å\n" +
      "‚Ä¢ 1000 —Ç–æ–∫–µ–Ω–æ–≤/–º–µ—Å—è—Ü\n" +
      "‚Ä¢ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n" +
      "‚≠ê Pro - 1500‚ÇΩ/–º–µ—Å\n" +
      "‚Ä¢ 3500 —Ç–æ–∫–µ–Ω–æ–≤/–º–µ—Å—è—Ü\n" +
      "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n" +
      "üëë Premium - 3000‚ÇΩ/–º–µ—Å\n" +
      "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n" +
      "‚Ä¢ –í—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏\n\n" +
      `üåê –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n${FRONTEND_URL}/subscription`,
      {
        reply_markup: replyKeyboards.balanceKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleTokensInfo(ctx: Context, userId: number, tokens: number) {
    await ctx.reply(
      "üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö</b>\n\n" +
      `üíé –£ –≤–∞—Å: ${tokens} —Ç–æ–∫–µ–Ω–æ–≤\n\n` +
      "üìä <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b>\n" +
      "‚Ä¢ ChatGPT - 1-3 —Ç–æ–∫–µ–Ω–∞/—Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
      "‚Ä¢ Freepik - 2-5 —Ç–æ–∫–µ–Ω–æ–≤/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n" +
      "‚Ä¢ Midjourney - 8 —Ç–æ–∫–µ–Ω–æ–≤/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n" +
      "‚Ä¢ Runway - 15 —Ç–æ–∫–µ–Ω–æ–≤/–≤–∏–¥–µ–æ\n" +
      "‚Ä¢ Kling - 12 —Ç–æ–∫–µ–Ω–æ–≤/–≤–∏–¥–µ–æ",
      {
        reply_markup: replyKeyboards.profileKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleStatistics(ctx: Context, userId: number) {
    const stats = await UXHelpers.getUserStats(userId);
    
    await ctx.reply(
      "üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n" +
      `üé® –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats?.totalGenerations || 0}\n` +
      `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${stats?.totalSpent || 0}\n` +
      `üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö: ${stats?.chatMessages || 0}\n` +
      `üìÖ –î–Ω–µ–π —Å –Ω–∞–º–∏: ${stats?.daysActive || 0}`,
      {
        reply_markup: replyKeyboards.profileKeyboard,
        parse_mode: "HTML"
      }
    );
  }

  static async handleSettings(ctx: Context, userId: number) {
    const FRONTEND_URL = process.env.FRONTEND_URL || "https://aicexonefrontend-production.up.railway.app";
    
    await ctx.reply(
      "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n" +
      `üåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n${FRONTEND_URL}/settings`,
      {
        reply_markup: replyKeyboards.profileKeyboard,
        parse_mode: "HTML"
      }
    );
  }
}


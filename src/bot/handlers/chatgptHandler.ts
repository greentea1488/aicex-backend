import { Context } from "grammy";
import { InlineKeyboard } from "grammy";
import { SessionManager } from "../services/SessionManager";
import { BaseAIHandler } from "./BaseAIHandler";
import { SecurityService } from "../../services/SecurityService";
import { 
  chatgptMainMenu, 
  chatgptModelsMenu, 
  chatgptImageModelsMenu,
  chatgptImageSettingsMenu,
  chatgptSettingsMenu,
  backToChatGPTMain
} from "../keyboards/chatgptKeyboard";
import { prisma } from "../../utils/prismaClient";
import { OpenAI } from "openai";

interface UserState {
  action?: string;
  model?: string;
  model_name?: string;
  image_size?: string;
  image_quality?: string;
  temperature?: number;
  max_tokens?: number;
  config?: any;
}

interface ChatGPTSettings {
  model?: string;
  temperature?: number;
  max_tokens?: number;
  system_prompt?: string;
  image_model?: string;
  image_size?: string;
  image_quality?: string;
}

export class ChatGPTHandler extends BaseAIHandler {
  private userStates: Map<string, UserState> = new Map();
  private securityService: SecurityService;
  private openai: OpenAI;

  constructor(sessionManager: SessionManager) {
    super(sessionManager);
    this.securityService = new SecurityService();
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || "",
    });
  }

  private setUserState(userId: string, state: Partial<UserState>) {
    const currentState = this.userStates.get(userId) || {};
    this.userStates.set(userId, { ...currentState, ...state });
  }

  private getUserState(userId: string): UserState {
    return this.userStates.get(userId) || {};
  }

  // ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ CHATGPT
  async showMainMenu(ctx: Context) {
    await this.safeEditMessage(ctx,
      "ü§ñ ChatGPT - AI Assistant\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
      { reply_markup: chatgptMainMenu }
    );
  }

  async handleCallback(ctx: Context, action: string): Promise<void> {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback actions
      switch (action) {
        case 'text_chat':
          await this.startTextChat(ctx);
          break;
        case 'image_gen':
          await this.showImageGenMenu(ctx);
          break;
        case 'image_analyze':
          await ctx.reply("üöß –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
          break;
        case 'model_settings':
          await ctx.reply("üöß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
          break;
        default:
          this.logger.warn(`Unknown ChatGPT callback action: ${action}`);
      }
    } catch (error) {
      await this.handleError(ctx, error as Error, `ChatGPT callback ${action}`);
    }
  }

  // üß† –í–´–ë–û–† –ú–û–î–ï–õ–ï–ô
  async showModelsMenu(ctx: Context) {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: parseInt(userId) },
    });

    const currentModel = (user?.gptSettings as any)?.model || "gpt-4o-mini";

    await ctx.editMessageText(
      `üß† –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ChatGPT\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${this.getModelDisplayName(currentModel)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å:`,
      { reply_markup: chatgptModelsMenu }
    );
  }

  // üé® –ú–ï–ù–Æ –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
  async showImageGenMenu(ctx: Context) {
    await ctx.editMessageText(
      "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL-E\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
      { reply_markup: chatgptImageModelsMenu }
    );
  }

  // üìé –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
  async showImageAnalyzeMenu(ctx: Context) {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    this.setUserState(userId, { action: 'image_analyze' });

    await ctx.editMessageText(
      "üìé –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π GPT-4V\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:",
      { reply_markup: backToChatGPTMain }
    );

    this.sessionManager.createSession(userId, 'chatgpt_vision');
  }

  // ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò CHATGPT
  async showSettingsMenu(ctx: Context) {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    const user = await prisma.user.findUnique({
      where: { telegramId: parseInt(userId) },
    });

    const settings = user?.gptSettings || {};

    await ctx.editMessageText(
      `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT\n\n` +
      `üß† –ú–æ–¥–µ–ª—å: ${this.getModelDisplayName((settings as any).model || "gpt-4o-mini")}\n` +
      `üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${(settings as any).temperature || 0.4}\n` +
      `üìè –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã: ${(settings as any).max_tokens || 2000}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`,
      { reply_markup: chatgptSettingsMenu }
    );
  }

  // üéØ –í–´–ë–û–† –ö–û–ù–ö–†–ï–¢–ù–û–ô –ú–û–î–ï–õ–ò
  async selectModel(ctx: Context, modelKey: string) {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    const modelMap: { [key: string]: { name: string, api_model: string, description: string } } = {
      'gpt-4o': { 
        name: 'GPT-4o', 
        api_model: 'gpt-4o', 
        description: '–ù–æ–≤–µ–π—à–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å' 
      },
      'gpt-4o-mini': { 
        name: 'GPT-4o Mini', 
        api_model: 'gpt-4o-mini', 
        description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å' 
      },
      'gpt-4-turbo': { 
        name: 'GPT-4 Turbo', 
        api_model: 'gpt-4-turbo', 
        description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4' 
      },
      'gpt-4': { 
        name: 'GPT-4', 
        api_model: 'gpt-4', 
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å' 
      },
      'gpt-3.5-turbo': { 
        name: 'GPT-3.5 Turbo', 
        api_model: 'gpt-3.5-turbo', 
        description: '–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å' 
      }
    };

    const selectedModel = modelMap[modelKey];
    if (!selectedModel) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      const existingUser = await prisma.user.findUnique({
        where: { telegramId: parseInt(userId) },
      });

      if (existingUser) {
        await prisma.user.update({
          where: { telegramId: parseInt(userId) },
          data: {
            gptSettings: {
              model: selectedModel.api_model,
              temperature: 0.4,
              max_tokens: 2000,
              systemPrompt: "You are a helpful assistant. Respond in Russian unless asked otherwise."
            }
          }
        });
      } else {
        await prisma.user.create({
          data: {
            telegramId: parseInt(userId),
            username: ctx.from?.username || "unknown",
            gptSettings: {
              model: selectedModel.api_model,
              temperature: 0.4,
              max_tokens: 2000,
              systemPrompt: "You are a helpful assistant. Respond in Russian unless asked otherwise."
            }
          }
        });
      }

      await ctx.answerCallbackQuery(`‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${selectedModel.name}`);
      
      await ctx.editMessageText(
        `‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n` +
        `üß† –í—ã–±—Ä–∞–Ω–∞: ${selectedModel.name}\n` +
        `üìù ${selectedModel.description}\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã ChatGPT –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å.`,
        { reply_markup: backToChatGPTMain }
      );

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:", error);
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫");
    }
  }

  // üé® –í–´–ë–û–† –ú–û–î–ï–õ–ò –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
  async selectImageModel(ctx: Context, modelKey: string) {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    const modelMap: { [key: string]: { name: string, api_model: string, description: string } } = {
      'dall-e-3': { 
        name: 'DALL-E 3', 
        api_model: 'dall-e-3', 
        description: '–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' 
      },
      'dall-e-2': { 
        name: 'DALL-E 2', 
        api_model: 'dall-e-2', 
        description: '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' 
      }
    };

    const selectedModel = modelMap[modelKey];
    if (!selectedModel) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å");
      return;
    }

    this.setUserState(userId, { 
      action: 'image_generation',
      model: selectedModel.api_model,
      model_name: selectedModel.name
    });

    await ctx.editMessageText(
      `üé® ${selectedModel.name} –≥–æ—Ç–æ–≤–∞!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:`,
      { reply_markup: backToChatGPTMain }
    );

    this.sessionManager.createSession(userId, 'chatgpt_image');
  }

  // üí¨ –¢–ï–ö–°–¢–û–í–´–ô –ß–ê–¢
  async startTextChat(ctx: Context) {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    const user = await prisma.user.findUnique({
      where: { telegramId: parseInt(userId) },
    });

    const modelName = this.getModelDisplayName(user?.gptSettings?.model || "gpt-4o-mini");

    await ctx.editMessageText(
      `üí¨ ChatGPT –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç\n\n–ú–æ–¥–µ–ª—å: ${modelName}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞:`,
      { reply_markup: backToChatGPTMain }
    );

    this.sessionManager.createSession(userId, 'chatgpt');
  }

  // üñºÔ∏è –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
  async generateImage(prompt: string, userId: string): Promise<string> {
    try {
      if (!this.openai.apiKey) {
        return "‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
      }

      const state = this.getUserState(userId);
      const model = state.model || "dall-e-3";
      const size = state.image_size || "1024x1024";
      const quality = state.image_quality || "standard";

      console.log(`–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${prompt} —Å –º–æ–¥–µ–ª—å—é ${model}`);

      const response = await this.openai.images.generate({
        model: model,
        prompt: prompt,
        n: 1,
        size: size as any,
        quality: quality as any,
      });

      const imageUrl = response.data?.[0]?.url;
      if (!imageUrl) {
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
      }

      return imageUrl;

    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
      
      if (error.code === 'content_policy_violation') {
        return "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.";
      }
      
      return `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`;
    }
  }

  // üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  private getModelDisplayName(modelKey: string): string {
    const modelNames: { [key: string]: string } = {
      'gpt-4o': 'GPT-4o (–ù–æ–≤–µ–π—à–∞—è)',
      'gpt-4o-mini': 'GPT-4o Mini (–ë—ã—Å—Ç—Ä–∞—è)',
      'gpt-4-turbo': 'GPT-4 Turbo',
      'gpt-4': 'GPT-4 (–ö–ª–∞—Å—Å–∏–∫–∞)',
      'gpt-3.5-turbo': 'GPT-3.5 Turbo (–≠–∫–æ–Ω–æ–º–Ω–∞—è)',
      'dall-e-3': 'DALL-E 3',
      'dall-e-2': 'DALL-E 2'
    };
    return modelNames[modelKey] || modelKey;
  }

  // üìä –ü–û–ö–ê–ó–ê–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ú–û–î–ï–õ–ò
  async showModelInfo(ctx: Context) {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    const user = await prisma.user.findUnique({
      where: { telegramId: parseInt(userId) },
    });

    const settings = user?.gptSettings || {};
    const model = (settings as any).model || "gpt-4o-mini";

    await ctx.editMessageText(
      `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏\n\n` +
      `üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${this.getModelDisplayName(model)}\n` +
      `üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${(settings as any).temperature || 0.4}\n` +
      `üìè –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã: ${(settings as any).max_tokens || 2000}\n\n` +
      `üí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (0.0-1.0)\n` +
      `üìè –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞`,
      { reply_markup: backToChatGPTMain }
    );
  }
}

import { Router } from "express";
import { prisma } from "../utils/prismaClient";
import { Bot } from "grammy";
import { logger } from "../utils/logger";
import crypto from "crypto";

const router = Router();

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
let bot: Bot | null = null;
if (process.env.BOT_TOKEN) {
  bot = new Bot(process.env.BOT_TOKEN);
} else {
  logger.warn("BOT_TOKEN not provided, Freepik webhook bot functionality will be disabled");
}

// üß™ TEST ENDPOINT - —Å–∏–º—É–ª—è—Ü–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
router.get("/test-webhook/:taskId", async (req, res) => {
  try {
    const { taskId } = req.params;
    console.log(`üß™ TEST: –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è task ${taskId}`);
    
    // –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const task = await prisma.freepikTask.findUnique({
      where: { taskId: taskId }
    });
    
    if (!task) {
      return res.status(404).json({ error: `Task ${taskId} not found` });
    }
    
    console.log(`üì¶ Found task for user ${task.userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (task.type === "video") {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ (–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π MP4 base64)
      const testVideoBase64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==";
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  
      await sendVideoToUser(task.userId, task.prompt, testVideoBase64, taskId, task.model);
    } else {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç 100x100)
      const testImageBase64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==";
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendImageToUser(task.userId, task.prompt, testImageBase64, taskId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    await prisma.freepikTask.update({
      where: { taskId: taskId },
      data: {
        status: "COMPLETED",
        response: JSON.stringify({ test: true, completed_at: new Date().toISOString() })
      }
    });
    
    res.json({ 
      message: "‚úÖ Test webhook processed successfully", 
      taskId,
      userId: task.userId,
      action: "Image sent to Telegram"
    });
  } catch (error) {
    console.error("‚ùå Test webhook error:", error);
    res.status(500).json({ error: error instanceof Error ? error.message : "Unknown error" });
  }
});

// Freepik webhook secret
const FREEPIK_WEBHOOK_SECRET = "32ee5e783f53d4fbb76c1b830c08b285";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ webhook —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Freepik
function verifyWebhookSignature(headers: any, body: string): boolean {
  const webhookId = headers['webhook-id'];
  const webhookTimestamp = headers['webhook-timestamp'];
  const webhookSignature = headers['webhook-signature'];

  if (!webhookId || !webhookTimestamp || !webhookSignature) {
    console.log("‚ùå Missing webhook headers");
    return false;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: webhook-id.webhook-timestamp.body
  const contentToSign = `${webhookId}.${webhookTimestamp}.${body}`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å –ø–æ–º–æ—â—å—é HMAC-SHA256
  const secretKeyBytes = Buffer.from(FREEPIK_WEBHOOK_SECRET, 'utf-8');
  const hmacBytes = crypto.createHmac('sha256', secretKeyBytes).update(contentToSign, 'utf-8').digest();
  const generatedSignature = Buffer.from(hmacBytes).toString('base64');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)
  const signatures = webhookSignature.split(' ');
  for (const signature of signatures) {
    const [version, expectedSignature] = signature.split(',');
    if (expectedSignature === generatedSignature) {
      console.log("‚úÖ Webhook signature verified");
      return true;
    }
  }

  console.log("‚ùå Webhook signature verification failed");
  console.log("Expected signatures:", signatures);
  console.log("Generated signature:", generatedSignature);
  return false;
}

// Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç Freepik
router.post("/webhook", async (req, res) => {
  try {
    console.log("üîî Freepik webhook received");
    console.log("Headers:", req.headers);
    
    const body = JSON.stringify(req.body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!verifyWebhookSignature(req.headers, body)) {
      logger.error("Webhook signature verification failed");
      return res.status(401).json({ error: "Unauthorized" });
    }
    
    console.log("üìã Webhook body:", body);
    const { task_id, status, data } = req.body;
    
    if (!task_id) {
      logger.error("Webhook missing task_id");
      return res.status(400).json({ error: "Missing task_id" });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const freepikTask = await prisma.freepikTask.findUnique({
      where: { taskId: task_id }
    });

    if (!freepikTask) {
      logger.error(`Task not found: ${task_id}`);
      return res.status(404).json({ error: "Task not found" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    await prisma.freepikTask.update({
      where: { taskId: task_id },
      data: { 
        status: status,
        response: JSON.stringify(req.body)
      }
    });

    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
    if (status === "COMPLETED" && data?.generated && data.generated.length > 0) {
      const generatedData = data.generated[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ
      if (freepikTask.type === "video") {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        if (generatedData.video_url) {
          await sendVideoUrlToUser(freepikTask.userId, freepikTask.prompt, generatedData.video_url, task_id, freepikTask.model);
        } else if (generatedData.base64) {
          await sendVideoToUser(freepikTask.userId, freepikTask.prompt, generatedData.base64, task_id, freepikTask.model);
        } else {
          logger.warn(`Video task ${task_id} completed but no video data found`);
        }
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        if (generatedData.base64) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await sendImageToUser(freepikTask.userId, freepikTask.prompt, generatedData.base64, task_id);
        } else if (generatedData.url) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          await sendImageUrlToUser(freepikTask.userId, freepikTask.prompt, generatedData.url, task_id);
        } else {
          logger.warn(`Image task ${task_id} completed but no image data found`);
        }
      }
    } else if (status === "FAILED") {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
      await sendErrorToUser(freepikTask.userId, freepikTask.prompt, task_id, data?.error || "Unknown error");
    }

    res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå Freepik webhook error:", error);
    logger.error("Freepik webhook error", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (base64) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendImageToUser(userId: string, prompt: string, base64Data: string, taskId: string) {
  try {
    if (!bot) {
      logger.error("Bot not initialized, cannot send image");
      return;
    }
    
    const imageBuffer = Buffer.from(base64Data, 'base64');
    
    await bot.api.sendPhoto(
      parseInt(userId),
      new (await import("grammy/types")).InputFile(imageBuffer, "freepik_generated.jpg"),
      {
        caption: 
          `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n` +
          `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
          `ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Freepik API\n` +
          `üìä Task ID: ${taskId}\n\n` +
          `‚ú® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!`,
      }
    );
    
    logger.info(`‚úÖ Image sent to user ${userId} for task ${taskId}`);
  } catch (error) {
    logger.error(`Failed to send image to user ${userId}:`, error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendImageUrlToUser(userId: string, prompt: string, imageUrl: string, taskId: string) {
  try {
    if (!bot) {
      logger.error("Bot not initialized, cannot send image URL");
      return;
    }
    
    await bot.api.sendMessage(
      parseInt(userId),
      `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n` +
      `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
      `ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Freepik API\n` +
      `üìä Task ID: ${taskId}\n\n` +
      `üñºÔ∏è [–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${imageUrl})\n\n` +
      `‚ú® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!`,
      { parse_mode: "Markdown" }
    );
    
    logger.info(`‚úÖ Image URL sent to user ${userId} for task ${taskId}`);
  } catch (error) {
    logger.error(`Failed to send image URL to user ${userId}:`, error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendErrorToUser(userId: string, prompt: string, taskId: string, errorMessage: string) {
  try {
    if (!bot) {
      logger.error("Bot not initialized, cannot send error message");
      return;
    }
    
    await bot.api.sendMessage(
      parseInt(userId),
      `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n` +
      `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
      `üìä Task ID: ${taskId}\n` +
      `üö´ –û—à–∏–±–∫–∞: ${errorMessage}\n\n` +
      `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n` +
      `‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç\n` +
      `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å\n` +
      `‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`,
    );
    
    logger.info(`üìß Error notification sent to user ${userId} for task ${taskId}`);
  } catch (error) {
    logger.error(`Failed to send error to user ${userId}:`, error);
  }
}

// üé¨ NEW: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ (base64) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendVideoToUser(userId: string, prompt: string, base64Data: string, taskId: string, model: string) {
  try {
    if (!bot) {
      logger.error("Bot not initialized, cannot send video");
      return;
    }
    
    const videoBuffer = Buffer.from(base64Data, 'base64');
    
    await bot.api.sendVideo(
      parseInt(userId),
      new (await import("grammy/types")).InputFile(videoBuffer, "freepik_generated.mp4"),
      {
        caption: 
          `üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\n` +
          `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
          `üé≠ –ú–æ–¥–µ–ª—å: ${model}\n` +
          `ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Freepik API\n` +
          `üìä Task ID: ${taskId}\n\n` +
          `‚ú® –í–∞—à–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!`,
        reply_markup: new (await import("grammy")).InlineKeyboard()
          .text("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", "freepik_video_gen")
          .row()
          .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start")
      }
    );
    
    logger.info(`‚úÖ Video sent to user ${userId} for task ${taskId}`);
  } catch (error) {
    logger.error(`Failed to send video to user ${userId}:`, error);
  }
}

// üé¨ NEW: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendVideoUrlToUser(userId: string, prompt: string, videoUrl: string, taskId: string, model: string) {
  try {
    if (!bot) {
      logger.error("Bot not initialized, cannot send video URL");
      return;
    }
    
    await bot.api.sendMessage(
      parseInt(userId),
      `üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\n` +
      `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
      `üé≠ –ú–æ–¥–µ–ª—å: ${model}\n` +
      `ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Freepik API\n` +
      `üìä Task ID: ${taskId}\n\n` +
      `üé• [–û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ](${videoUrl})\n\n` +
      `‚ú® –í–∞—à–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!`,
      { 
        parse_mode: "Markdown",
        reply_markup: new (await import("grammy")).InlineKeyboard()
          .text("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", "freepik_video_gen")
          .row()
          .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start")
      }
    );
    
    logger.info(`‚úÖ Video URL sent to user ${userId} for task ${taskId}`);
  } catch (error) {
    logger.error(`Failed to send video URL to user ${userId}:`, error);
  }
}

export default router;

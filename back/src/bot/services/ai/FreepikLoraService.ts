import axios from "axios";
import { BaseAIService, AIMessage, AIResponse } from "./BaseAIService";
import { prisma } from "../../../utils/prismaClient";

export class FreepikLoraService extends BaseAIService {
  private apiUrl: string;
  private apiKey: string;

  constructor() {
    super();
    // Freepik Pikaso API endpoint
    this.apiUrl = process.env.FREEPIK_API_URL || "https://api.freepik.com/v1";
    this.apiKey = process.env.FREEPIK_API_KEY || "";
  }

  getName(): string {
    return "Freepik + Lora";
  }

/*************  ‚ú® Windsurf Command ‚≠ê  *************/
  /**
   * Validates the configuration by checking if both the API key and URL are
   * defined.
   *
   * @return {boolean} True if the API key and URL are defined, false otherwise.
   */
/*******  a161da98-a343-44e6-8082-1aeab939f6c8  *******/
  validateConfig(): boolean {
    if (!this.apiKey || this.apiKey === "") {
      console.error("Freepik API key is not configured");
      return false;
    }
    if (!this.apiUrl) {
      console.error("Freepik API URL is not configured");
      return false;
    }
    return true;
  }

  async chat(messages: AIMessage[], userId: string): Promise<AIResponse> {
    try {
      // Get the last user message as the prompt
      const userMessages = messages.filter(m => m.role === "user");
      const prompt = userMessages[userMessages.length - 1]?.content;

      if (!prompt) {
        throw new Error("No prompt provided");
      }

      // Check if this is an image generation request
      if (this.isImageGenerationRequest(prompt)) {
        return await this.generateImage(prompt, userId);
      } else {
        // For non-image requests, provide guidance
        if (!this.apiKey || this.apiKey === "") {
          return {
            content:
              "üé® Freepik + Lora - AI Image Generator\n\n" +
              "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n" +
              "üîß –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n" +
              "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –Ω–∞ freepik.com\n" +
              "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å FREEPIK_API_KEY\n" +
              "‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n" +
              "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ AI —Å–µ—Ä–≤–∏—Å—ã:\n" +
              "‚Ä¢ Midjourney –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n" +
              "‚Ä¢ ChatGPT –¥–ª—è —Ç–µ–∫—Å—Ç–∞\n" +
              "‚Ä¢ Kling –¥–ª—è –≤–∏–¥–µ–æ",
          };
        }

        return {
          content:
            "üé® Freepik + Lora - AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n" +
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LoRA –º–æ–¥–µ–ª–µ–π!\n\n" +
            "üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n" +
            "‚Ä¢ '–ü–æ—Ä—Ç—Ä–µ—Ç –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ'\n" +
            "‚Ä¢ '–ü–µ–π–∑–∞–∂ –∞–∫–≤–∞—Ä–µ–ª—å—é'\n" +
            "‚Ä¢ '–§–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç—Å–∫–æ–º —Å—Ç–∏–ª–µ'\n" +
            "‚Ä¢ '–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤ –ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç —Å—Ç–∏–ª–µ'\n\n" +
            "üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ LoRA:\n" +
            "‚Ä¢ Anime/Manga\n" +
            "‚Ä¢ Watercolor (–∞–∫–≤–∞—Ä–µ–ª—å)\n" +
            "‚Ä¢ Oil Painting (–º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å)\n" +
            "‚Ä¢ Pixel Art (–ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç)\n" +
            "‚Ä¢ Photorealistic (—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º)\n" +
            "‚Ä¢ Abstract (–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è)\n\n" +
            "üí¨ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
        };
      }
    } catch (error) {
      console.error("Freepik Lora Service Error:", error);
      throw new Error("Failed to process Freepik + Lora request");
    }
  }

  private isImageGenerationRequest(prompt: string): boolean {
    const imageKeywords = ["create", "generate", "draw", "paint", "design", "style", "portrait", "landscape"];
    const lowerPrompt = prompt.toLowerCase();

    // If prompt is descriptive and longer than 10 characters, assume it's an image request
    if (prompt.length > 10 && !lowerPrompt.match(/^(what|how|why|when|where|who|is|are|can|could|should)/)) {
      return true;
    }

    return imageKeywords.some(keyword => lowerPrompt.includes(keyword));
  }

  private async generateImage(prompt: string, userId: string): Promise<AIResponse> {
    try {
      // Check if API key is configured
      if (!this.apiKey || this.apiKey === "") {
        return {
          content: 
            "‚ùå Freepik API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n" +
            "üîß –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Freepik API –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n" +
            "1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –Ω–∞ freepik.com\n" +
            "2. –î–æ–±–∞–≤–∏—Ç—å FREEPIK_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n" +
            "3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n\n" +
            "üí° –ü–æ–∫–∞ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã:\n" +
            "‚Ä¢ ChatGPT –¥–ª—è —Ç–µ–∫—Å—Ç–∞\n" +
            "‚Ä¢ Midjourney –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n" +
            "‚Ä¢ Kling –¥–ª—è –≤–∏–¥–µ–æ\n" +
            "‚Ä¢ Runway –¥–ª—è –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞",
        };
      }

      // Get user settings
      const user = await prisma.user.findUnique({
        where: { telegramId: parseInt(userId) },
      });

      // Detect Lora style from prompt
      const loraStyle = this.detectLoraStyle(prompt);

      // Use correct Freepik API structure (simplified without custom styles)
      // –ü–æ–∫–∞ –±–µ–∑ webhook URL - –±—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π endpoint
    // const webhookUrl = process.env.FRONTEND_URL?.replace(/\/$/, '') + "/api/freepik/webhook";
      
      const requestData = {
        prompt: prompt.trim(),
        aspect_ratio: "square_1_1",
        resolution: "2k",
        model: "realism",
        creative_detailing: 33,
        engine: "automatic",
        fixed_generation: false,
        filter_nsfw: true,
        // webhook_url: webhookUrl // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // Removed styling section to avoid "Invalid style name" error
      };

      console.log("Making Freepik API request:", {
        url: `${this.apiUrl}/ai/mystic`,
        data: requestData
      });

      // Use correct Freepik API headers
      const headers = {
        "Content-Type": "application/json",
        "x-freepik-api-key": this.apiKey
      };

      console.log("Headers being sent:", headers);
      console.log("Making request to:", `${this.apiUrl}/ai/mystic`);

      const response = await axios.post(
        `${this.apiUrl}/ai/mystic`,
        requestData,
        {
          headers,
          timeout: 60000, // Increase timeout for image generation
        }
      );

      console.log("Freepik API response:", response.data);

      // Handle Freepik Mystic API response
      if (response.data) {
        // Check if response has data object (new structure)
        if (response.data.data) {
          const taskData = response.data.data;
          
          // Check if it's a task response with task_id - save to database and return success
          if (taskData.task_id) {
            const taskId = taskData.task_id;
            console.log(`‚úÖ Task created successfully: ${taskId}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ webhook
            try {
              await prisma.freepikTask.create({
                data: {
                  taskId: taskId,
                  userId: userId,
                  prompt: prompt,
                  model: "realism", // Default model for now
                  status: taskData.status || "CREATED"
                }
              });
              console.log(`üíæ Task ${taskId} saved to database for user ${userId}`);
            } catch (dbError) {
              console.error("Failed to save task to database:", dbError);
              // Continue anyway - webhook might still work
            }
            
            // Return immediate success with webhook info
            return {
              content:
                `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\n` +
                `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
                `üé≠ –°—Ç–∏–ª—å: ${loraStyle}\n` +
                `üìä Task ID: ${taskId}\n` +
                `‚úÖ –°—Ç–∞—Ç—É—Å: –ü—Ä–∏–Ω—è—Ç–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\n` +
                `üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n` +
                `‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –æ–±—ã—á–Ω–æ 30-90 —Å–µ–∫—É–Ω–¥\n` +
                `üîî –ì–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n` +
                `üîÑ –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∫–∞ –∂–¥–µ—Ç–µ\n\n` +
                `üìß Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n` +
                `üéØ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏!`
            };
          }
          
          // Check if it has generated images
          if (taskData.generated && Array.isArray(taskData.generated) && taskData.generated.length > 0) {
            const imageData = taskData.generated[0];
            if (imageData && imageData.base64) {
              return {
                content:
                  `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Freepik Mystic!\n\n` +
                  `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
                  `üé≠ –°—Ç–∏–ª—å: ${loraStyle}\n` +
                  `üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 2048x2048\n\n` +
                  `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n` +
                  `üí° Base64 –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!`,
              };
            }
          }
        }
        
        // Check if it's a direct task response - start polling
        if (response.data.task_id) {
          const taskId = response.data.task_id;
          console.log(`Starting polling for task: ${taskId}`);
          
          // Wait for the image to be generated
          const finalResult = await this.pollTaskStatus(taskId, prompt, loraStyle);
          return finalResult;
        }
        
        // Check for any URL in response
        if (response.data.url) {
          return {
            content:
              `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Freepik!\n\n` +
              `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
              `üé≠ –°—Ç–∏–ª—å: ${loraStyle}\n\n` +
              `üñºÔ∏è [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${response.data.url})\n\n` +
              `üí° Freepik API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`,
          };
        }
      }

      throw new Error("Unexpected response format");
    } catch (error: any) {
      console.error("Freepik generation error:", error);
      console.error("Error details:", {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        headers: error.response?.headers,
      });

      if (error.response?.status === 401) {
        return {
          content: 
            "üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Freepik API\n\n" +
            "‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫\n" +
            "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ FREEPIK_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n" +
            "üí≥ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        };
      }

      if (error.response?.status === 429) {
        return {
          content: 
            "‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n\n" +
            "üö¶ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Freepik API\n" +
            "‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n" +
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ AI —Å–µ—Ä–≤–∏—Å—ã –ø–æ–∫–∞ –∂–¥–µ—Ç–µ",
        };
      }

      if (error.response?.status === 402) {
        return {
          content: 
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n" +
            "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω—ã\n" +
            "üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n" +
            "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        };
      }

      if (error.response?.status === 400) {
        const errorMessage = error.response?.data?.message || error.response?.data?.error || "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å";
        return {
          content: 
            `‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Freepik API\n\n` +
            `üìù –î–µ—Ç–∞–ª–∏: ${errorMessage}\n\n` +
            `üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
            `‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–ø—Ç–∞\n` +
            `‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞\n` +
            `‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è API\n\n` +
            `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π AI —Å–µ—Ä–≤–∏—Å`,
        };
      }

      if (error.response?.data?.message) {
        return {
          content: `‚ùå Freepik API Error: ${error.response.data.message}`,
        };
      }

      if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {
        return {
          content: 
            "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è\n\n" +
            "‚ùå Freepik API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç\n" +
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n" +
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ AI —Å–µ—Ä–≤–∏—Å—ã",
        };
      }

      return {
        content: 
          "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n" +
          "üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n" +
          "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π AI\n" +
          "üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
      };
    }
  }

  // üé¨ Video generation method - Updated for correct Freepik endpoints
  async generateVideo(prompt: string, userId: string, modelKey: string = "kling-v2"): Promise<AIResponse> {
    try {
      // Check if API key is configured
      if (!this.apiKey || this.apiKey === "") {
        return {
          content:
            "üé¨ Freepik Video Generator\n\n" +
            "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n" +
            "üîß –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n" +
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Freepik\n" +
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é FREEPIK_API_KEY\n" +
            "‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ\n\n" +
            "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        };
      }

      // Map model keys to actual API endpoints and configurations
      const videoModels: { [key: string]: { endpoint: string, name: string, requiresImage?: boolean, params?: any } } = {
        "kling-v2.5-pro": { endpoint: "image-to-video/kling-v2-5-pro", name: "Kling v2.5 Pro", requiresImage: true },
        "minimax-hailuo-02-768p": { endpoint: "image-to-video/minimax-hailuo-02-768p", name: "Minimax Hailuo 02 768p", requiresImage: true },
        "minimax-hailuo-02-1080p": { endpoint: "image-to-video/minimax-hailuo-02-1080p", name: "Minimax Hailuo 02 1080p", requiresImage: true },
        "kling-v2.1-master": { endpoint: "image-to-video/kling-v2-1-master", name: "Kling v2.1 Master", requiresImage: true },
        "kling-pro-v2.1": { endpoint: "image-to-video/kling-pro-v2-1", name: "Kling Pro v2.1", requiresImage: true },
        "pixverse-v5": { endpoint: "image-to-video/pixverse-v5", name: "PixVerse V5", requiresImage: true },
        "pixverse-v5-transition": { endpoint: "image-to-video/pixverse-v5-transition", name: "PixVerse V5 Transition", requiresImage: true },
        "kling-std-v2.1": { endpoint: "image-to-video/kling-std-v2-1", name: "Kling Std v2.1", requiresImage: true },
        "kling-v2": { endpoint: "image-to-video/kling-v2", name: "Kling v2", requiresImage: true },
        "kling-pro-1.6": { endpoint: "image-to-video/kling-pro-1-6", name: "Kling Pro 1.6", requiresImage: true },
        "kling-std-1.6": { endpoint: "image-to-video/kling-std-1-6", name: "Kling Std 1.6", requiresImage: true },
        "kling-elements-pro-1.6": { endpoint: "image-to-video/kling-elements-pro-1-6", name: "Kling Elements Pro 1.6", requiresImage: true },
        "kling-elements-std-1.6": { endpoint: "image-to-video/kling-elements-std-1-6", name: "Kling Elements Std 1.6", requiresImage: true },
        "seedance-pro-1080p": { endpoint: "image-to-video/seedance-pro-1080p", name: "Seedance Pro 1080p", requiresImage: true },
        "seedance-pro-720p": { endpoint: "image-to-video/seedance-pro-720p", name: "Seedance Pro 720p", requiresImage: true },
        "seedance-pro-480p": { endpoint: "image-to-video/seedance-pro-480p", name: "Seedance Pro 480p", requiresImage: true },
        "seedance-lite-1080p": { endpoint: "image-to-video/seedance-lite-1080p", name: "Seedance Lite 1080p", requiresImage: true },
        "seedance-lite-720p": { endpoint: "image-to-video/seedance-lite-720p", name: "Seedance Lite 720p", requiresImage: true },
        "seedance-lite-480p": { endpoint: "image-to-video/seedance-lite-480p", name: "Seedance Lite 480p", requiresImage: true },
        "wan-v2.2-720p": { endpoint: "image-to-video/wan-v2-2-720p", name: "Wan v2.2 720p", requiresImage: true },
        "wan-v2.2-580p": { endpoint: "image-to-video/wan-v2-2-580p", name: "Wan v2.2 580p", requiresImage: true },
        "wan-v2.2-480p": { endpoint: "image-to-video/wan-v2-2-480p", name: "Wan v2.2 480p", requiresImage: true }
      };

      const selectedModel = videoModels[modelKey];
      if (!selectedModel) {
        return {
          content:
            `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –≤–∏–¥–µ–æ: ${modelKey}\n\n` +
            `üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n` +
            `‚Ä¢ Kling v2 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n` +
            `‚Ä¢ Kling Pro v2.1\n` +
            `‚Ä¢ PixVerse V5\n` +
            `‚Ä¢ Minimax Hailuo\n` +
            `‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ!\n\n` +
            `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –º–µ–Ω—é`
        };
      }

      // For image-to-video, we need a base image
      // For now, let's create a simple placeholder image or use a stock image
      const placeholderImageUrl = "https://storage.googleapis.com/fc-freepik-pro-rev1-eu-static/landing-api/examples/freepik__upload__53227.png";

      const fullUrl = `${this.apiUrl}/ai/${selectedModel.endpoint}`;
      
      console.log("Making Freepik Video API request:", {
        url: fullUrl,
        model: selectedModel.name,
        prompt: prompt.trim()
      });

      // Basic request data for image-to-video
      const requestData: any = {
        duration: "5", // 5 seconds
        prompt: prompt.trim()
      };

      // Add image for image-to-video models
      if (selectedModel.requiresImage) {
        requestData.image = placeholderImageUrl; // Using placeholder for now
      }

      console.log("Request data:", requestData);

      const response = await axios({
        method: 'POST',
        url: fullUrl,
        headers: {
          'Content-Type': 'application/json',
          'x-freepik-api-key': this.apiKey
        },
        data: requestData,
        timeout: 30000
      });

      console.log("Freepik Video API response:", response.data);

      // Check if response has task data
      if (response.data?.data?.task_id) {
        const taskId = response.data.data.task_id;
        const taskData = response.data.data;
        
        console.log(`‚úÖ Video task created successfully: ${taskId}`);
        
        // Save task to database for webhook tracking
        try {
          await prisma.freepikTask.create({
            data: {
              taskId: taskId,
              userId: userId,
              prompt: prompt,
              model: modelKey,
              type: "video",
              status: taskData.status || "CREATED"
            }
          });
          console.log(`üíæ Video task ${taskId} saved to database for user ${userId}`);
        } catch (dbError) {
          console.error("Failed to save video task to database:", dbError);
        }
        
        return {
          content:
            `üé¨ –í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\n` +
            `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
            `üé≠ –ú–æ–¥–µ–ª—å: ${selectedModel.name}\n` +
            `üìä Task ID: ${taskId}\n` +
            `‚úÖ –°—Ç–∞—Ç—É—Å: ${taskData.status || "CREATED"}\n\n` +
            `üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n` +
            `‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –æ–±—ã—á–Ω–æ 60-180 —Å–µ–∫—É–Ω–¥\n` +
            `üîî –ì–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n` +
            `üîÑ –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ, –ø–æ–∫–∞ –∂–¥–µ—Ç–µ\n\n` +
            `üéØ ${selectedModel.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`
        };
      }

      // Fallback response
      return {
        content:
          `üé¨ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n` +
          `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
          `üé≠ –ú–æ–¥–µ–ª—å: ${selectedModel.name}\n\n` +
          `‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n` +
          `üîî –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ webhook\n\n` +
          `üéØ Freepik Video API –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`
      };

    } catch (error: any) {
      console.error("‚ùå Freepik Video API error:", error);
      console.error("Error details:", {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: error.config?.url
      });

      // Handle specific error cases
      if (error.response?.status === 404) {
        return {
          content: 
            "üîç –ú–æ–¥–µ–ª—å –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n" +
            `‚ùå Endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –º–æ–¥–µ–ª–∏: ${modelKey}\n` +
            "üîß –í–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n" +
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞\n" +
            "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        };
      }

      if (error.response?.status === 401) {
        return {
          content: 
            "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Freepik Video API\n\n" +
            "‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫\n" +
            "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞\n" +
            "üí≥ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n" +
            "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        };
      }

      if (error.response?.status === 429) {
        return {
          content: 
            "‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ\n\n" +
            "üö¶ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Freepik Video API\n" +
            "‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n" +
            "üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
        };
      }

      if (error.response?.status === 402) {
        return {
          content: 
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ\n\n" +
            "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤\n" +
            "üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n" +
            "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        };
      }

      const errorMsg = error.response?.data?.message || error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      
      return {
        content: 
          "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ\n\n" +
          `üîß ${errorMsg}\n` +
          "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å\n" +
          "üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
      };
    }
  }

  private detectLoraStyle(prompt: string): string {
    const lowerPrompt = prompt.toLowerCase();

    const styleMap: { [key: string]: string[] } = {
      anime: ["anime", "manga", "japanese", "kawaii"],
      watercolor: ["watercolor", "aquarelle", "wash"],
      oil_painting: ["oil", "painting", "classical", "renaissance"],
      pixel_art: ["pixel", "8bit", "16bit", "retro", "pixelated"],
      photorealistic: ["realistic", "photo", "photography", "real"],
      abstract: ["abstract", "surreal", "artistic"],
    };

    for (const [style, keywords] of Object.entries(styleMap)) {
      if (keywords.some(keyword => lowerPrompt.includes(keyword))) {
        return style;
      }
    }

    // Default style
    return "photorealistic";
  }

  private async pollTaskStatus(taskId: string, prompt: string, style: string, maxAttempts: number = 30): Promise<AIResponse> {
    console.log(`üîÑ Polling task ${taskId}, max attempts: ${maxAttempts}`);
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        console.log(`üì° Polling attempt ${attempt}/${maxAttempts} for task ${taskId}`);
        
        // Try multiple possible endpoints for task status
        const possibleEndpoints = [
          `${this.apiUrl}/ai/mystic/task/${taskId}`,
          `${this.apiUrl}/ai/mystic/tasks/${taskId}`,
          `${this.apiUrl}/ai/task/${taskId}`,
          `${this.apiUrl}/ai/tasks/${taskId}`,
          `${this.apiUrl}/task/${taskId}`,
          `${this.apiUrl}/tasks/${taskId}`
        ];

        let response: any = null;
        let lastError: any = null;

        for (const endpoint of possibleEndpoints) {
          try {
            console.log(`Trying endpoint: ${endpoint}`);
            response = await axios.get(endpoint, {
              headers: {
                "x-freepik-api-key": this.apiKey
              },
              timeout: 30000
            });
            console.log(`‚úÖ Success with endpoint: ${endpoint}`);
            break;
          } catch (error: any) {
            console.log(`‚ùå Failed endpoint ${endpoint}: ${error.response?.status || error.message}`);
            lastError = error;
            continue;
          }
        }

        if (!response) {
          throw lastError || new Error("All polling endpoints failed");
        }

        console.log(`üìä Task ${taskId} status:`, response.data);

        if (response && response.data && response.data.data) {
          const taskData = response.data.data;
          
          // Check if task is completed
          if (taskData.status === 'COMPLETED' && taskData.generated && taskData.generated.length > 0) {
            const imageData = taskData.generated[0];
            
            if (imageData.base64) {
              // Success! We have the image - return with base64 data
              return {
                content:
                  `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n` +
                  `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
                  `üé≠ –°—Ç–∏–ª—å: ${style}\n` +
                  `üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 2048x2048\n` +
                  `‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${attempt * 3} —Å–µ–∫\n\n` +
                  `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n` +
                  `üìä Task ID: ${taskId}\n\n` +
                  `‚úÖ Freepik API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!\n` +
                  `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏ –∏ –ø—Ä–æ–º–ø—Ç—ã!\n\n` +
                  `data:image/jpeg;base64,${imageData.base64}`
              };
            }
            
            if (imageData.url) {
              return {
                content:
                  `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n` +
                  `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
                  `üé≠ –°—Ç–∏–ª—å: ${style}\n` +
                  `‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${attempt * 3} —Å–µ–∫\n\n` +
                  `üñºÔ∏è [–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${imageData.url})\n` +
                  `üìä Task ID: ${taskId}\n\n` +
                  `‚úÖ Freepik API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!`
              };
            }
          }
          
          // Check if task failed
          if (taskData.status === 'FAILED') {
            const errorMessage = taskData.error_message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            return {
              content:
                `‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å\n\n` +
                `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
                `üö´ –ü—Ä–∏—á–∏–Ω–∞: ${errorMessage}\n` +
                `üìä Task ID: ${taskId}\n\n` +
                `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n` +
                `‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç\n` +
                `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å\n` +
                `‚Ä¢ –£–±—Ä–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞`
            };
          }
          
          // Task is still processing
          if (taskData.status === 'PROCESSING' || taskData.status === 'PENDING') {
            console.log(`‚è≥ Task ${taskId} is ${taskData.status}, waiting...`);
          }
        }
        
        // Wait 3 seconds before next attempt
        if (attempt < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
      } catch (error: any) {
        console.error(`‚ùå Polling error for task ${taskId} (attempt ${attempt}):`, error.message);
        
        if (attempt === maxAttempts) {
          return {
            content:
              `‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\n` +
              `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
              `üìä Task ID: ${taskId}\n` +
              `‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: ${maxAttempts * 3} —Å–µ–∫\n\n` +
              `üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Ç–æ–≤–æ –ø–æ–∑–∂–µ.\n` +
              `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`
          };
        }
        
        // Wait a bit before retrying
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    // Timeout reached
    return {
      content:
        `‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è\n\n` +
        `üìù –ü—Ä–æ–º–ø—Ç: ${prompt}\n` +
        `üìä Task ID: ${taskId}\n` +
        `‚è±Ô∏è –û–∂–∏–¥–∞–ª–∏: ${maxAttempts * 3} —Å–µ–∫—É–Ω–¥\n\n` +
        `üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n` +
        `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`
    };
  }


}

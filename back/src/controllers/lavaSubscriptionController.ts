import { Request, Response } from 'express';
import { prisma } from '../utils/prismaClient';
import { logger } from '../utils/logger';
import crypto from 'crypto';

// –ù–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ LAVA Recurrent API
export const createLavaSubscription = async (req: Request, res: Response) => {
  try {
    logger.info('üîç LAVA SUBSCRIPTION: Request received', {
      body: req.body,
      method: req.method,
      url: req.url
    });

    const { plan, userId } = req.body;

    if (!userId) {
      logger.error('‚ùå LAVA: Missing userId');
      return res.status(400).json({ error: "User ID is required" });
    }

    if (!plan || !["basic", "pro", "premium"].includes(plan)) {
      logger.error('‚ùå LAVA: Invalid plan', { plan });
      return res.status(400).json({ error: "Invalid plan" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LAVA
    if (!process.env.LAVA_SHOP_ID || !process.env.LAVA_SECRET_KEY) {
      logger.error('‚ùå LAVA: Missing configuration');
      return res.status(500).json({ error: "Payment system not configured" });
    }

    console.log('üîç LAVA Config:', {
      hasShopId: !!process.env.LAVA_SHOP_ID,
      hasSecret: !!process.env.LAVA_SECRET_KEY,
      shopIdLength: process.env.LAVA_SHOP_ID?.length || 0
    });

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LAVA client
    const { Lava } = await import('../lib/lavaClient');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –∏–∑ –ë–î
    const subscriptionPlan = await prisma.subscriptionPlan.findUnique({
      where: { name: plan }
    });
    
    if (!subscriptionPlan) {
      logger.error('Subscription plan not found', { plan });
      return res.status(400).json({ error: 'Subscription plan not found' });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º lavaProductId –∏–ª–∏ lavaOfferId –∫–∞–∫ fallback
    const lavaProductId = subscriptionPlan.lavaProductId || subscriptionPlan.lavaOfferId;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!user) {
      logger.error('User not found', { userId });
      return res.status(400).json({ error: 'User not found' });
    }

    // –°–æ–∑–¥–∞–µ–º email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const userEmail = user.phone ? `${user.phone}@telegram.user` : `user${user.telegramId}@aicex.bot`;

    logger.info('‚úÖ LAVA: Starting subscription flow', {
      userId,
      plan,
      email: userEmail,
      lavaProductId: lavaProductId
    });

    // 1. –°–æ–∑–¥–∞–µ–º consumer (–ø–æ–¥–ø–∏—Å—á–∏–∫–∞)
    const consumerId = userId; // –∏—Å–ø–æ–ª—å–∑—É–µ–º userId –∫–∞–∫ consumerId
    
    try {
      await Lava.createConsumer({
        consumerId,
        email: userEmail,
        phone: user.phone || undefined
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º consumer –≤ –ë–î (–ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
      /*
      await prisma.lavaConsumer.upsert({
        where: { consumerId },
        update: {},
        create: { consumerId, userId },
      });
      */

      logger.info('‚úÖ LAVA: Consumer created', { consumerId });
    } catch (consumerError: any) {
      logger.warn('‚ö†Ô∏è LAVA: Consumer creation failed (might already exist)', consumerError.message);
    }

    // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const orderId = `order_${Date.now()}_${userId.slice(-8)}`; // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π orderId
    
    const subscriptionResponse = await Lava.createSubscription({
      productId: lavaProductId,
      consumerId,
      orderId
    });

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î (–ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º)
    /*
    const lavaSubscription = await prisma.lavaSubscription.create({
      data: {
        userId,
        consumerId,
        productId: lavaProductId,
        period: 'one_month', // –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        orderId,
        status: 'created',
      },
    });
    */

    logger.info('‚úÖ LAVA: Subscription created', {
      orderId,
      // subscriptionDbId: lavaSubscription.id,
      response: subscriptionResponse
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    const successResponse = {
      success: true,
      orderId,
      // subscriptionId: lavaSubscription.id,
      paymentUrl: (subscriptionResponse as any).paymentUrl || `https://pay.lava.ru/subscription/${orderId}`,
      amount: subscriptionPlan.priceRub,
      currency: 'RUB',
      lavaResponse: subscriptionResponse
    };

    return res.status(200).json(successResponse);

  } catch (error: any) {
    logger.error('üí• LAVA SUBSCRIPTION: Exception', {
      error: error.message,
      stack: error.stack
    });
    
    return res.status(500).json({
      success: false,
      error: error.message || 'Subscription creation failed',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export const getSubscriptionStatus = async (req: Request, res: Response) => {
  try {
    const { orderId } = req.params;
    
    const { Lava } = await import('../lib/lavaClient');
    const status = await Lava.getStatusBy({ orderId });
    
    res.json(status);
  } catch (error: any) {
    logger.error('Error getting subscription status:', error);
    res.status(500).json({ error: error.message });
  }
};

// –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export const cancelSubscription = async (req: Request, res: Response) => {
  try {
    const { orderId } = req.params;
    
    const { Lava } = await import('../lib/lavaClient');
    const result = await Lava.unsubscribe({ orderId });
    
    res.json(result);
  } catch (error: any) {
    logger.error('Error canceling subscription:', error);
    res.status(500).json({ error: error.message });
  }
};

// Webhook –¥–ª—è LAVA (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
export const lavaWebhook = async (req: Request, res: Response) => {
  try {
    const signature = req.header('Authorization');
    const rawBody = (req as any).rawBody || JSON.stringify(req.body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
    if (process.env.LAVA_WEBHOOK_SECRET && signature) {
      const expectedSignature = crypto
        .createHmac('sha256', process.env.LAVA_WEBHOOK_SECRET)
        .update(rawBody, 'utf8')
        .digest('hex');
        
      if (signature !== expectedSignature) {
        logger.warn('Invalid webhook signature');
        return res.status(401).json({ error: 'Invalid signature' });
      }
    }

    logger.info('üîî LAVA Webhook received:', req.body);

    const { status, order_id, subscription_id } = req.body;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    if (status === 'activated') {
      logger.info('‚úÖ Subscription activated:', { order_id, subscription_id });
      // TODO: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } else if (status === 'suspended') {
      logger.warn('‚ö†Ô∏è Subscription suspended:', { order_id, subscription_id });
      // TODO: –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    } else if (status === 'deactivated') {
      logger.info('‚ùå Subscription deactivated:', { order_id, subscription_id });
      // TODO: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    }

    res.status(200).send('OK');
  } catch (error: any) {
    logger.error('Webhook processing error:', error);
    res.status(500).json({ error: error.message });
  }
};
